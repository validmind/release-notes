---
title: "25.05.04 Hotfix release notes"
date: "May 23, 2025"
categories: [cmvm, 25.05.04, hotfix]
sidebar: release-notes
toc-expand: true
# Content edited by AI - 2025-06-05 09:34
# Content validated by AI - 2025-06-05 09:34
# Content overwritten from an earlier version - 2025-06-05 09:34
---

This release includes the ability to soft delete workflows and check dependencies, export comments in validation reports, and run schema migrations in a separate container, among other enhancements.

<!-- WARNING: Summary may not mention an enhancement PR -->

# Backend
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/backend/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/backend/compare/7fde7cbb33d7335d7948a4e940fc4e83d6327660...7fde7cbb33d7335d7948a4e940fc4e83d6327660 --->

## Enhancements


<!--- PR #1400: https://github.com/validmind/backend/pull/1400 --->
<!--- Labels: enhancement --->
### Add ability to soft delete workflows and check dependencies (#1400)

This update introduces a soft delete feature for workflows and a dependency check endpoint. Key changes include adding `deleted_at` and `deleted_by_id` columns to the `workflows` table, updating the Workflow model to support soft deletion, and modifying queries to exclude soft-deleted workflows. A new DELETE endpoint allows workflows to be soft deleted, and another endpoint checks workflow dependencies. Tests ensure that soft-deleted workflows are excluded from queries and that dependencies are accurately tracked.

This pull request introduces a soft delete mechanism for workflows and a corresponding dependency check endpoint. The main changes include:

- A migration adds two new columns to the `workflows` table: one for storing the deletion timestamp (`deleted_at`) and another for the ID of the user who performed the deletion (`deleted_by_id`).

- Updates to the Workflow model:
  
  - New columns (`deleted_at`, `deleted_by_id`) are added to support soft deletion.
  
  - The `serialize` method is updated to include the `deleted_at` field.
  
  - The query for retrieving workflows now excludes soft-deleted workflows by filtering for records where `deleted_at` is NULL.
  
  - A new class method `get_workflow_dependencies` is provided to calculate the count of dependent inventory models for a given workflow.
  
  - A new instance method `mark_as_deleted` is introduced, which sets the `deleted_at` timestamp and records the user who deleted the workflow before committing the change.

- Updates to the UI routes:
  
  - A new DELETE endpoint is added to soft delete a workflow. The endpoint uses the `mark_as_deleted` method and returns the appropriate HTTP status codes based on the outcome.
  
  - A new endpoint is implemented to check workflow dependencies by returning the count of inventory models relying on the specified workflow.

- New and updated test cases to ensure correct functionality:
  
  - Tests now verify that soft-deleted workflows are excluded from active workflow queries.
  
  - Tests check that dependencies are correctly counted before and after workflow executions are started.

Overall, these changes add a robust mechanism to handle workflow deletion in a soft manner, improving data integrity and allowing for dependency tracking on workflows.


<!--- PR #1429: https://github.com/validmind/backend/pull/1429 --->
<!--- Labels: enhancement, python --->
### Add ability to export comments in validation reports (#1429)

You can now export comments from validation reports. Previously, only flags could be exported. With the latest frontend update, an "Include comments left on document" checkbox is available when exporting validation reports. This enhancement addresses customer requests to save contributor comments.

This update enhances reporting by integrating user comments into generated reports. Key changes include adding a method in `annotation.py` to query comments, updating report serialization to support an `include_comments` flag, and modifying UI routes to handle this flag. A new function processes comments for document fragments, and a dataclass facilitates comment export. Unit tests ensure comments are correctly serialized and formatted.

- A static method, `get_user_comments_by_model_id`, is added to the `Annotation` model to query and join annotation data with related comments and their creators.

- Report serialization in `model_inventory.py` and `reports.py` now supports an `include_comments` flag for embedding user comments, affecting document generation and content structure.

- UI reporting routes in `ui_reporting.py` parse an additional parameter for comments inclusion. The helper method `parse_generate_report_params` consolidates all report parameters, including the `include_comments` flag.

- A new function, `get_comment_text_for_doc`, processes comments by stripping HTML and organizing them into styled text blocks for document fragments.

- The `ExportAnnotation` dataclass in `util_models.py` facilitates clean export of comment details, including user name, text content, creation date, and context.

- Unit tests in `test_reports.py` verify serialization with comments, ensure comments appear correctly in document fragments, and validate HTML cleaning before embedding in the final report.

These changes ensure user comments are properly queried, formatted, and integrated within generated reports for a comprehensive output.


<!--- PR #1433: https://github.com/validmind/backend/pull/1433 --->
<!--- Labels: enhancement, do not merge, breaking-change --->
### Run schema migrations in separate container (#1433)

This update modifies the `docker-entrypoint` script and `docker-compose` configuration to enhance the deployment process. Schema migrations, along with scripts for creating analytics views and managing RBAC, will now execute first in a separate container. Other ValidMind backend containers will wait for this process to complete before starting. Schema migrations should run once per deployment using a Kubernetes `job` resource. Failing to implement this `job` resource may cause system degradation due to schema mismatches with the ValidMind backend. An associated Helm chart update is required to support this change.

This update enhances deployment pipelines, documentation, Docker configurations, and startup scripts. Key improvements include using the `aws-actions/amazon-ecr-login@v2` for ECR login in GitHub Actions, refining Docker build processes, and enhancing local development instructions in `README.md`. Docker Compose now includes a dedicated migrations service, and startup scripts are optimized for different modes. Redundant code in `api.py` has been removed to streamline processes.

- GitHub Actions workflow (`deploy.yaml`):
  - Simplified ECR login using `aws-actions/amazon-ecr-login@v2`.
  - Updated Docker build tags and cache parameters with new login action outputs.

- Documentation Updates (`README.md`):
  - Added `make` targets for database migrations, RBAC installation, and analytics views.
  - Suggested using migrations task for ValidMind schema recreation.

- Docker Compose Enhancements (`docker-compose.yaml`):
  - Added a service for schema migrations.
  - Set dependency conditions for service completion before proceeding.

- Startup Script Adjustments (`docker-entrypoint.sh`):
  - Aligned Keycloak port with `KEYCLOAK_SERVICE_PORT`.
  - Adjusted Redis startup check for migration mode.
  - Differentiated startup flows for migration, worker, and API modes.

- Code Cleanup (`src/backend/api.py`):
  - Removed redundant Flask-Migrate initialization.


<!--- PR #1431: https://github.com/validmind/backend/pull/1431 --->
<!--- Labels: enhancement --->
### Enable or disable LLM support with `OfflineFlags` for Barclays (#1431)

This update introduces offline feature flag support and enhances the feature flags codebase. Key improvements include:

- Offline feature flags can now be configured via environment variables, enabling their use in environments without LaunchDarkly integration, such as VM deployments.

- Comprehensive docstrings have been added to all feature flag functions, enhancing code documentation.

- Feature flag access is now refactored to use a centralized, context-aware function, reducing code duplication.

- Unused feature flags (`FLAG_REDIS_ENABLED`, `FLAG_CASBIN_RELOAD_ENABLED`, `FLAG_AUTH_CONFIG`) have been removed.

- Type hints have been added to improve code maintainability and type safety.

This update enhances the feature flag system by adding offline support and improving context handling for LaunchDarkly evaluations. Key changes include the addition of a `FEATURE_FLAGS` JSON string in the `.env.example` file for offline environments, new functions in `feature_flags.py` for offline flag retrieval, and improved context functions. The backend now uses `get_feature_flag_with_context` for flag evaluations, and comprehensive unit tests have been added to ensure reliability.

The `.env.example` file now includes a `FEATURE_FLAGS` JSON string for offline environments, allowing offline evaluation of feature flags using a pre-defined JSON of flags.

The `feature_flags.py` file introduces new functions. `get_offline_feature_flag` retrieves flag values from the offline configuration, returning a default if the flag is absent. `get_feature_flag_with_context` checks the offline configuration before attempting a LaunchDarkly evaluation, enhancing offline reliability.

Two context functions have been improved. The `context_from_user` function now has an enhanced docstring, and a new function, `context_from_user_and_organization`, creates a multi-context using both user and organization information for more granular evaluations.

The backend tracking route now uses `get_feature_flag_with_context` instead of directly accessing the `ldclient`, decoupling feature flag evaluation from the LaunchDarkly client and enabling flexible offline support.

Comprehensive unit tests in `tests/unit/test_feature_flags.py` cover various scenarios, including context creation, offline and online flag evaluation, and handling cases where user or organization data may be missing.

## Bug fixes


<!--- PR #1396: https://github.com/validmind/backend/pull/1396 --->
<!--- Labels: bug, python --->
### Improve Auth0 error handling and debugging flow (#1396)

This update enhances error handling during the initial onboarding process. Previously, selecting a weak password resulted in a 500 error without explanation. Now, users receive a clear error message from Auth0, improving the onboarding experience.

Bugfix: Improved error handling in the organization onboarding flow.

This PR introduces several functional improvements, focusing on debugging, authentication error handling, code enhancements, and unit testing. A new remote debugging configuration for VS Code allows attaching a debugger to the API service in Docker. Authentication error handling now checks for password strength errors, raising specific error codes. Code enhancements include improved JSON serialization and logging updates. Additionally, comprehensive unit tests for `Auth0AuthProvider` have been added.

- **Debugging Enhancements:**
  
  - A remote debugging configuration is added to the VS Code launch file (`.vscode/launch.json`) for attaching a debugger (`debugpy`) to the API service in Docker. The README includes instructions for interactive debugging.
  
  - Docker Compose now exposes port 5678 and mounts relevant backend volumes, improving the debugging experience in a containerized environment.
  
  - The `docker-entrypoint.sh` script launches the Python application with `debugpy` (`-m debugpy --listen 0.0.0.0:5678`), enabling remote debugging.

- **Auth Error Handling Improvements:**
  
  - Enhanced error handling in `src/backend/auth/auth_provider.py` checks for password strength errors. A `PasswordStrengthError` in the API response raises an error with an `INVALID_FIELD` code and detailed information. Other errors default to a generic unauthorized error.
  
  - Route handling in `src/backend/routes/admin/organizations.py` is updated to catch and re-raise `AuthError`, ensuring proper error handling by the calling context.

- **Code and Utility Enhancements:**
  
  - The JSON encoder (`src/backend/utils/__init__.py`) now handles objects with a `to_dict` method, improving custom object serialization.
  
  - Logging in the generic error handler (`src/backend/errors/handlers.py`) is updated from exception level to error level to reduce excessive stack traces for expected issues.

- **Extended Unit Tests:**
  
  - A comprehensive set of unit tests for `Auth0AuthProvider` is added in `tests/unit/test_auth0_provider.py`. These tests cover scenarios like handling weak passwords, successful user creation, and other error cases, using mocks to simulate API interactions and validate error signaling and token management.


<!--- PR #1471: https://github.com/validmind/backend/pull/1471 --->
<!--- Labels: bug, security --->
### Check workflow permissions for states (#1471)

None

This update enhances security by ensuring UI workflow states endpoints access only organization-specific data. Workflows are now retrieved through `g.current_user_org.workflows`, limiting access to the current user's organization. This change applies to GET, POST, PATCH, and DELETE endpoints, reducing data leakage risks. Additionally, `ResourceNotFoundError` exceptions are explicitly rethrown for precise error signaling, while other exceptions result in an `InternalServerError`. These improvements ensure secure data access and clearer error handling.


<!--- PR #1458: https://github.com/validmind/backend/pull/1458 --->
<!--- Labels: bug, security --->
### Remove privilege escalation issue (#1458)

This update resolves a security issue where regular users could improperly escalate their permissions to become admins. The privilege escalation vulnerability has been removed.

This update improves user role management by refining the authorization process and enhancing variable naming for clarity. The POST endpoint now uses `resource="Role"` and `action="create"` for precise control, replacing the generic `refresh="api-async"` parameter. Similarly, the DELETE endpoint specifies `resource="Role"` with `action="delete"` to align with permission requirements. The variable `user` is renamed to `to_update_user` for clarity, ensuring consistency in organization membership checks and role assignments. Event publishing now correctly references the updated user variable.


<!--- PR #1470: https://github.com/validmind/backend/pull/1470 --->
<!--- Labels: bug, security --->
### Check model permissions on `/api/v1/workflows/targets/{cuid}/executions` (#1470)

The API route `/api/v1/workflows/targets/{cuid}/executions` has been updated to improve data selection accuracy. Previously, `Workflow.get_workflow` included the user and workflows within the user's organization, but `Execution.get_by_target` selected executions by target from all organizations. Now, `Execution.get_by_target` also includes the user, ensuring it selects executions by target only from the user's organization.

This update refactors workflow retrieval methods to focus on the associated organization rather than the user object. Key changes include updating the `get_workflow` method to require an organization and a CUID, enhancing the `get_by_target` method to filter queries by organization, and modifying REST API endpoints to align with these changes. Unit tests have been adjusted to ensure consistency. These improvements centralize organization-level access, enhancing consistency and reducing potential mismatches.

- In `src/backend/db/workflow.py`, the `get_workflow` method now requires an organization and a CUID. It raises a `ValueError` with a descriptive message if the organization is not provided.

- The `get_by_target` method now accepts an organization parameter and filters queries based on the organization associated with the workflow, ensuring correct scoping by organization.

- In `src/backend/routes/ui_workflows.py`, REST API endpoints now pass `g.current_user_org` instead of `g.current_user` to `Workflow.get_workflow`, aligning data retrieval with the new workflow model.

- Unit tests in `tests/unit/test_workflows.py` have been updated to use the organization parameter when fetching workflows and testing execution queries, ensuring consistency throughout the project.


<!--- PR #1441: https://github.com/validmind/backend/pull/1441 --->
<!--- Labels: bug --->
### Add logging to `workflows` Celery task (#1441)

This update introduces logging functionality and increases the maximum number of worker threads.

This update includes two key changes to improve performance and debugging:

- The Celery worker concurrency has been increased from 4 to 6 in the `celery_config.py` file. This adjustment allows more tasks to be processed simultaneously, helping to alleviate performance bottlenecks during high workloads.

- A new logging statement has been added to `workflows.py`. It logs the process of finding available workflows based on field changes, including the field key and associated organization. This aids in debugging and tracking execution flow when querying workflows.


<!--- PR #1472: https://github.com/validmind/backend/pull/1472 --->
<!--- Labels: bug --->
### Ensure `SQLAlchemy` pool variables are integers (#1472)

Kubernetes pod specifications require environment variables to be wrapped in quotes, which Python interprets as strings. This caused issues with SQLAlchemy, which expects integers. This update ensures that when environment variables are set by the Kubernetes pod specification, they are correctly cast to integers. Previously, default values were used.

This pull request improves the Flask application's configuration by ensuring that the SQLAlchemy-related environment variables, `SQLALCHEMY_POOL_SIZE` and `SQLALCHEMY_MAX_OVERFLOW`, are explicitly converted to integers. Previously, these values were used directly from environment variables as strings, potentially causing type mismatches. This change enforces the correct data type, reducing potential runtime errors related to database connection pooling configurations.


<!--- PR #1462: https://github.com/validmind/backend/pull/1462 --->
<!--- Labels: bug, python, security --->
### Prevent unauthorized modification of workflow status (#1462)

This update improves the validation process for the `PUT /api/v1/statuses-workflows/{id}/status` endpoint, ensuring users cannot change the workflow status of organizations they do not belong to. This enhancement addresses a security issue by preventing unauthorized users from modifying the workflow status of organizations they are not members of.

This update introduces the `get_status_for_org` static method, streamlining the retrieval of statuses by joining the `StatusesWorkflowStatus` and `StatusesWorkflow` tables using organization and workflow identifiers. This method replaces redundant queries in the edit endpoint, improving data access efficiency. Minor refactoring has enhanced code formatting and readability in block documentation and validation report functions. Unit tests verify the method's accuracy in handling both matching and non-matching identifiers.

<!-- ### Changes with no label -->


<!--- PR #1379: https://github.com/validmind/backend/pull/1379 --->
<!--- Labels: dependencies, go --->
### Update `golang.org/x/net` from `0.34.0` to `0.38.0` in `casbin-server` (#1379)

This update upgrades the Go toolchain from `go1.23.1` to `go1.24.1` and updates several indirect dependencies by modifying the `go.mod` and `go.sum` files. Modules such as `golang.org/x/crypto`, `golang.org/x/net`, `golang.org/x/sys`, and `golang.org/x/text` are also updated. These changes keep the project aligned with the latest Go ecosystem features and improvements, potentially incorporating fixes and performance enhancements. The update does not affect any functional business logic but ensures compatibility with the latest upstream changes.


<!--- PR #1394: https://github.com/validmind/backend/pull/1394 --->
<!--- Labels: none --->
### Replace `Black` with `Ruff` for code formatting and linting (#1394)

This update refactors import statements and adjusts code formatting throughout the project. Imports in source code, migration scripts, and utility modules have been reordered and grouped to better reflect dependencies. The code formatting tool in the `Makefile` has been switched from Black to Ruff, enhancing style consistency and readability. Minor whitespace and line-break adjustments have been made in various files, including API handlers and service modules. Functionality remains unchanged, but maintainability and clarity are improved.

Key functional changes:

- Standardized and reorganized import ordering in multiple files, such as migration scripts, API modules, and utility scripts.
- Updated the `Makefile` to run Ruff for both formatting and linting, improving style enforcement.
- Cleaned up redundant whitespace and adjusted formatting for inline strings and dictionary keys without altering program logic.

Overall, these improvements streamline the codebase, making future maintenance easier and reducing the risk of dependency issues without affecting business logic.


<!--- PR #1336: https://github.com/validmind/backend/pull/1336 --->
<!--- Labels: none --->
### Add Keycloak entrypoint to `Dockerfile` (#1336)

This update enhances the Keycloak service configuration by embedding configuration files directly into the Docker image, eliminating the need for volume mounts in the `docker-compose` file. Additionally, the environment variable `KC_DB_DATABASE` has been changed to `KC_DB_DtATABASE`. Verify this change to ensure compatibility with downstream components. These modifications streamline deployment but require attention to the environment variable adjustment to avoid issues.

This pull request introduces two main changes to the Keycloak service configuration:

- The volume mounts for Keycloak configuration files (`realm-export.json`, themes, and `entrypoint.sh`) in the `docker-compose` file have been removed. These files are now incorporated directly into the Docker image through updates in the `Dockerfile`. This change is intended to streamline deployment by including the necessary assets during the image build process.

- An environment variable has been modified from `KC_DB_DATABASE` to `KC_DB_DtATABASE`. It is important to verify whether this change is intentional or a typo, and ensure that the new variable name aligns with the expected configuration in downstream components.

Overall, this update improves the deployment process by embedding configuration files within the image, thereby reducing the reliance on host-based volume mounts. However, care should be taken with the environment variable change to prevent any potential issues.


<!--- PR #1417: https://github.com/validmind/backend/pull/1417 --->
<!--- Labels: none --->
### Update deployment configurations to new values format (#1417)

This pull request updates deployment workflow configurations in three YAML files: `deploy_aws_secondary.yaml`, `deploy_prod.yaml`, and `deploy_staging.yaml`. The main change is the use of the new template file `values-new.yaml` from the `templates/validmind` directory instead of the old `values.yaml`. This ensures deployments use updated configuration settings. The `sed` commands still replace placeholder strings with environment-specific values like site, environment, vault ID, repository, and API SHA for consistent deployments.


<!--- PR #1425: https://github.com/validmind/backend/pull/1425 --->
<!--- Labels: none --->
<!--- ### fix: typo in name of action in release_cmvm.yaml (#1425) --->
<!-- No release notes or summary provided. -->


<!--- PR #1403: https://github.com/validmind/backend/pull/1403 --->
<!--- Labels: none --->
### Enhance template handling with `flatten_sections` and validation functions (#1403)

This update enhances template handling within the application by introducing several improvements:

- The `upsert` function in the installation script now includes a `template_type` parameter to better distinguish templates.

- Validation functions have been added to backend database models for templates and template versions. These functions ensure proper processing of template data using the new `flatten_sections` utility, which converts nested sections into a flat JSON-safe format.

- Two new utility functions, `extract_clean_section` and `flatten_sections`, have been implemented. They recursively clean and flatten nested sections by removing unwanted keys like `order`, `index`, and `sections`, facilitating easier storage and processing of template metadata.

- Unit tests have been expanded to cover the new flattening functionality. These tests confirm correct flattening of nested sections, handle cases with missing `sections` keys, and manage deeply nested structures. They also ensure that existing functionalities, such as template serialization, adapt to the updated structure, using `sections` instead of `pages`.


<!--- PR #1492: https://github.com/validmind/backend/pull/1492 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.30.8) (#1492) --->
<!-- No release notes or summary provided. -->


<!--- PR #1484: https://github.com/validmind/backend/pull/1484 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1484) --->
<!-- No release notes or summary provided. -->


<!--- PR #1481: https://github.com/validmind/backend/pull/1481 --->
<!--- Labels: none --->
<!--- ### chore: ensure deploy workflows use correct values (#1481) --->
<!-- No release notes or summary provided. -->


<!--- PR #1491: https://github.com/validmind/backend/pull/1491 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1491) --->
<!-- No release notes or summary provided. -->


<!--- PR #1411: https://github.com/validmind/backend/pull/1411 --->
<!--- Labels: none --->
<!--- ### Clarify keycloak deployment docs (#1411) --->
<!-- No release notes or summary provided. -->


<!--- PR #1487: https://github.com/validmind/backend/pull/1487 --->
<!--- Labels: none --->
<!--- ### Cullen/merge staging into prod (#1487) --->
<!-- No release notes or summary provided. -->


<!--- PR #1495: https://github.com/validmind/backend/pull/1495 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1495) --->
<!-- No release notes or summary provided. -->


<!--- PR #1405: https://github.com/validmind/backend/pull/1405 --->
<!--- Labels: none --->
### Trigger workflow on model attribute changes (#1405)

This update enhances the workflow trigger mechanism and inventory model field update handling. Key improvements include increased Celery worker concurrency from 5 to 6, a new optional `trigger_field_key` column in the workflows table, and updates to the `InventoryModel` update method to return both updated field information and old values. The Workflow model now supports additional trigger types and events, with new helper properties for status checking. Workflow validation methods and API endpoints have been updated for better error handling and processing.

- Increased Celery worker concurrency from 5 to 6 in the `Makefile`, potentially improving parallel task processing.

- Added a new migration to introduce the optional column `trigger_field_key` in the workflows table, supporting workflow triggers based on specific field changes in inventory models.

- Updated the `InventoryModel` update method to return both updated field information and the old value, allowing further processing by triggering background tasks.

- Expanded the Workflow model:
  - Supports an additional trigger type and extended its allowed entities and events with a new `InventoryModel.field` type and an `updated` event type.
  - Added new helper properties (`is_deleted` and `is_enabled`) for easier status checking.
  - The workflow serialization method now includes the new `trigger_field_key`.

- Enhanced workflow validation methods to validate the `trigger_field_key` along with type, entity name, and event type. Validation errors now use a custom `BadRequestError` with more descriptive error messages.

- Updated API endpoints in the UI routes for workflows and inventory models to pass and process the `trigger_field_key`. When a model field changes, a new Celery task (`on_model_field_change`) is triggered to process workflow executions.

- The `WorkflowManager`'s `start_execution` method now includes type hints and improved documentation. Minor adjustments in test files ensure that date comparisons use timezone-aware datetime objects.

These changes improve the robustness and clarity of the workflow triggering mechanism with extended support for specific field updates in inventory models and refined error handling.


<!--- PR #1483: https://github.com/validmind/backend/pull/1483 --->
<!--- Labels: none --->
### Add `pg_stat_statements` migration (#1483)

An extension for profiling has been added.

This update adds a migration script to manage the `pg_stat_statements` extension in a PostgreSQL database. The script checks for the extension's existence and creates it if absent. The upgrade function connects to the database, verifies the extension's installation, and conditionally creates it if needed. It also retrieves and displays the current version for information. The downgrade function is a placeholder with no rollback logic. These changes ensure the monitoring features of `pg_stat_statements` are available without duplication.


<!--- PR #1420: https://github.com/validmind/backend/pull/1420 --->
<!--- Labels: none --->
### Remove `poetry.lock` from Dockerfile build process (#1420)

This update modifies the Dockerfile for the customer-managed environment by removing the `poetry.lock` file from the application directory during the container build process. This change prevents issues with dependency resolution or outdated locks being included in the container. It ensures clean dependency management by explicitly removing the file, allowing the project to generate an updated lock file in later steps or during runtime.


<!--- PR #1418: https://github.com/validmind/backend/pull/1418 --->
<!--- Labels: none --->
### Allow Keycloak theme to enable local user registration (#1418)

This update introduces two key changes to the Keycloak realm configuration and templates. First, self-registration is disabled by setting the `registrationAllowed` flag to false, preventing end users from creating accounts via the registration link. Second, the login and registration FreeMarker templates are updated. The login template now shows the registration link only if `registrationAllowed` is true. The registration template includes a debug block for form fields, explicitly defines required fields, and renders additional fields not explicitly required.

- In the Keycloak realm configuration, self-registration is disabled by setting the `registrationAllowed` flag to false, preventing end users from creating accounts via the registration link.

- The login and registration FreeMarker templates have been updated. The login template conditionally displays the registration link only when the realm's `registrationAllowed` flag is true. The registration template includes:

  - A debug block to display available form fields, hidden by default with CSS `display: none;`.
  
  - Explicitly defined required fields: `username`, `email`, `first name`, `last name`, `password`, and `password confirmation`.
  
  - Additional fields from the form data are rendered only if they are not among the explicitly defined required fields.

These changes enhance control over user self-registration and improve the registration form's structure and debugging capabilities.


<!--- PR #1455: https://github.com/validmind/backend/pull/1455 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.30.8) (#1455) --->
<!-- No release notes or summary provided. -->


<!--- PR #1329: https://github.com/validmind/backend/pull/1329 --->
<!--- Labels: dependencies, python --->
### Update `werkzeug` from version 2.3.8 to 3.0.6 (#1329)

This update changes the `werkzeug` dependency version in the `pyproject.toml` file from `^2.3.0` to `^3.0.6`. The newer version may include bug fixes, performance enhancements, and new features. It is crucial to ensure that this update does not affect any application components that depend on `werkzeug`, especially those related to routing, request handling, or middleware integration.


<!--- PR #1436: https://github.com/validmind/backend/pull/1436 --->
<!--- Labels: none --->
<!--- ### Repo Sync repo-sync/9683 (2025-05-05) (#1436) --->
<!-- No release notes or summary provided. -->


<!--- PR #1424: https://github.com/validmind/backend/pull/1424 --->
<!--- Labels: none --->
### Ensure `ruff` scans all files to prevent skipped warnings (#1424)

This update enhances code formatting consistency and cleans up lint exception comments. Key changes include updating the `Makefile` to run `ruff` commands with the `--no-cache` option for more reliable code analysis, simplifying `# noqa: B950` markers to `# noqa` in migration scripts, reordering import statements for consistency, and adjusting a test in the object storage service to use the simplified `# noqa` format. These changes focus on improving code clarity without altering functionality.

- Updated the `Makefile` to run `ruff` commands with the `--no-cache` option, ensuring the latest code analysis is used.

- Simplified `# noqa: B950` markers to `# noqa` in migration scripts, maintaining lint suppression while reducing verbosity.

- Reordered import statements in some modules for consistency and to address minor dependency issues.

- Adjusted a test in the object storage service to use the simplified `# noqa` format for the KMS key configuration string.


<!--- PR #1475: https://github.com/validmind/backend/pull/1475 --->
<!--- Labels: none --->
### Prevent cross-tenant template overwrite by adding `X-Organization-Id` check (#1475)

This update does not introduce any user-facing changes and does not affect the frontend. There are no screenshots or videos to display.

This update introduces two key changes:

- The `SQLALCHEMY_MAX_OVERFLOW` setting in `src/backend/api.py` has been reformatted for better readability. The functionality remains the same, but the code style now matches other multiline assignments.

- The template retrieval logic in `src/backend/routes/ui_templates.py` has been improved. Templates are now queried by both a unique identifier and the user's organization (`g.current_user_org.id`), ensuring users access only their organization's templates, enhancing data integrity and security.

Additionally, minor import reordering and cleanup in `src/backend/routes/ui_assets_proxy.py` have been performed for improved code organization and clarity.


<!--- PR #1464: https://github.com/validmind/backend/pull/1464 --->
<!--- Labels: none --->
### Prevent unauthorized access to inventory model documents via IDOR vulnerability (#1464)

This update enhances security for the UI assets proxy endpoint by implementing authentication and organization-level access control. Key changes include:

- Requiring authentication for the previously unprotected endpoint.
- Enforcing organization-level access control to ensure users access only their organization's assets.
- Supporting authentication token retrieval from cookies if the `Authorization` header is absent.
- Validating that requested assets belong to the user's organization.

These changes address a security vulnerability, preventing unauthorized access to private assets.

This update enhances the backend's authentication and authorization processes by introducing new methods for token retrieval and enforcing stricter access controls. 

- The `get_token_auth_cookie` function retrieves an access token from an authorization cookie if it's not in the headers.

- The `get_token_auth_header_or_cookie` function combines header and cookie methods for token extraction, replacing the previous `get_token_auth_header` method in authentication decorators.

- An authentication decorator (`@requires_auth()`) is added to the asset serving endpoint in the UI Assets Proxy, ensuring API access is restricted to authenticated users.

- The endpoint now checks authorization by matching the asset key's organization identifier with the current user's organization, raising an unauthorized error if they do not match.

These changes improve the authentication mechanism by supporting multiple token sources and ensuring assets are accessed only within the correct organizational context.


<!--- PR #1454: https://github.com/validmind/backend/pull/1454 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1454) --->
<!-- No release notes or summary provided. -->


<!--- PR #1440: https://github.com/validmind/backend/pull/1440 --->
<!--- Labels: none --->
### Fix validation of trigger type on update (#1440)

This update resolves an issue where a `PUT` request for a workflow would fail due to a validation error with the trigger type. The problem arose when the workflow returned itself, leading to a conflict with an existing workflow that shared the same trigger type.

This update improves workflow validation in the backend by adding the `update_cuid` parameter to the `validate_trigger_type` method. This ensures that the current workflow record is excluded from duplicate checks when updating an existing workflow. The query filtering now excludes workflows identified by `cuid` via `update_cuid`, preventing false positives. Additionally, in the UI workflows route (`src/backend/routes/ui_workflows.py`), exception handling is refined by explicitly re-raising `BadRequestError` for clearer error propagation. These changes enhance workflow update accuracy and error handling.


<!--- PR #1493: https://github.com/validmind/backend/pull/1493 --->
<!--- Labels: none --->
### Remove `-m` flag from entrypoint without module (#1493)

<!-- List any breaking changes -->

<!-- Add screenshots or videos showing before/after -->

This PR updates the startup command for the API service in the Docker entrypoint script. The previous command used the Python module flag `-m` with a file path, which might not have worked as expected. The updated command removes the `-m` flag and directly executes the script file using `ddtrace-run`. This change ensures the API service starts correctly, utilizing `ddtrace` for instrumentation as intended.


<!--- PR #1428: https://github.com/validmind/backend/pull/1428 --->
<!--- Labels: none --->
### Limit concurrency of testing workflow in GitHub Actions (#1428)

This pull request adds a new configuration block to the GitHub Actions workflow for the Python application. The concurrency settings ensure that only the most recent workflow run remains active by grouping runs by workflow and branch reference. This change cancels any in-progress runs when a new run is triggered, saving CI resources and reducing potential conflicts from concurrent executions.


<!--- PR #1445: https://github.com/validmind/backend/pull/1445 --->
<!--- Labels: none --->
### Ensure all model roles are considered when evaluating membership (#1445)

This update enhances the model membership and content type authorization logic in `src/backend/auth/auth.py` to consider all roles a user holds for a model, rather than just one. Previously, only the first matching role was used, potentially leading to access issues. Now, `get_all_model_roles_for_user` aggregates all roles, and `get_content_type_for_roles` manages multiple roles, ensuring comprehensive permissions for users with multiple roles. Review any dependencies on single-role logic, as assumptions may need adjustment.

The model membership and content type authorization logic has been updated to consider all roles a user holds for a model, rather than just one.

Before:
- Only the first matching role for a user on a model was considered.
- Functions like `get_model_role_for_user` and `get_content_type_for_role` operated on a single role.

After:
- `get_all_model_roles_for_user` returns all roles a user has for a model.
- Logic aggregates all content types a user is authorized for, based on all their roles.
- `get_content_type_for_role` is refactored to `get_content_type_for_roles` to handle multiple roles.
- Membership and authorization checks use the new multi-role logic, ensuring users with multiple roles are granted all appropriate permissions.

Previously, users with multiple roles on a model would only have permissions associated with the first role found, leading to potential access issues. This change ensures that all assigned roles are respected, improving the authorization system's correctness and flexibility.

- If any downstream code or policies assumed only a single role per user per model, those assumptions may need to be revisited.
- The function `get_content_type_for_role` is replaced by `get_content_type_for_roles` and now expects a list of roles.

Consider reviewing and updating any documentation or downstream services that reference the old single-role logic. This change lays the groundwork for more granular or complex role-based access control in the future.

This update enhances the authorization flow and role-based permissions in the backend, introducing multi-role support and improved content type resolution. Users can now have multiple roles, with the function `get_all_model_roles_for_user` returning all roles for a specific inventory model. The function `get_content_type_for_roles` filters content types based on permissions from each role. The authorization chain now validates content types against all user roles. A new `has_permission` method in `OrganizationRole` and a mapping in `RolePermission` improve permission checking.

- Multi-Role Support:
  - `get_model_role_for_user` is replaced by `get_all_model_roles_for_user`, returning all roles for a user in a specific inventory model.

- Content Type Resolution:
  - `get_content_type_for_roles` iterates over user roles, filtering by permissions using `RolePermission.PERMISSION_TO_CONTENT_TYPE`. It checks for conflicts, raising an `AuthError` if conflicting permissions are found.

- Authorization Chain Refinement:
  - Adjustments in the decorator and `ensure_model_membership` align with the multi-role structure, validating authorized content types against all user roles.

- Data Model Enhancements:
  - A `has_permission` method is added to `OrganizationRole` for permission checking.
  - `RolePermission` includes a mapping (`PERMISSION_TO_CONTENT_TYPE`) linking permission action IDs to content types, with plans for expansion.


<!--- PR #1486: https://github.com/validmind/backend/pull/1486 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1486) --->
<!-- No release notes or summary provided. -->


<!--- PR #1465: https://github.com/validmind/backend/pull/1465 --->
<!--- Labels: security --->
### Validate owners list against selected group (#1465)

A critical vulnerability has been fixed to prevent unauthorized users from being added to the owners list and accessing personally identifiable information (PII) without verifying their organizational membership. This update safeguards PII and ensures users can only access data within their own organization and group.

This update enhances user membership and ownership handling in the application with several improvements:

- Removed the unused `flask_migrate` import from the backend API module, streamlining project dependencies.

- Repositioned the `RolePermission` import in the authentication module for clearer dependency management.

- Added a new `is_member` method to the `Group` class, which checks if a user is already a group member, centralizing membership logic.

- Improved the UI inventory models route by ensuring users exist and are group members before assigning them as owners or developers, preventing unauthorized assignments.


<!--- PR #1466: https://github.com/validmind/backend/pull/1466 --->
<!--- Labels: none --->
### Remove legacy logic for implicit text blocks (#1466)

This update refactors the API endpoint handling of the `contents` field in UI inventory models. Previously, if a section lacked a `contents` key, it defaulted to a list containing a dictionary with a `content_id` (matching the section ID) and a `content_type` of `text`. Now, the `get()` method retrieves `contents`, defaulting to an empty list if absent. This change simplifies the code and clarifies behavior. Users should ensure that returning an empty list does not cause unintended effects.


<!--- PR #1426: https://github.com/validmind/backend/pull/1426 --->
<!--- Labels: none --->
### Update deployment workflows to use `values-new.yaml` for AWS environments (#1426)

This pull request updates the deployment workflow configurations for AWS secondary, production, and staging environments. The workflows now copy the new template file (`values-new.yaml`) into the manifests directory instead of the old template file (`values.yaml`). The `sed` commands for template substitutions remain unchanged. This update ensures deployments use the latest configuration template to meet newer deployment requirements.


<!--- PR #1358: https://github.com/validmind/backend/pull/1358 --->
<!--- Labels: none --->
### Add startup checks for datastores and Keycloak (#1358)

This update enhances Docker configuration and startup logic to improve service orchestration and dependency management. The `Dockerfile` now installs utilities like `jq`, `postgresql-client-15`, and `redis-tools` for better operations and debugging. The `docker-compose.yaml` file includes a new port mapping (9000) for Keycloak and sets the `KC_HEALTH_ENABLED` environment variable for health checks. The `docker-entrypoint.sh` script now performs readiness checks for Postgres, Redis, and Keycloak, ensuring services are available before starting the application. The Keycloak `Dockerfile` has been updated to expose the new port (9000). These changes enhance the resilience of container-based deployments by ensuring critical services are healthy before application processes begin.


<!--- PR #1408: https://github.com/validmind/backend/pull/1408 --->
<!--- Labels: none --->
### Add `global_id` to template serialization (#1408)

This update improves the backend template serialization process by adding a `global_id` key to the payload generated by the `serialize_template` function. The `global_id` is derived from the `base_template` property and is included with other metadata like `template_cuid`, `template`, and `created_at`. This change enhances traceability and consistency by ensuring each serialized output includes a unique global identifier.


<!--- PR #1427: https://github.com/validmind/backend/pull/1427 --->
<!--- Labels: none --->
<!--- ### feat: allow frontend deploys from branches in dev (#1427) --->
<!-- No release notes or summary provided. -->


<!--- PR #1496: https://github.com/validmind/backend/pull/1496 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.30.8) (#1496) --->
<!-- No release notes or summary provided. -->


<!--- PR #1442: https://github.com/validmind/backend/pull/1442 --->
<!--- Labels: none --->
### Increase worker concurrency (#1442)

This update enhances system performance by increasing worker concurrency, allowing for more efficient task processing.

This pull request increases the Celery worker concurrency from 4 to 6 in `docker-entrypoint.sh`. This change enables the worker to handle more tasks simultaneously, potentially enhancing performance under load. The rest of the command remains unchanged, ensuring the worker starts with the correct work directory and Celery application context.


<!--- PR #1485: https://github.com/validmind/backend/pull/1485 --->
<!--- Labels: none --->
### Revert fix for unauthorized access to inventory model assets (#1485)

This update enhances existing functionality. No screenshots or videos are included.

This update simplifies the authentication process by eliminating the fallback logic for token extraction from cookies. The functions `get_token_auth_cookie` and `get_token_auth_header_or_cookie` have been removed. Authentication now exclusively uses the token provided in the header via `get_token_auth_header`.

Additionally, changes have been made to the UI assets proxy endpoint. The `requires_auth` decorator and organization access check logic have been removed. The endpoint now directly retrieves a pre-signed URL from object storage, bypassing previous authorization checks for asset access.


<!--- PR #1439: https://github.com/validmind/backend/pull/1439 --->
<!--- Labels: none --->
### Support exporting comments for documentation and monitoring reports; fix database query (#1439)

This update introduces two key changes: 

- You can now export comments in both documentation and monitoring reports.
- A database query issue related to exporting comments has been fixed.

These enhancements respond to customer requests for improved comment visibility.

This update improves the management and display of user comments linked to inventory models in reports. Key enhancements include:

- The `get_user_comments_by_model_id` method now accepts a `content_type` parameter for filtering and joining with the Metadata table, ensuring comments are fetched according to the report type.

- A new function, `render_comment_fragments`, centralizes the logic for rendering comment fragments, formatting text, and handling nullable fields like `context` and `created_at`.

- Report serialization functions now support an `include_comments` option, adding a 'Comments' section to reports when enabled.

- Unit tests have been updated to validate scenarios such as comment rendering with and without the `include_comments` flag, filtering out irrelevant comments, and supporting enhanced annotation creation.

These changes enhance the robustness and flexibility of comment handling, enabling better report customization and filtering.


<!--- PR #1490: https://github.com/validmind/backend/pull/1490 --->
<!--- Labels: none --->
### Remove `debugpy` from `docker-entrypoint.sh` to simplify API startup (#1490)

This update does not introduce new functionality or change existing behavior, so there are no user-facing changes to report. No visual elements like screenshots or videos are needed, as the update does not impact the user interface or experience.

This update simplifies the API service startup process by removing the `debugpy` integration from the `docker-entrypoint.sh` file. Previously, the container started the API service with `debugpy` enabled, listening on `0.0.0.0:5678`. Now, the service starts directly using `ddtrace-run`, eliminating the need for `debugpy`. This change is aimed at streamlining production deployments where remote debugging is unnecessary.


<!--- PR #1482: https://github.com/validmind/backend/pull/1482 --->
<!--- Labels: none --->
### Prevent admins from modifying `staff` roles (#1482)

Admins can no longer modify staff roles using the `PATCH /api/v1/roles/<protected_role_id>/permissions` endpoint. This change addresses a potential security vulnerability.

This update refactors role management endpoints in the backend for improved consistency and protection. Key changes include renaming the `orgRole` variable to `org_role` for better readability and introducing a check in the PATCH endpoint to prevent modifications to `staff` roles, similar to the existing protection for `admin` roles. These adjustments enhance code maintainability and enforce role-based restrictions.

The primary changes include:

- Consistent Naming: The variable previously named `orgRole` has been renamed to `org_role` throughout the GET and PATCH endpoints to follow snake_case conventions and improve code readability.

- Enhanced Role Protection: In the PATCH endpoint, an additional check has been introduced to prevent modifications to roles marked as `staff`, similar to the existing constraint for `admin` roles. This ensures that both admin and staff roles remain immutable via this endpoint.

- Minor Refactoring: The changes include systematic renaming and minor logic adjustments to maintain consistency across related queries and handling of permissions. Overall, these changes should improve maintainability and enforce proper role-based restrictions within the application.


# Frontend
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/frontend/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/frontend/compare/32c1fd2869b3a69d9ed75be917d9be0589822872...32c1fd2869b3a69d9ed75be917d9be0589822872 --->

## Enhancements


<!--- PR #1347: https://github.com/validmind/frontend/pull/1347 --->
<!--- Labels: enhancement --->
### Trigger workflow on field change (#1347)

A new trigger type, "On Model Field Change," is now available when creating workflows. This feature lets you monitor changes in a specific inventory model field before initiating workflow execution.

This update enhances the workflow management component and its API service, improving flexibility and user interface dynamics. Key changes include API adjustments for URL formatting and the addition of an optional `triggerFieldKey` parameter. The Workflow Modal now supports dynamic behavior with a new `MODEL_FIELD_CHANGE` trigger type, allowing users to select specific fields to trigger workflows. Enumerations for `TriggerType`, `EntityName`, and `EntityEventType` have been updated to support these enhancements.

- **API Changes**: The GET endpoint now correctly formats the URL string by removing an unnecessary line break. The `PostWorkflow` API call includes a new optional parameter, `triggerFieldKey`, for capturing a custom trigger field key.

- **Workflow Modal Enhancements**: The modal imports additional context and utility methods, using `UsersContext` and `getSchemaPropertyByKey` to build a list of available fields. A new `MODEL_FIELD_CHANGE` trigger type allows users to select a specific field to trigger workflows. The modal supports dynamic behavior based on the trigger type, resetting error states upon open/close and adjusting entity names and event types accordingly.

- **Model Updates**: Enumerations for `TriggerType`, `EntityName`, and `EntityEventType` now include the `MODEL_FIELD_CHANGE` trigger, supporting both field-based modifications and traditional events.


<!--- PR #1328: https://github.com/validmind/frontend/pull/1328 --->
<!--- Labels: enhancement --->
### Implement improved template swap/merge experience (#1328)

This update introduces a feature that allows users to update documents using a template. Users can merge a template into an existing document and choose to selectively add, ignore, delete, or retain changes.

This update introduces key functional enhancements and UI improvements to streamline document template management:

- **Dependency Updates**: The project version is now 1.33.4, with new dependencies like `@minoru/react-dnd-treeview` and `react-dnd` for advanced drag-and-drop capabilities.

- **API Enhancements**: The `SwapTemplate` function is replaced by `CreateAndSwapTemplate`, consolidating template creation and swapping into a single API call for better clarity and reusability.

- **UI Modifications**: Updates to components such as `AddFindingModal` and `AttributesRailDocumentOverview` enhance user interactions. Changes include clearer trigger labels, improved layout, and integration of menu components for template management.

- **Swap Template Modal**: A new `SwapTemplateModal` component offers a drag-and-drop tree view for comparing templates. Users can mark sections with statuses like ADD, KEEP, IGNORE, or DELETE, and the UI assists in resolving invalid configurations.

- **Template Model Adjustments**: Minor changes include making the parent section optional and adding a `global_id` field to support new swapping logic.

These enhancements aim to provide a more interactive and efficient approach to managing document templates.


<!--- PR #1339: https://github.com/validmind/frontend/pull/1339 --->
<!--- Labels: enhancement --->
### Enable workflow deletion with dependency checks (#1339)

This update introduces a new feature for 'soft-deleting' workflows. When a workflow is deleted, ongoing executions using the deleted workflow can continue. However, the workflow will be removed from the active workflows list, and future executions will be prevented.

This update enables workflow deletion while checking for dependencies between workflows and associated models. 

API Enhancements:

- `GetWorkflowModelDependenciesCount` retrieves the number of models depending on a workflow, warning users of potential impacts before deletion.
- `DeleteWorkflow` sends a DELETE request to remove a specified workflow.

New UI Components:

- `WorkflowDeleteModal` offers a confirmation dialog for deleting workflows, displaying warnings if models depend on the workflow and handling success and error notifications.
- `ExecutionDetails` alerts users if a workflow has been deleted, clarifying that current executions will continue normally.
- `WorkflowList` includes a delete option that checks dependencies before opening the delete modal, ensuring safer workflow deletion.

Model Update:

- A `deleted_at` field has been added to the Workflow model to track deletions, allowing the UI to render warnings conditionally.

These changes enhance workflow deletion by preventing accidental removal when dependencies exist and improving user feedback during the process.


<!--- PR #1351: https://github.com/validmind/frontend/pull/1351 --->
<!--- Labels: enhancement, refactor --->
### Approval process notes added to activity log (#1351)

Workflow approval step voter notes have been added to the activity log.

This update enhances the UI with several functional improvements and refactors. Key changes include collapsible content in the `EventRowLayout` component for displaying additional details like vote notes, toggled by an `IconButton`. New components for workflow approvals have been added, such as `ApprovalActionButtons`, `ApprovalHeader`, `ApprovalVoterCard`, `VoteDetailsModal`, and `VoterStatusColumn`, improving usability and organization. Redundant code has been cleaned up, enhancing maintainability and readability.

This PR introduces several functional UI enhancements and refactors across the application. The key changes include:

- In the `EventRowLayout` component, collapsible content has been implemented to display additional details, such as vote notes, when available. An `IconButton` toggles a `Collapse` element, and the display icon switches between a downward and upward chevron accordingly.

- New components related to workflow approvals have been added:
  - `ApprovalActionButtons`: Provides a consistent button group for approving or rejecting votes with appropriate color schemes and iconography.
  - `ApprovalHeader`: Displays the approval title and message in a more structured layout.
  - `ApprovalVoterCard`: Renders voter information with an optional popover for vote notes, enhancing usability when notes are present.
  - `VoteDetailsModal`: Offers a modal for detailed viewing of vote notes in a read-only textarea.
  - `VoterStatusColumn` and associated constants: These aid in organizing and displaying voter statuses in columns based on their vote state, using a uniform look for all statuses.

- Some redundant code and inline commented sections have been cleaned up and replaced with reusable components, improving overall maintainability and readability.

Overall, the PR increases the modularity of the code and offers a richer, more interactive user interface for event and workflow approval processes.


<!--- PR #1359: https://github.com/validmind/frontend/pull/1359 --->
<!--- Labels: enhancement, good first issue, javascript --->
### Add ability to export comments in validation reports (#1359)

We have added the ability to export comments from validation reports. Previously, only flags could be exported. By default, exporting comments is turned off. To enable this feature, a new checkbox has been added to the UI, allowing users to instruct the backend to include comments in the validation report. When exporting, comments will be included in the appendix of the document.

The screenshot shows the new "Include comments left on document" checkbox in the UI.

This update improves the report download feature by introducing the `includeComments` option. The `DownloadReport` function in `API.ts` now accepts an optional boolean parameter to include comments in the report data. The `DownloadValidationReportModal` component includes a checkbox for users to toggle this option. The UI has been updated to handle this new state, and the API call now passes the `include_comments` parameter to include comments in the report when selected.


<!--- PR #1393: https://github.com/validmind/frontend/pull/1393 --->
<!--- Labels: enhancement --->
### Add workflow-run step (#1393)

A new "Run Workflow" step has been introduced, enabling users to target and execute any manually triggered workflow.

The styling of workflow node boxes has been updated for consistent coloring, outline, and selection. These updates are applicable to both zoom-in and zoom-out views of configured and unconfigured node boxes.

For more details, refer to the related changes in the ValidMind backend repository.

This PR introduces key enhancements and bug fixes, improving UI consistency, API functionality, and workflow management. Spinners now use theme defaults for consistent styling. The `GetWorkflows` API supports pagination and filtering, and a new `GetWorkflowDependencies` function aids in workflow deletion decisions. The workflow deletion modal now handles dependency errors more gracefully. A new run workflow node allows triggering other workflows, and UI tweaks enhance debugging and node component styling.

- UI & Spinner Update: Spinners across the application now use theme defaults for consistent styling.

- Workflow API Enhancements: The `GetWorkflows` function supports pagination and filtering by trigger type. The new `GetWorkflowDependencies` function retrieves model dependency counts and lists dependent workflows, aiding deletion decisions.

- Workflow Deletion Modal Improvements: The delete modal now shows warnings and lists dependent workflows if deletion is blocked by dependencies, disabling the delete button.

- New Run Workflow Feature: A new node allows users to trigger other workflows, integrated into the workflow canvas with UI components and an inline dropdown for workflow selection.

- UI Consistency & Debug Enhancements: Minor UI tweaks and added inline inspection popovers aid debugging. Components like `NodeBox` now display contextual data for troubleshooting workflows.


<!--- PR #1372: https://github.com/validmind/frontend/pull/1372 --->
<!--- Labels: enhancement --->
### Allow deletion of roles and stakeholder types (#1372)

This update introduces delete buttons and confirmation dialogs to both the roles list and detail pages, as well as the stakeholder types list and detail pages. Group deletion now uses a reusable component with improved styling for consistency. An `API.ts` call has been implemented for deleting roles, which is also used for stakeholder type deletions. Additionally, a stakeholder type settings menu item has been added according to the documentation.

- Added delete buttons and confirmation dialogs to the roles and stakeholder types lists and detail pages.

- Updated group deletion to use a reusable component with improved styling.

- Implemented an `API.ts` call for deleting roles, reused for stakeholder type deletions.

- Added the stakeholder type settings menu item as per the documentation.

This update enhances role deletion and confirmation dialogs in the application. Key improvements include:

- A new `DeleteRole` API method for role deletion via an Axios DELETE endpoint.
- A standardized `DeleteConfirmationAlert` component for consistent deletion confirmations across multiple pages, including Group, RoleDetails, Roles, and Stakeholders.
- Updated `DangerMenuItem` styling to better indicate destructive actions.
- RoleDetails now supports role and stakeholder type deletion with detailed impact messages.
- Roles and Stakeholders pages allow role deletion via a contextual menu, using react-query mutations to ensure immediate data updates.
- Minor UI copy adjustments in `AddRoleModal` to distinguish between adding roles and stakeholder types.

These changes improve deletion flow consistency, ensuring users are informed and deliberate when performing destructive actions.


<!--- PR #1371: https://github.com/validmind/frontend/pull/1371 --->
<!--- Labels: enhancement, good first issue, javascript --->
### Add ability to export comments in monitoring and documentation reports (#1371)

We have added the ability to export comments from monitoring and documentation reports. By default, exporting comments is turned off, similar to existing export flags. This feature extends a previous update where a new field was added for validation reports.

Customers now have the option to include comments left in monitoring and documentation reports when exporting. Comments are appended at the end of the document, and only resolved comments are included.

This update enhances the UI and configuration options in export modals for Model Documentation, Validation Report, and Monitoring Report, improving the export experience. Key changes include a new "Include comments" checkbox for export files, UI improvements with consistent layout components like `HStack`, and integrated `MoreInfoPopOver` for contextual help. Accessibility improvements include spacing and `aria-label` adjustments for buttons. These changes simplify the export process by focusing on a single checkbox for comments inclusion.

Key changes include:

- A new "Include comments" checkbox in each modal allows users to decide whether comments should be included in the exported file. This option is managed with a new state variable and is passed to the API call accordingly.

- UI improvements have been made by replacing certain layout components with more consistent alternatives, such as using `HStack` for grouping text and popover components. This enhances alignment and spacing for a more coherent user experience.

- The `MoreInfoPopOver` component is now integrated directly within the header or section text to provide users with contextual help regarding document exporting.

- Minor adjustments to spacing and `aria-label` attributes have been added to buttons, specifically the download buttons, to improve accessibility.

Overall, these changes streamline the configuration experience for generating export documents by omitting redundant file format selection in favor of a single, focused checkbox option for comments inclusion.

## Bug fixes


<!--- PR #1361: https://github.com/validmind/frontend/pull/1361 --->
<!--- Labels: bug --->
### Refactor menu rendering in `BlockExplorer` for improved flexibility (#1361)

The documentation sections will no longer include default text blocks. Instead, users will see an empty state with a prompt to "Add New Block."

- Fixed a bug that prevented some sections from being deleted.

This update refactors the menu rendering logic in the `BlockExplorer` component to enhance flexibility and reusability. Key changes include the introduction of a `MenuWrapper` component, which consolidates menu display logic with `DocumentBlockModal` configuration, reducing duplication. A new optional property, `customRender`, is added to `BlockExplorerProps`, allowing for customized UI behavior. Updates in `DocumentationPage` utilize this feature for a cleaner empty state. Minor behavior changes ensure truly empty sections when appropriate.

The update introduces a `MenuWrapper` component that consolidates menu display logic with `DocumentBlockModal` configuration, reducing duplication since the menu is used in multiple places within the `BlockExplorer` component.

A new optional property, `customRender`, is added to `BlockExplorerProps`. When provided, `BlockExplorer` uses the `customRender` method wrapped within the `MenuWrapper`, allowing for customized UI behavior, such as displaying an empty state with an "Add New Block" button.

Updates in `DocumentationPage` utilize the new `customRender` feature of `BlockExplorer`. This change offers a cleaner and more context-sensitive empty state, prompting users to start building the section, with the `MenuButton` used to trigger focus via the `setIsFocused` callback.

Minor behavior changes include modifying the `getInitialSectionContents` function to return an empty array instead of a default content block, ensuring that empty sections remain truly empty when appropriate.

These changes aim to improve modularity, reduce duplication, and give developers more control over how blocks and menus are rendered within the application.


<!--- PR #1336: https://github.com/validmind/frontend/pull/1336 --->
<!--- Labels: bug --->
### Improve Auth0 error handling flow (#1336)

This update enhances error handling by displaying detailed error messages from the backend instead of just error codes. If a specific message is unavailable, the default error message will be shown. Additionally, a bug in the organization onboarding flow has been fixed to improve error handling.

This update improves error handling in the `BootstrapForm` component by prioritizing detailed API error messages over generic ones. When an organization creation fails, the form now displays the API's specific error message (`error.response?.data?.message`) instead of a generic `error.message`. This message is stored in a local variable (`errorMessage`) and used consistently in both inline error displays and toast notifications, enhancing troubleshooting and user guidance.

<!-- ### Changes with no label -->


<!--- PR #1411: https://github.com/validmind/frontend/pull/1411 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.34.4) (#1411) --->
<!-- No release notes or summary provided. -->


<!--- PR #1389: https://github.com/validmind/frontend/pull/1389 --->
<!--- Labels: none --->
<!--- ### Merge Staging hotfixes into Main (staging-1.33.3-to-main) (#1389) --->
<!-- No release notes or summary provided. -->


<!--- PR #1412: https://github.com/validmind/frontend/pull/1412 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.34.4) (#1412) --->
<!-- No release notes or summary provided. -->


<!--- PR #1364: https://github.com/validmind/frontend/pull/1364 --->
<!--- Labels: none --->
<!--- ### Repo Sync repo-sync/9683 (2025-05-05) (#1364) --->
<!-- No release notes or summary provided. -->


<!--- PR #1400: https://github.com/validmind/frontend/pull/1400 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.34.4) (#1400) --->
<!-- No release notes or summary provided. -->


<!--- PR #1354: https://github.com/validmind/frontend/pull/1354 --->
<!--- Labels: none --->
<!--- ### chore: sync pr template from backend (#1354) --->
<!-- No release notes or summary provided. -->


<!--- PR #1404: https://github.com/validmind/frontend/pull/1404 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.34.4) (#1404) --->
<!-- No release notes or summary provided. -->


<!--- PR #1390: https://github.com/validmind/frontend/pull/1390 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.34.2) (#1390) --->
<!-- No release notes or summary provided. -->


<!--- PR #1401: https://github.com/validmind/frontend/pull/1401 --->
<!--- Labels: none --->
<!--- ### Hotfix: Fixed cookie settings to work with local and deployed environments. (#1401) --->
<!-- No release notes or summary provided. -->


<!--- PR #1391: https://github.com/validmind/frontend/pull/1391 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.34.2) (#1391) --->
<!-- No release notes or summary provided. -->


<!--- PR #1398: https://github.com/validmind/frontend/pull/1398 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.34.4) (#1398) --->
<!-- No release notes or summary provided. -->


<!--- PR #1392: https://github.com/validmind/frontend/pull/1392 --->
<!--- Labels: none --->
### Set authentication token as a cookie for asset access (#1392)

This update introduces cookie-based authentication for accessing assets, providing an alternative to the `Authorization` header. Previously, assets embedded in HTML were inaccessible due to the inability to set an auth header. Now, the system first tries the `Authorization` header, then the `authToken` cookie, allowing authenticated users to access assets in HTML contexts. This change enhances security by preventing unauthorized access to organization-specific assets and includes organization-level access control validation.

This update introduces support for cookie-based authentication as an alternative to using authorization headers for accessing assets. Previously, assets could only be accessed with an `Authorization` header, which HTML `img` tags and similar elements cannot set. This limitation made assets embedded in HTML inaccessible when authentication was required.

With this change, the system will first attempt to authenticate using the `Authorization` header. If that fails, it will try to authenticate using the `authToken` cookie. This allows properly authenticated users to access assets in HTML contexts.

The update addresses the issue where authenticated users couldn't view assets embedded in HTML documentation, reports, and other UI components due to the inability to set an auth header. Cookie-based authentication offers a secure alternative for these scenarios. It also resolves a security issue where unauthorized users could potentially access assets from organizations they don't belong to.

This change is part of a broader security enhancement to prevent unauthorized access to organization-specific assets. The backend changes include organization-level access control validation to ensure users can only access assets from their own organization.

This update enhances the `MainApp` component by introducing a new feature that sets an authentication token as a cookie when an access token is available. This allows asset requests to verify user authentication via the cookie. Additionally, `onSuccess` and event handler callbacks have been refactored for improved readability, and code formatting in role and permission mappings, as well as JSX routing components, has been standardized. The primary functional enhancement is the use of the auth token as a cookie.

- A new feature allows setting an authentication token as a cookie when an access token is present. This cookie serves as an alternative to using the auth token, particularly for serving assets. This change ensures that asset requests can verify user authentication through the cookie.

- Several `onSuccess` and event handler callbacks have been refactored to consistently wrap arrow function parameters in parentheses, improving readability and consistency across the codebase.

- Minor refactoring has been applied to code formatting in the mapping of roles and permissions, as well as in the JSX routing components. This standardizes the styling without changing the underlying functionality.


<!--- PR #1402: https://github.com/validmind/frontend/pull/1402 --->
<!--- Labels: none --->
### Enhance security with `DOMPurify` for `dangerouslySetInnerHTML` in React (#1402)

The DOMPurify library has been added to sanitize HTML content before using `dangerouslySetInnerHTML` in React components. This update prevents Cross-Site Scripting (XSS) attacks by ensuring all HTML is sanitized through a centralized utility function before rendering. Previously, unsanitized HTML was directly rendered, posing security risks.

DOMPurify version 3.2.5 is implemented. The `sanitizeHtml` utility function is configured to allow the "target" attribute on links while sanitizing all other potentially dangerous HTML content.

This update enhances security by integrating `DOMPurify` to sanitize HTML content before rendering with React's `dangerouslySetInnerHTML`. Key changes include:

- Adding `DOMPurify` to `package.json` and `package-lock.json`.
- Introducing a `sanitizeHtml` utility function in the `utils` module.
- Updating components like `CommandPalette`, `DocumentChecker`, and others to sanitize HTML, preventing XSS attacks.
- Minor code formatting improvements for consistency.

These changes ensure safer rendering of dynamic HTML content.


# Agents
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/agents/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/agents/compare/b86ed7335b2cdc8fda7641be202a3cedc32211ba...b86ed7335b2cdc8fda7641be202a3cedc32211ba --->

<!-- ### Changes with no label -->


<!--- PR #20: https://github.com/validmind/agents/pull/20 --->
<!--- Labels: none --->
<!--- ### Repo Sync repo-sync/9683 (2025-05-05) (#20) --->
<!-- No release notes or summary provided. -->


<!--- PR #22: https://github.com/validmind/agents/pull/22 --->
<!--- Labels: none --->
<!--- ### Merge Main into Prod (prod-19097) (#22) --->
<!-- No release notes or summary provided. -->


<!--- PR #26: https://github.com/validmind/agents/pull/26 --->
<!--- Labels: none --->
<!--- ### Merge Main into Prod (prod-11385) (#26) --->
<!-- No release notes or summary provided. -->


<!--- PR #3: https://github.com/validmind/agents/pull/3 --->
<!--- Labels: none --->
### Implement code explainer agents (#3)

To use the Code Explainer, follow this example:

```python
from IPython.display import Markdown, display
from agents import code_explainer

with open("binary_classifier_code.py") as f:
    code_content = f.read()

state = {
    "inputs": {
        "additional_instructions": "Preprocessing module for binary classification",
        "source_code": code_content,
    },
    "output": "",
}

state = code_explainer.invoke(state)
display(display(Markdown(state["output"])))
```

The demo notebook is available at `notebooks/code_explainer.ipynb`.


# Documentation
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/documentation/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/documentation/compare/01f652d63c5c2897688a76ad8ca89ea50973c492...01f652d63c5c2897688a76ad8ca89ea50973c492 --->



<!--- PR #693: https://github.com/validmind/documentation/pull/693 --->
<!--- Labels: documentation --->
### Add missing `Export ongoing monitoring document` section to docs (#693)

This update adds a feature to the documentation, allowing users to export ongoing monitoring documentation for models. The new section provides step-by-step instructions for using the user interface to perform this export. Users should:

- Click `Inventory` in the left sidebar.
- Select a model or use filters/search to find one.
- Click `Ongoing Monitoring` in the model's sidebar.
- Click `Export Document` in the right sidebar.
- Download the file by clicking `Download File`.

This enhancement aims to improve documentation usability by offering clear export instructions.


<!--- PR #707: https://github.com/validmind/documentation/pull/707 --->
<!--- Labels: documentation --->
### Update content block features and template paths (#707)

Guides for templates and reusable text blocks, applicable to model documentation, validation reports, and ongoing monitoring, have been moved to a new sub-section. Broken links have been fixed, and aliases applied to old URLs. A hotfix in the `installation` repository addresses detected broken links. A new page details the block library feature, offering a guide on managing text blocks. Updates include changes to content block types, the new chat interface, and test-driven block menu experiences. Documentation on templates has been reorganized and expanded.

Templates and reusable text blocks now have a dedicated sub-section, covering model documentation, validation reports, and ongoing monitoring. Broken links have been fixed, and aliases applied to old URLs. A hotfix was applied to the `installation` repository to address broken links detected by our online check.

A new page covers the block library feature, providing a comprehensive guide on managing text blocks.

The page on working with content blocks has been updated to reflect changes in the block library and the new user interface. This includes updated explanations of content block types and changes in the "Add content blocks" and "Remove content blocks" sections. The "Generate Text with AI" section now reflects the new chat interface.

The page on working with test results now includes updates to reflect the new test-driven block menu user experience. A section has been added on configuring the display of test results once inserted.

The page on working with metrics over time has been updated to reflect the new metric over time block menu user experience.

Documentation on templates within the ValidMind Platform has been reorganized and expanded. Guides on managing templates for model documentation, validation reports, and ongoing monitoring reports are now available under the **Guides** in the **templates** section, along with a new guide on managing your text block library.

This update refactors documentation template paths by relocating them from the `model-documentation` directory to a new `templates` directory, impacting configuration files, guides, and release notes. It also enhances the content block management system, enabling better organization and reuse of text blocks. New features include managing a library of reusable text blocks, configuring test result displays, and improving the user interface for adding and removing content blocks.


<!--- PR #713: https://github.com/validmind/documentation/pull/713 --->
<!--- Labels: documentation, highlight --->
### Updated Validator Fundamentals courses for clarity and comprehensiveness (#713)

The **Validator Fundamentals** course has been updated for clarity and comprehensiveness, aligning it with the Developer Fundamentals course. Key enhancements include revised login instructions, improved module learning outcomes, module summaries, and additional slides on previously omitted topics. The course has been tested to ensure accurate instructions and time estimates.

The course is organized into four modules, each with specific learning outcomes:

- **Module 1** — Using ValidMind for Model Validation
- **Module 2** — Running Data Quality Tests
- **Module 3** — Developing Challenger Models
- **Module 4** — Finalizing Validation Reports

This training series introduces the basics of using ValidMind for dataset and model validation. It includes running and logging tests with the ValidMind Library and finalizing your model's validation report in the ValidMind Platform. You will learn to automate testing, populate evidence in your validation report, track finding resolution, and more. Register to take the course now!


<!--- PR #681: https://github.com/validmind/documentation/pull/681 --->
<!--- Labels: documentation, highlight --->
### Updated developer fundamentals training (#681)

The Developer Fundamentals course has been updated for clarity and comprehensiveness, featuring revised login instructions, learning outcomes, and module summaries. Courses have been tested for accurate instructions and time estimates. A workaround for clipboard access was implemented due to CORS issues. The Learning Paths section now has consistent titles, refined descriptions, and status buttons. Navigation was simplified by removing an extra drop-down, and a browser compatibility message was standardized across relevant pages.

[**REGISTRATION PAGE PREVIEW**](https://docs-demo.vm.validmind.ai/pr_previews/beck/sc-8465/update-developer-fundamentals-course/training/developer-fundamentals/developer-fundamentals-register.html) — 🚨 SEE COURSE MODULE PREVIEW DISCLAIMER BELOW!!!! 🚨

- The Developer Fundamentals course has been updated to be more comprehensive and straightforward. This includes revised login instructions, learning outcomes for each module, and module summaries.

- Courses have been thoroughly tested and timed to ensure instructions and time estimates are accurate.

- A workaround for the `Copy snippet to clipboard` slide was implemented due to a CORS-type error with the normal background iframe. The current version allows clipboard access using `allow="clipboard-read; clipboard-write"` due to Quarto's restrictions.

> [!NOTE]
> The latest version uses a simple two-column layout instead of negative absolute positioning, consistent with other slides.

[**LEARNING PATHS PREVIEW**](https://docs-demo.vm.validmind.ai/pr_previews/beck/sc-8465/update-developer-fundamentals-course/training/program/learning-paths.html)

- Titles in the Learning Paths section have been edited for consistent casing and improved clarity.

- Descriptions were refined for clarity and conciseness.

- Added "register now" or "coming soon" buttons, depending on the course status.

- Cleaned up the Validator Fundamentals section in preparation for future validation experience notebooks.

- Removed the extra "Training" drop-down from the training section to simplify navigation. Consideration for reintroducing a sidebar or breadcrumb navigation for training pages is suggested.

- Added `Releases` to the condensed drop-down as it is now an independent section.

- The browser compatibility message for registration pages was effectively styled and repeated in the "Legal Ease" section on the policy page for consistency.

This update enhances notebook execution and documentation in GitHub Actions and site content. Key improvements include updated action names and descriptions in `action.yml` files, registration of the `validmind` kernel, and expanded automated testing. New training modules and markdown files offer a comprehensive learning path for ValidMind users. The notebook directory is reorganized for clarity, and content now includes advanced testing capabilities and visual guides.

- **GitHub Actions Enhancements**:

  - Updated action names and descriptions in `action.yml` files for demo, prod, and staging notebooks to reflect the execution of multiple notebooks.
  
  - Added a step to register the `validmind` kernel in the GitHub Actions workflow, ensuring the correct environment is used for notebook execution.
  
  - Modified the execution command to target a series of notebooks, improving the scope of automated testing.

- **Documentation and Training Content**:

  - Introduced new training modules and updated existing ones to provide a comprehensive learning path for developers, validators, and administrators using ValidMind.
  
  - Added detailed markdown files for each training module, outlining learning objectives, course content, and step-by-step instructions for using ValidMind.
  
  - Enhanced the site content with new sections and updated existing ones to improve navigation and user experience.

- **Notebook Content and Structure**:

  - Reorganized the notebook directory structure to separate executed notebooks from tutorials, improving clarity and maintainability.
  
  - Updated notebook content to include new sections on implementing custom tests and using external test providers, providing users with more advanced capabilities.
  
  - Added new images and GIFs to the documentation to visually guide users through the process of adding content blocks and test results.

These changes aim to streamline the notebook execution process, enhance the training and documentation experience, and provide users with more robust tools for model development and validation.

<!-- ### Changes with no label -->


<!--- PR #724: https://github.com/validmind/documentation/pull/724 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#724) --->
<!-- No release notes or summary provided. -->


<!--- PR #723: https://github.com/validmind/documentation/pull/723 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#723) --->
<!-- No release notes or summary provided. -->


<!--- PR #706: https://github.com/validmind/documentation/pull/706 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#706) --->
<!-- No release notes or summary provided. -->


<!--- PR #728: https://github.com/validmind/documentation/pull/728 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#728) --->
<!-- No release notes or summary provided. -->


<!--- PR #715: https://github.com/validmind/documentation/pull/715 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#715) --->
<!-- No release notes or summary provided. -->


<!--- PR #712: https://github.com/validmind/documentation/pull/712 --->
<!--- Labels: none --->
<!--- ### Fix merge conflicts for prod deploy #711 (#712) --->
<!-- No release notes or summary provided. -->


<!--- PR #700: https://github.com/validmind/documentation/pull/700 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#700) --->
<!-- No release notes or summary provided. -->


<!--- PR #709: https://github.com/validmind/documentation/pull/709 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#709) --->
<!-- No release notes or summary provided. -->


<!--- PR #718: https://github.com/validmind/documentation/pull/718 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#718) --->
<!-- No release notes or summary provided. -->


<!--- PR #701: https://github.com/validmind/documentation/pull/701 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#701) --->
<!-- No release notes or summary provided. -->


<!--- PR #725: https://github.com/validmind/documentation/pull/725 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#725) --->
<!-- No release notes or summary provided. -->


<!--- PR #705: https://github.com/validmind/documentation/pull/705 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#705) --->
<!-- No release notes or summary provided. -->


<!--- PR #703: https://github.com/validmind/documentation/pull/703 --->
<!--- Labels: none --->
<!--- ### fix: remove helm repo path from s3 sync commands (#703) --->
<!-- No release notes or summary provided. -->


<!--- # Validmind-library --->
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/validmind-library/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/validmind-library/compare/cmvm/25.05.04...cmvm/25.05.04 --->
<!-- No public PRs found for this release -->
