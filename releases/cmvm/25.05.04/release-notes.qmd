---
title: "25.05.04 Hotfix release notes"
date: "May 16, 2025"
categories: [cmvm, 25.05.04, hotfix]
sidebar: validmind-installation
toc-expand: true
# Content edited by AI - 2025-06-04 07:30
# Content validated by AI - 2025-06-04 07:30
# Content overwritten from an earlier version - 2025-06-04 07:30
---

## Backend
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/backend/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/backend/compare/7fde7cbb33d7335d7948a4e940fc4e83d6327660...7fde7cbb33d7335d7948a4e940fc4e83d6327660 --->

### Enhancements


<!--- PR #1400: https://github.com/validmind/backend/pull/1400 --->
<!--- Labels: enhancement --->
### Ability to soft delete workflows (#1400)

This pull request introduces a soft delete feature for workflows and a dependency check endpoint. Key changes include adding `deleted_at` and `deleted_by_id` columns to the `workflows` table, updating the Workflow model to support soft deletion, and modifying queries to exclude soft-deleted workflows. A new DELETE endpoint allows soft deletion, and a dependency check endpoint counts inventory models dependent on a workflow. Test cases ensure functionality, verifying exclusion of soft-deleted workflows and accurate dependency counts.

The main changes include:

- A migration adds `deleted_at` and `deleted_by_id` columns to the `workflows` table.

- Workflow model updates:
  
  - New columns support soft deletion.
  
  - The `serialize` method now includes `deleted_at`.
  
  - Queries exclude soft-deleted workflows by filtering for `deleted_at` as NULL.
  
  - A class method `get_workflow_dependencies` calculates dependent inventory model counts.
  
  - An instance method `mark_as_deleted` sets the `deleted_at` timestamp and records the user who deleted the workflow.

- UI route updates:
  
  - A DELETE endpoint for soft deletion uses `mark_as_deleted` and returns appropriate HTTP status codes.
  
  - An endpoint checks workflow dependencies by returning the count of dependent inventory models.

- Test cases ensure functionality:
  
  - Tests verify exclusion of soft-deleted workflows from active queries.
  
  - Tests confirm correct dependency counts before and after workflow execution.


<!--- PR #1431: https://github.com/validmind/backend/pull/1431 --->
<!--- Labels: enhancement --->
### Enable or disable LLM support with `OfflineFlags` for Barclays (#1431)

This update introduces offline feature flag support and enhances the feature flags codebase. Key improvements include offline configuration via environment variables, eliminating the need for LaunchDarkly in certain environments. Comprehensive docstrings and type hints have been added for better documentation and maintainability. Feature flag access is now centralized, reducing code duplication, and unused flags have been removed. These changes support environments without LaunchDarkly, like VM deployments, and improve code maintainability.

- Offline feature flag functionality can now be configured through environment variables, eliminating the need for LaunchDarkly in certain environments.

- Comprehensive docstrings have been added to all feature flag functions for better documentation.

- Feature flag access has been refactored to use a new centralized, context-aware function, reducing code duplication.

- Unused feature flags (`FLAG_REDIS_ENABLED`, `FLAG_CASBIN_RELOAD_ENABLED`, `FLAG_AUTH_CONFIG`) have been removed.

- Type hints have been added to improve code maintainability and type safety.

This update enhances the feature flag system by adding offline flag support and improving context handling for LaunchDarkly evaluations. Key changes include:

- The `.env.example` file now includes a `FEATURE_FLAGS` JSON string for offline environments, allowing for offline evaluation of feature flags using a predefined JSON of flags.

- The `feature_flags.py` file introduces new functions. The `get_offline_feature_flag` function retrieves flag values from the offline configuration, providing a default if the flag is absent. The `get_feature_flag_with_context` function first checks the offline configuration before attempting a LaunchDarkly evaluation, improving reliability in offline mode.

- Two context functions have been enhanced. The `context_from_user` function now includes an improved docstring, and a new function, `context_from_user_and_organization`, creates a multi-context using both user and organization information. This enables more detailed feature flag evaluations based on multiple context sources.

- The backend tracking route now uses the `get_feature_flag_with_context` function instead of directly accessing the `ldclient`. This change decouples feature flag evaluation from the LaunchDarkly client, allowing for more flexible offline support.

- Comprehensive unit tests have been added in `tests/unit/test_feature_flags.py`. These tests cover various scenarios, including context creation, offline and online flag evaluation, and situations where user or organization data may be missing.


<!--- PR #1433: https://github.com/validmind/backend/pull/1433 --->
<!--- Labels: enhancement, do not merge, breaking-change --->
### Run schema migrations in separate container (#1433)

This update modifies the `docker-entrypoint` script and `docker-compose` configuration. Schema migrations, along with scripts for creating analytics views and managing RBAC, will now execute first in a separate container. Other ValidMind backend containers will wait for this container to finish before starting.

Schema migrations should now run once per deployment using a Kubernetes `job` resource. Failing to implement this `job` resource by not updating to the latest Helm chart or excluding it in a custom deployment will cause system degradation, as the database schema will not align with ValidMind backend requirements. An associated Helm chart change will accompany this update.

This update enhances deployment pipelines, documentation, Docker configurations, and startup scripts for improved functionality and clarity.

- **GitHub Actions Workflow (`deploy.yaml`)**: Simplified ECR login by using the official `aws-actions/amazon-ecr-login@v2` action, removing custom steps and reducing potential failures. Updated Docker build tags and cache parameters to use output variables from the new login action.

- **Documentation Updates (`README.md`)**: Improved local development instructions with `make` targets for database migrations, RBAC installation, and analytics views creation. Clarified ValidMind schema recreation by recommending the migrations task over starting the API.

- **Docker Compose Enhancements (`docker-compose.yaml`)**: Added a new service configuration for migrations, building from the backend Dockerfile to run schema migrations in a controlled environment. Added dependency conditions to ensure migrations complete before dependent services proceed.

- **Startup Script Adjustments (`docker-entrypoint.sh`)**: Updated Keycloak port reference to use `KEYCLOAK_SERVICE_PORT`. Modified Redis startup check to skip waiting in migration mode, allowing migrations to run without delays. Streamlined startup flow to differentiate between migration, worker, and API modes.

- **Code Cleanup (`src/backend/api.py`)**: Removed redundant Flask-Migrate initialization, as migrations are now handled through a dedicated service or task.

These changes aim to simplify deployment, improve developer guidance, and better manage application startup and migration procedures across environments.


<!--- PR #1429: https://github.com/validmind/backend/pull/1429 --->
<!--- Labels: enhancement, python --->
### Add ability to export comments in validation reports (#1429)

We have added the ability to export comments from validation reports. Previously, only flags could be exported. Now, with the updated frontend, there is an "Include comments left on document" checkbox option when exporting the validation report. By default, exporting comments is turned off. This update was made in response to customer requests for saving contributor comments. There are no breaking changes with this update.

This update enhances reporting by integrating user comments into generated reports. Key changes include:

- A new static method, `get_user_comments_by_model_id`, is added in `annotation.py` to query and join annotation data with related comments and their creators.

- The report serialization process in `model_inventory.py` and `reports.py` now supports an `include_comments` flag to embed user comments into reports, affecting document generation and content structure.

- UI reporting routes in `ui_reporting.py` now parse an additional parameter for comments inclusion. The helper method `parse_generate_report_params` consolidates all report parameters, including the new `include_comments` flag.

- A new function, `get_comment_text_for_doc`, is introduced in the report render helpers. It processes comments, strips HTML formatting, and organizes them into a styled text block for document fragments.

- A new dataclass, `ExportAnnotation`, in `util_models.py` facilitates the clean export of comment details, including user name, text content, created date, and context.

- Unit tests in `test_reports.py` verify functionality: testing serialization with comments, ensuring comments appear correctly in document fragments, and validating that HTML is cleaned before embedding in the final report.

These changes ensure user comments are properly queried, formatted, and integrated within generated reports for a more comprehensive output.

### Bug fixes


<!--- PR #1441: https://github.com/validmind/backend/pull/1441 --->
<!--- Labels: bug --->
### Add logging to `workflows` Celery task (#1441)

This update introduces logging functionality and increases the maximum number of worker threads.

This update includes two key changes:

- The worker concurrency in the Celery configuration (`celery_config.py`) has been increased from 4 to 6. This enhancement aims to improve performance by allowing more tasks to be processed simultaneously, especially under heavy workloads.

- A new logging statement has been added to `workflows.py`. It logs the process of finding available workflows based on a field change, including the field key and the associated organization. This addition aids in debugging and tracking workflow queries.


<!--- PR #1396: https://github.com/validmind/backend/pull/1396 --->
<!--- Labels: bug, python --->
### Improve Auth0 error handling and debugging flow (#1396)

This update improves the onboarding process for new organizations by displaying helpful error messages from Auth0 when a weak password is chosen, preventing unexplained 500 errors. Developers will benefit from enhanced API functionality, allowing them to attach Cursor to the local API container, set debug breakpoints, and reload API code during editing without restarting the container.

This PR introduces several functional improvements, focusing on debugging, authentication error handling, code enhancements, and extended unit tests.

- **Debugging Enhancements:**
  
  - A new remote debugging configuration has been added to the VS Code launch file (`.vscode/launch.json`). This allows attaching a debugger via `debugpy` to the API service running in Docker. The README has been updated with usage instructions.
  
  - The Docker Compose configuration now exposes port 5678 and mounts relevant volumes from the backend, enhancing the debugging experience in a containerized environment.
  
  - The `docker-entrypoint.sh` script now launches the Python application with `debugpy` using the `-m debugpy --listen 0.0.0.0:5678` flag for remote debugging.

- **Auth Error Handling Improvements:**
  
  - Error handling in `src/backend/auth/auth_provider.py` has been improved to check for password strength errors. When a `PasswordStrengthError` is detected, an error is raised with a new `INVALID_FIELD` code and detailed information. Other errors default to a generic unauthorized error.
  
  - The route handling in `src/backend/routes/admin/organizations.py` has been updated to catch and re-raise `AuthError`, ensuring proper error handling.

- **Code and Utility Enhancements:**
  
  - The JSON encoder in `src/backend/utils/__init__.py` now properly handles objects with a `to_dict` method, improving custom object serialization.
  
  - Logging in `src/backend/errors/handlers.py` has been updated from exception level to error level to reduce excessive stack traces for expected issues.

- **Extended Unit Tests:**
  
  - A comprehensive set of unit tests for `Auth0AuthProvider` has been added in `tests/unit/test_auth0_provider.py`. These tests cover scenarios such as handling weak passwords, successful user creation, and other error cases, using mocks to simulate API interactions and validate error signaling and token management.


<!--- PR #1472: https://github.com/validmind/backend/pull/1472 --->
<!--- Labels: bug --->
### Ensure `SQLAlchemy` pool variables are integers (#1472)

Kubernetes pod specifications require environment variables to be set as strings, even if they represent integers. This update ensures that when these variables are set, they are correctly cast to integers for compatibility with SQLAlchemy. Previously, the system used default values instead of interpreting these variables as integers.

This pull request improves the Flask application's configuration by ensuring that the SQLAlchemy environment variables, `SQLALCHEMY_POOL_SIZE` and `SQLALCHEMY_MAX_OVERFLOW`, are explicitly converted to integers. Previously, these values were read as strings, which could cause type mismatches. This update enforces correct data types, reducing potential runtime errors related to database connection pooling configurations.


<!--- PR #1462: https://github.com/validmind/backend/pull/1462 --->
<!--- Labels: bug, python, security --->
### Prevent unauthorized workflow status changes (#1462)

This update improves the validation for the `PUT /api/v1/statuses-workflows/{id}/status` endpoint. It ensures that only members of an organization can change its workflow status, preventing unauthorized users from making modifications. This addresses a potential security issue.

This update introduces a new static method, `get_status_for_org`, to streamline the retrieval of status by joining the `StatusesWorkflowStatus` and `StatusesWorkflow` tables using organization and workflow identifiers. This method replaces redundant queries in the edit endpoint, improving data access efficiency. Minor refactoring has enhanced code formatting and readability in block documentation and validation report functions. Unit tests verify the method's handling of both valid and invalid cases.


<!--- PR #1471: https://github.com/validmind/backend/pull/1471 --->
<!--- Labels: bug, security --->
### Check workflow permissions for states (#1471)

No content to evaluate.

This update improves security and error handling for UI workflow states endpoints by enforcing organization-specific data access. Workflows are now retrieved through the user's organization using `g.current_user_org.workflows`, affecting GET, POST, PATCH, and DELETE requests. This prevents data leakage between organizations. Additionally, `ResourceNotFoundError` exceptions are explicitly rethrown for precise error signaling, while other exceptions return as `InternalServerError`. These changes enhance security and error clarity.


<!--- PR #1470: https://github.com/validmind/backend/pull/1470 --->
<!--- Labels: bug, security --->
### Check model permissions on `/api/v1/workflows/targets/{cuid}/executions` (#1470)

The API route `/api/v1/workflows/targets/{cuid}/executions` has been updated. Previously, it used `Workflow.get_workflow` to filter workflows by the user's organization and `Execution.get_by_target` to retrieve executions by target from all organizations. Now, `Execution.get_by_target` includes a user parameter, ensuring that executions by target are selected only from the user's organization.

This update refactors workflow retrieval methods to use the associated organization instead of the user object. Key changes include:

- In `src/backend/db/workflow.py`, the `get_workflow` method now requires an organization and a `cuid`, raising a `ValueError` if the organization is not provided.
  
- The `get_by_target` method now includes an organization parameter, ensuring workflow executions are correctly scoped by organization.

- REST API endpoints in `src/backend/routes/ui_workflows.py` now pass `g.current_user_org` to `Workflow.get_workflow`, aligning with the new model requirements.

- Unit tests in `tests/unit/test_workflows.py` have been updated to use the organization parameter for consistency in workflow retrieval.

These changes centralize access at the organization level, improving consistency and preventing potential mismatches from using user information directly.


<!--- PR #1458: https://github.com/validmind/backend/pull/1458 --->
<!--- Labels: bug, security --->
### Fix privilege escalation issue (#1458)

We have fixed an issue that allowed normal users to escalate their permissions to admin level. This update eliminates the privilege escalation vulnerability.

This update improves user role management by refining the authorization process and clarifying variable names. In the POST endpoint, authorization now specifies `resource="Role"` and `action="create"` for precise control, replacing the generic `refresh="api-async"` parameter. Similarly, the DELETE endpoint uses `resource="Role"` and `action="delete"` to align with permission requirements. The variable `user` is now `to_update_user`, ensuring consistency in organization membership checks and role assignments. Event publishing now correctly references this updated variable.

<!-- ### Changes with no label -->


<!--- PR #1495: https://github.com/validmind/backend/pull/1495 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1495) --->
<!-- No release notes or summary provided. -->


<!--- PR #1417: https://github.com/validmind/backend/pull/1417 --->
<!--- Labels: none --->
### Update deployment workflows to new values format (#1417)

This update modifies deployment workflow configurations in three YAML files: `deploy_aws_secondary.yaml`, `deploy_prod.yaml`, and `deploy_staging.yaml`. The workflows now use the new template file `values-new.yaml` from the `templates/validmind` directory instead of the old `values.yaml`. This ensures deployments utilize updated configuration settings. The `sed` commands still replace templated placeholder strings with environment-specific values like site, environment, vault ID, repository, and API SHA, maintaining consistency across deployments.


<!--- PR #1394: https://github.com/validmind/backend/pull/1394 --->
<!--- Labels: none --->
### Replace `Black` with `Ruff` for code formatting and linting (#1394)

This pull request focuses on refactoring import statements and adjusting code formatting across the project. Key changes include reorganizing imports in source code, migration scripts, and utility modules to better reflect dependencies. The code formatting tool in the `Makefile` has been switched from Black to Ruff, enhancing style consistency and readability. Minor whitespace and line-break adjustments have been made in various files, including API handlers and service modules. These updates improve maintainability without altering functionality.

Key functional changes:

- Standardized and reorganized import ordering in multiple files, such as migration scripts, API modules, and utility scripts.
- Updated the `Makefile` to run Ruff for both formatting and linting, improving style enforcement.
- Cleaned up redundant whitespace and adjusted formatting for inline strings and dictionary keys without altering program logic.

Overall, these improvements streamline the codebase, making future maintenance easier and reducing the risk of dependency issues without affecting business logic.


<!--- PR #1408: https://github.com/validmind/backend/pull/1408 --->
<!--- Labels: none --->
### Add `global_id` to template serialization (#1408)

This update improves the template serialization process by adding a `global_id` key to the payload generated by the `serialize_template` function. The `global_id` is derived from the `base_template` property of the template object and is included alongside other metadata like `template_cuid`, `template`, and `created_at`. This change enhances traceability and consistency across the system by ensuring each serialized template has a unique global identifier.


<!--- PR #1424: https://github.com/validmind/backend/pull/1424 --->
<!--- Labels: none --->
### Ensure `ruff` scans all files to prevent skipped warnings (#1424)

This pull request enhances code formatting consistency and cleans up lint exception comments. Key changes include:

- Updating the `Makefile` to run `ruff` with the `--no-cache` option, ensuring the latest code analysis is used without cached results.
- Simplifying migration scripts by replacing `# noqa: B950` with `# noqa`, maintaining lint suppression.
- Reordering import statements in some modules for consistency and resolving minor dependency issues.
- Adjusting a test in the object storage service to use the simplified `# noqa` format for the KMS key configuration string.

These changes improve code clarity without altering functionality.


<!--- PR #1436: https://github.com/validmind/backend/pull/1436 --->
<!--- Labels: none --->
<!--- ### Repo Sync repo-sync/9683 (2025-05-05) (#1436) --->
<!-- No release notes or summary provided. -->


<!--- PR #1425: https://github.com/validmind/backend/pull/1425 --->
<!--- Labels: none --->
<!--- ### fix: typo in name of action in release_cmvm.yaml (#1425) --->
<!-- No release notes or summary provided. -->


<!--- PR #1486: https://github.com/validmind/backend/pull/1486 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1486) --->
<!-- No release notes or summary provided. -->


<!--- PR #1481: https://github.com/validmind/backend/pull/1481 --->
<!--- Labels: none --->
<!--- ### chore: ensure deploy workflows use correct values (#1481) --->
<!-- No release notes or summary provided. -->


<!--- PR #1466: https://github.com/validmind/backend/pull/1466 --->
<!--- Labels: none --->
### Remove legacy logic for implicit text blocks (#1466)

This update refines how the API endpoint processes the `contents` field in UI inventory models. Previously, if a section lacked a `contents` key, the code defaulted to a list containing a dictionary with a `content_id` (set to the section ID) and a `content_type` of `text`. The new logic uses the dictionary `get()` method to retrieve `contents`, defaulting to an empty list if absent. This change is consistently applied across endpoints handling section data.

This simplification reduces unnecessary code and clarifies expected behavior when `contents` is missing. API users should ensure that returning an empty list, instead of a default content block, does not cause unintended effects.


<!--- PR #1329: https://github.com/validmind/backend/pull/1329 --->
<!--- Labels: dependencies, python --->
### Update `werkzeug` from 2.3.8 to 3.0.6 (#1329)

This update changes the `werkzeug` dependency version from `^2.3.0` to `^3.0.6` in the `pyproject.toml` file. The newer version may include bug fixes, performance improvements, and new features. It is crucial to verify that this update does not affect any application components relying on `werkzeug`, especially in routing, request handling, or middleware integration.


<!--- PR #1411: https://github.com/validmind/backend/pull/1411 --->
<!--- Labels: none --->
<!--- ### Clarify keycloak deployment docs (#1411) --->
<!-- No release notes or summary provided. -->


<!--- PR #1336: https://github.com/validmind/backend/pull/1336 --->
<!--- Labels: none --->
### Add Keycloak entrypoint to `Dockerfile` (#1336)

This update to the Keycloak service configuration streamlines deployment by embedding configuration files directly into the Docker image, eliminating the need for host-based volume mounts. Additionally, the environment variable `KC_DB_DATABASE` has been changed to `KC_DB_DtATABASE`. Users should verify this change to ensure it aligns with expected configurations in downstream components.

This pull request introduces two main changes to the Keycloak service configuration:

- The volume mounts for Keycloak configuration files (`realm-export.json`, themes, and `entrypoint.sh`) in the `docker-compose` file have been removed. These files are now incorporated into the Docker image through updates in the `Dockerfile`. This change is intended to streamline deployment by including the necessary assets during the image build process.

- An environment variable has been modified from `KC_DB_DATABASE` to `KC_DB_DtATABASE`. It is important to verify whether this change is intentional or a typo, and ensure that the new variable name is correct and consistent with the expected configuration in downstream components.

Overall, this update improves the deployment process by embedding configuration files within the image, reducing the dependency on host-based volume mounts. However, attention should be paid to the environment variable change to prevent potential issues.


<!--- PR #1491: https://github.com/validmind/backend/pull/1491 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1491) --->
<!-- No release notes or summary provided. -->


<!--- PR #1496: https://github.com/validmind/backend/pull/1496 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.30.8) (#1496) --->
<!-- No release notes or summary provided. -->


<!--- PR #1420: https://github.com/validmind/backend/pull/1420 --->
<!--- Labels: none --->
### Remove `poetry.lock` from Dockerfile build process (#1420)

This update modifies the Dockerfile for the customer-managed environment by removing the `poetry.lock` file from the application directory during the container build process. This change prevents issues with dependency resolution or outdated lock files in the container, ensuring clean dependency management. By explicitly removing the file, the integrity of the container build is maintained, allowing the project to generate an updated lock file in later steps or during runtime.


<!--- PR #1418: https://github.com/validmind/backend/pull/1418 --->
<!--- Labels: none --->
### Allow Keycloak theme to enable local user registration (#1418)

This update disables self-registration in Keycloak by setting the `registrationAllowed` flag to `false`, preventing users from creating accounts via the registration link. The FreeMarker templates for login and registration have been updated. The login template now shows the registration link only if `registrationAllowed` is `true`. The registration template includes a hidden debug block for form fields and explicitly defines required fields for validation, rendering additional fields only if they are not required.

This pull request introduces two main changes:

- In the Keycloak realm configuration, the self-registration capability is disabled by setting the `registrationAllowed` flag to `false`. This change ensures that end users can no longer create accounts via the registration link.

- The login and registration FreeMarker templates have been updated. In the login template, the registration link is now conditionally displayed only when the realm's `registrationAllowed` flag is `true`. In the registration template, additional enhancements have been made:
  
  - A debug block has been added to display available form fields, which is hidden by default using the CSS style `display: none;`.
  
  - The registration form explicitly defines required fields: username, email, first name, last name, password, and password confirmation, to ensure proper validation.
  
  - Additional fields from the provided form data are iterated and rendered only if they are not among the explicitly defined required fields.

These changes improve control over user self-registration and enhance the registration form's structure and debugging capabilities.


<!--- PR #1426: https://github.com/validmind/backend/pull/1426 --->
<!--- Labels: none --->
### Update deployment workflows for AWS environments to use `values-new.yaml` (#1426)

This pull request updates the deployment workflow configurations for AWS secondary, production, and staging environments. The workflows now copy the new template file (`values-new.yaml`) into the manifests directory instead of the old template file (`values.yaml`). The `sed` commands for template substitutions remain unchanged. This update ensures deployments use the latest configuration template for newer deployment requirements.


<!--- PR #1358: https://github.com/validmind/backend/pull/1358 --->
<!--- Labels: none --->
### Add startup checks for datastores and Keycloak (#1358)

This PR enhances Docker configuration and startup logic to improve service orchestration and dependency management. Key changes include:

- Updates to the `Dockerfile` to install utilities like `jq`, `postgresql-client-15`, and `redis-tools` for better operations and debugging.
  
- Modifications in `docker-compose.yaml` to add port mapping (9000) for Keycloak and set the environment variable `KC_HEALTH_ENABLED` for health checks.
  
- Improvements in `docker-entrypoint.sh` to implement readiness checks for Postgres, Redis, and Keycloak, ensuring services are available before the application starts, with clear logging messages.
  
- An update to the Keycloak `Dockerfile` to expose the new port (9000).

These changes enhance the resilience of container-based deployments by ensuring critical services are healthy before starting application processes.


<!--- PR #1454: https://github.com/validmind/backend/pull/1454 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1454) --->
<!-- No release notes or summary provided. -->


<!--- PR #1427: https://github.com/validmind/backend/pull/1427 --->
<!--- Labels: none --->
<!--- ### feat: allow frontend deploys from branches in dev (#1427) --->
<!-- No release notes or summary provided. -->


<!--- PR #1475: https://github.com/validmind/backend/pull/1475 --->
<!--- Labels: none --->
### Fix cross-tenant template overwrite by adding `X-Organization-Id` check (#1475)

This update modifies the system's behavior without introducing any breaking changes. There are no visual changes to the frontend, so no screenshots or videos are included.

This update introduces two key changes:

- In `src/backend/api.py`, the `SQLALCHEMY_MAX_OVERFLOW` setting has been reformatted for improved readability. The functionality remains unchanged, but the code style now matches other multiline assignments.

- The template retrieval logic in `src/backend/routes/ui_templates.py` has been improved. Queries now filter by the user's organization (`g.current_user_org.id`), ensuring users access only their organization's templates, enhancing data integrity and security.

Additionally, minor import reordering and cleanup in `src/backend/routes/ui_assets_proxy.py` improve code organization and clarity.


<!--- PR #1455: https://github.com/validmind/backend/pull/1455 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.30.8) (#1455) --->
<!-- No release notes or summary provided. -->


<!--- PR #1440: https://github.com/validmind/backend/pull/1440 --->
<!--- Labels: none --->
### Fix validation of trigger type during update (#1440)

This update resolves an issue where a `PUT` request for a workflow returned an error. The error was caused by a validation problem with the trigger type, where the workflow incorrectly identified an existing workflow with the same trigger type.

This update improves workflow validation by adding the `update_cuid` parameter to the `validate_trigger_type` method. This ensures the current workflow is excluded from duplicate checks, preventing false positives during updates. In `src/backend/routes/ui_workflows.py`, exception handling is refined by re-raising `BadRequestError` for clearer error distinction from general exceptions, which are wrapped in `InternalServerError`. These changes enhance the accuracy of duplication checks and error handling during updates.


<!--- PR #1485: https://github.com/validmind/backend/pull/1485 --->
<!--- Labels: none --->
### Revert fix for unauthorized access to inventory model assets (#1485)

There is no specific content provided for this PR (#1485). Please include more details or information about the changes made in this PR so that I can assist you effectively.

This update simplifies the authentication process by removing fallback logic for token extraction from cookies. The functions `get_token_auth_cookie` and `get_token_auth_header_or_cookie` have been removed. Authentication now strictly uses the token provided in the header via `get_token_auth_header`.

In the UI assets proxy endpoint, the `requires_auth` decorator and organization access check logic have been eliminated. The endpoint now directly retrieves a pre-signed URL from object storage without validating the user's organization, potentially affecting previous authorization checks for asset access.


<!--- PR #1445: https://github.com/validmind/backend/pull/1445 --->
<!--- Labels: none --->
### Ensure all model roles are considered when evaluating membership (#1445)

This update enhances the model membership and content type authorization logic in `src/backend/auth/auth.py` to consider all roles a user holds for a given model. Previously, only the first matching role was considered, which could lead to insufficient access. Now, `get_all_model_roles_for_user` returns all roles for a user, and `get_content_type_for_roles` aggregates content types based on all roles. This ensures users with multiple roles receive all appropriate permissions, improving authorization accuracy and flexibility.

The previous logic only considered the first matching role for a user on a model, affecting membership and allowed content types. Functions like `get_model_role_for_user` and `get_content_type_for_role` operated on a single role.

The updated logic introduces `get_all_model_roles_for_user`, which returns all roles a user has for a model. It aggregates all content types a user is authorized for, based on all their roles. The function `get_content_type_for_role` is refactored to `get_content_type_for_roles` to handle multiple roles. Membership and authorization checks now use this multi-role logic, ensuring users with multiple roles are granted all appropriate permissions.

If any downstream code or policies assumed only a single role per user per model, those assumptions may need to be revisited. The function `get_content_type_for_role` is replaced by `get_content_type_for_roles` and now expects a list of roles.

Consider reviewing and updating any documentation or downstream services that reference the old single-role logic. This change lays the groundwork for more granular or complex role-based access control in the future.

This update enhances the authorization flow and role-based permissions in the backend, introducing multi-role support and refined content type resolution. Users can now have multiple roles, with the function `get_all_model_roles_for_user` returning all roles for a specific inventory model. The function `get_content_type_for_roles` filters permissions using `RolePermission.PERMISSION_TO_CONTENT_TYPE`, addressing conflicting states like simultaneous developer and validator roles. The authorization chain and data model are refined for improved security and flexibility.

- **Multi-Role Support**: The single-role lookup is replaced with a multi-role approach. The function `get_model_role_for_user` is now `get_all_model_roles_for_user`, returning all roles associated with a user for a specific inventory model.

- **Content Type Resolution**: The function `get_content_type_for_roles` iterates over all roles assigned to a user, filtering by permissions using `RolePermission.PERMISSION_TO_CONTENT_TYPE`. It checks for conflicts, raising an `AuthError` if both `update_doc` and `update_vr` permissions are found.

- **Authorization Chain Refinement**: Adjustments in the decorator and `ensure_model_membership` accommodate the new multi-role structure, validating authorized content types against the list of user roles.

- **Data Model Enhancements**: A new method, `has_permission`, is added to the `OrganizationRole` class for permission checking. The `RolePermission` model includes a mapping, `PERMISSION_TO_CONTENT_TYPE`, linking permission action IDs to content types.


<!--- PR #1487: https://github.com/validmind/backend/pull/1487 --->
<!--- Labels: none --->
<!--- ### Cullen/merge staging into prod (#1487) --->
<!-- No release notes or summary provided. -->


<!--- PR #1403: https://github.com/validmind/backend/pull/1403 --->
<!--- Labels: none --->
### Improve template handling with initial `flattening` (#1403)

This update improves template handling in the application with several key enhancements:

- The installation script now includes a `template_type` parameter in the `upsert` function call, enhancing template differentiation.

- Backend database models for templates and template versions now use `@validates` decorators for data validation. These functions ensure correct processing of template data, using the `flatten_sections` utility to convert nested structures into a flat, JSON-safe format.

- Two new utility functions, `extract_clean_section` and `flatten_sections`, have been added. These functions clean and flatten nested sections by removing unwanted keys like 'order', 'index', and 'sections', simplifying template metadata storage and processing.

- Unit tests have been expanded to cover the new flattening functionality. They confirm correct flattening of nested sections, handle missing sections keys, and manage deeply nested structures. The tests also ensure that existing functionalities, such as template serialization, accommodate the updated structure, using 'sections' instead of 'pages' where applicable.


<!--- PR #1493: https://github.com/validmind/backend/pull/1493 --->
<!--- Labels: none --->
### Remove `-m` flag from entrypoint script for API service (#1493)

<!-- List any breaking changes -->

<!-- Add screenshots or videos showing before/after -->

This update modifies the startup command for the API service in the Docker entrypoint script. The previous command used the Python module flag `-m` with a file path, which could cause issues. The new command removes the `-m` flag and directly executes the script file using `ddtrace-run`. This ensures the API service starts correctly and uses `ddtrace` for instrumentation as intended.


<!--- PR #1439: https://github.com/validmind/backend/pull/1439 --->
<!--- Labels: none --->
### Support exporting comments for documentation and monitoring reports; fix database query (#1439)

This update introduces two key changes: 

- You can now export comments in documentation and monitoring reports.
- A database query issue that affected comment retrieval for export has been fixed.

These enhancements respond to customer requests for improved comment visibility.

This update improves the management and display of user comments linked to inventory models in various reports. Key enhancements include:

- The `get_user_comments_by_model_id` method in the Annotation model now accepts a `content_type` parameter, enabling filtering and joining with the Metadata table to retrieve the correct comments based on report type.

- A new helper function, `render_comment_fragments`, centralizes the logic for rendering comment fragments. It queries comments with appropriate filters, formats comment text by removing HTML tags, and handles nullable fields like `context` and `created_at`. The context is included in the output only when present.

- The report serialization functions, `serialize_documentation_report` and `serialize_monitoring_report`, now support an `include_comments` option. When enabled, reports append a 'Comments' section to both the template structure and the list of rendered fragments.

- Unit tests have been updated to validate the new functionality. They cover scenarios such as:
  - Comment rendering with and without the `include_comments` flag.
  - Filtering out irrelevant comments, such as those with a content type not matching the report type or unresolved annotations.
  - Verifying that the helper function `_create_annotation_helper` supports creating annotations with the enhanced structure.

These changes enhance the robustness and flexibility of the backend comment handling mechanism, allowing for better report customization and filtering.


<!--- PR #1428: https://github.com/validmind/backend/pull/1428 --->
<!--- Labels: none --->
### Limit concurrency of testing workflow in GitHub Actions (#1428)

This pull request adds a new configuration block to the GitHub Actions workflow for the Python application. The inclusion of concurrency settings ensures that only the most recent workflow run remains active by grouping runs based on the workflow and branch reference. This change cancels any in-progress runs when a new run is triggered, conserving CI resources and minimizing conflicts from concurrent executions.


<!--- PR #1484: https://github.com/validmind/backend/pull/1484 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1484) --->
<!-- No release notes or summary provided. -->


<!--- PR #1405: https://github.com/validmind/backend/pull/1405 --->
<!--- Labels: none --->
### Trigger workflow on model attribute changes (#1405)

This update enhances the workflow trigger mechanism and inventory model field update handling. Key improvements include increased Celery worker concurrency from 5 to 6, a new optional `trigger_field_key` column in the workflows table, and updates to the `InventoryModel` update method to return both updated field information and old values. The Workflow model now supports an additional trigger type, new helper properties, and improved validation methods. API endpoints have been updated to handle `trigger_field_key`, and a new Celery task is triggered on model field changes. The `WorkflowManager` method now includes type hints and better documentation.

- Increased Celery worker concurrency from 5 to 6 in the `Makefile` for improved parallel task processing.

- Added a new migration to introduce the optional column `trigger_field_key` in the workflows table to support triggering workflows based on specific field changes in inventory models.

- Updated the `InventoryModel` update method to return both updated field information and the old value, allowing further processing by triggering background tasks.

- Expanded the Workflow model:
  - Supports an additional trigger type and extended its allowed entities and events with a new `InventoryModel.field` type and an `updated` event type.
  - Added new helper properties (`is_deleted` and `is_enabled`) for easier status checking.
  - The workflow serialization method now includes the new `trigger_field_key`.

- Enhanced workflow validation methods to validate the `trigger_field_key` along with type, entity name, and event type. Validation errors now use a custom `BadRequestError` with more descriptive error messages.

- Updated API endpoints in the UI routes for workflows and inventory models to pass and process the `trigger_field_key`. When a model field changes, a new Celery task (`on_model_field_change`) is triggered to process workflow executions.

- The `WorkflowManager`'s `start_execution` method now includes type hints and improved documentation. Minor adjustments in test files ensure that date comparisons use timezone-aware datetime objects.

These changes improve the robustness and clarity of the workflow triggering mechanism with extended support for specific field updates in inventory models and refined error handling.


<!--- PR #1492: https://github.com/validmind/backend/pull/1492 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.30.8) (#1492) --->
<!-- No release notes or summary provided. -->


<!--- PR #1379: https://github.com/validmind/backend/pull/1379 --->
<!--- Labels: dependencies, go --->
### Update `golang.org/x/net` from 0.34.0 to 0.38.0 in `casbin-server` (#1379)

This update revises the `go.mod` and `go.sum` files to target newer releases of the Go toolchain and several indirect dependencies. The toolchain is upgraded from `go1.23.1` to `go1.24.1`, and versions for modules such as `golang.org/x/crypto`, `golang.org/x/net`, `golang.org/x/sys`, and `golang.org/x/text` are also updated. These changes keep the project current with the latest Go ecosystem features and improvements, including fixes and performance enhancements in indirect dependencies. The update does not alter any functional business logic but ensures the project benefits from the latest upstream changes and compatibility improvements.


<!--- PR #1483: https://github.com/validmind/backend/pull/1483 --->
<!--- Labels: none --->
### Add `pg_stat` migration (#1483)

An extension for profiling has been added.

This update introduces a migration script to manage the `pg_stat_statements` extension in a PostgreSQL database. The script checks for the extension's existence and creates it if necessary. The upgrade function connects to the database, executes a query to verify the extension's presence, and conditionally creates it if not found. It also retrieves and prints the current version for informational purposes. The downgrade function is a placeholder and does not implement rollback logic. These changes ensure monitoring features are available without duplicating the extension.


<!--- PR #1490: https://github.com/validmind/backend/pull/1490 --->
<!--- Labels: none --->
### remove debug mode (#1490)

This update does not introduce any specific changes or breaking changes. No visual aids, such as screenshots or videos, are provided to demonstrate before and after scenarios.

This update removes the `debugpy` integration from the API service startup command in the `docker-entrypoint.sh` file. Previously, the container launched the API service with `debugpy` enabled, listening on `0.0.0.0:5678`. Now, the command directly starts the API service using `ddtrace-run` without invoking `debugpy`. This change simplifies the startup process for production deployments where remote debugging is not needed.


<!--- PR #1465: https://github.com/validmind/backend/pull/1465 --->
<!--- Labels: security --->
### Validate owners list against selected group (#1465)

This update addresses a critical vulnerability where a user could be added to the owners list and gain access to personally identifiable information (PII) without verifying their organizational affiliation. The update now ensures that users can only access data from their own organization and group, safeguarding sensitive information.

This update enhances user membership and ownership handling in the application:

- The unused import of `flask_migrate` has been removed from the backend API module, simplifying project dependencies.

- The `RolePermission` import in the authentication module has been repositioned for clearer dependency management.

- A new method, `is_member`, has been added to the `Group` class to centralize and clarify group membership checks.

- The UI inventory models route now verifies user existence and group membership before adding them as an owner or developer, ensuring robust ownership assignments.


<!--- PR #1442: https://github.com/validmind/backend/pull/1442 --->
<!--- Labels: none --->
### Increase worker concurrency (#1442)

This update improves system performance by increasing worker concurrency, enabling more tasks to be processed simultaneously. This change optimizes resource utilization and enhances overall efficiency.

This pull request increases the Celery worker concurrency from 4 to 6 in `docker-entrypoint.sh`. This change enables the worker to handle more tasks simultaneously, potentially enhancing performance under load. The rest of the command is unchanged, ensuring the worker starts with the correct work directory and Celery application context.


<!--- PR #1482: https://github.com/validmind/backend/pull/1482 --->
<!--- Labels: none --->
### Prevent admins from modifying `staff` roles (#1482)

Admins can no longer modify staff roles using the `PATCH /api/v1/roles/<protected_role_id>/permissions` endpoint. This change addresses a potential security vulnerability.

This update refactors the role management endpoints in the backend for improved consistency and security. Key changes include renaming the variable `orgRole` to `org_role` across GET and PATCH endpoints for better readability. Additionally, the PATCH endpoint now includes a check to prevent modifications to roles marked as `staff`, similar to the existing restriction on `admin` roles. These updates enhance maintainability and ensure proper role-based restrictions.

- Consistent Naming: The variable `orgRole` is now `org_role` to follow snake_case conventions.

- Enhanced Role Protection: The PATCH endpoint now prevents changes to `staff` roles, ensuring both `admin` and `staff` roles remain immutable.

- Minor Refactoring: Systematic renaming and logic adjustments improve consistency and permission handling.


<!--- PR #1464: https://github.com/validmind/backend/pull/1464 --->
<!--- Labels: none --->
### Enhance security for inventory model documents by fixing IDOR vulnerability (#1464)

This update enhances security for the UI assets proxy endpoint with key improvements:

- Authentication is now required to access the endpoint.
- Organization-level access control ensures users can only access assets from their own organization.
- Authentication tokens can be retrieved from cookies if the `Authorization` header is absent.
- Validation checks confirm that requested assets belong to the user's organization.

Previously, the endpoint lacked these security measures, potentially allowing unauthorized access to private assets. These changes protect sensitive data by ensuring only authorized users can access their organization's assets.

This update enhances backend authentication and authorization by introducing new methods for token retrieval and enforcing stricter access controls. 

- A new function, `get_token_auth_cookie`, retrieves an access token from an authorization cookie if not found in headers.

- The `get_token_auth_header_or_cookie` function now combines header and cookie methods for token extraction, replacing the previous `get_token_auth_header` method in authentication decorators.

- An authentication decorator (`@requires_auth()`) has been added to the UI Assets Proxy endpoint, ensuring only authenticated users can access the API.

- The endpoint now checks authorization by matching the asset key's organization identifier with the current user's organization, raising an unauthorized error if they do not match.

These improvements support multiple token sources and ensure assets are accessed within the correct organizational context.


## Frontend
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/frontend/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/frontend/compare/32c1fd2869b3a69d9ed75be917d9be0589822872...32c1fd2869b3a69d9ed75be917d9be0589822872 --->

### Enhancements


<!--- PR #1339: https://github.com/validmind/frontend/pull/1339 --->
<!--- Labels: enhancement --->
### Enable workflow deletion with dependency checks (#1339)

This update introduces a 'soft-delete' feature for workflows. When a workflow is deleted, it will be removed from the active workflows list, and future executions will be blocked. However, any ongoing executions of the deleted workflow will be allowed to continue.

This update enables workflow deletion with dependency checks between workflows and associated models.

API Enhancements:

- `GetWorkflowModelDependenciesCount` retrieves the number of models dependent on a workflow, warning users of potential impacts before deletion.
- `DeleteWorkflow` sends a DELETE request to remove a specified workflow.

New UI Components:

- `WorkflowDeleteModal` offers a confirmation dialog for deleting workflows, displaying warnings if models depend on the workflow and handling success and error scenarios with toast notifications.
- `ExecutionDetails` now alerts users if a workflow has been deleted, indicating that while the workflow is deprecated, current executions continue normally.
- The `WorkflowList` page includes a delete option that checks dependencies and opens the delete modal, ensuring safer workflow deletion.

Model Update:

- A `deleted_at` field has been added to the Workflow model to track deletion times, allowing the UI to render warnings conditionally.

These changes enhance workflow deletion by preventing accidental removal when dependencies exist and improving user feedback during the process.


<!--- PR #1328: https://github.com/validmind/frontend/pull/1328 --->
<!--- Labels: enhancement --->
### Implement improved template swap/merge experience (#1328)

This update introduces a feature that allows users to update documents using a template. Users can merge a template into an existing document and choose to selectively add, ignore, delete, or retain changes.

This update introduces significant functional enhancements and UI improvements, focusing on streamlined template management and user interaction.

- **Dependency Updates**: The project version is now `1.33.4`. New dependencies like `@minoru/react-dnd-treeview` and `react-dnd` support advanced template manipulation.

- **API Enhancements**: The `SwapTemplate` function is replaced by `CreateAndSwapTemplate`, consolidating template creation and swapping into one API call for improved clarity and reusability.

- **UI Modifications**: Updates to components like `AddFindingModal` and `AttributesRailDocumentOverview` refine user interactions. Changes include updated trigger labels, enhanced menu layouts, and consistent use of Chakra UI components for template operations.

- **Swap Template Modal**: A new `SwapTemplateModal` component offers a drag-and-drop tree view for comparing templates. Users can mark sections with statuses like ADD, KEEP, IGNORE, or DELETE, and resolve invalid configurations before applying changes.

- **Template Model Adjustments**: Minor changes include making the parent section optional and adding a `global_id` field to support new swapping logic.

These updates enhance the application's template management capabilities, making it more interactive and user-friendly.


<!--- PR #1351: https://github.com/validmind/frontend/pull/1351 --->
<!--- Labels: enhancement, refactor --->
### Approval process notes added to activity log (#1351)

Workflow approval step voter notes have been added to the activity log.

This PR introduces functional UI enhancements and refactors across the application, focusing on event and workflow approval processes. Key changes include collapsible content in the `EventRowLayout` for additional details, new components for workflow approvals, and improved code modularity. These updates enhance the user interface by providing a more interactive and structured experience.

- In the `EventRowLayout` component, collapsible content now displays additional details like vote notes. An `IconButton` toggles a `Collapse` element, with the icon switching between a downward and upward chevron.

- New components related to workflow approvals include:

  - `ApprovalActionButtons`: A consistent button group for approving or rejecting votes with appropriate color schemes and icons.
  
  - `ApprovalHeader`: Displays the approval title and message in a structured layout.
  
  - `ApprovalVoterCard`: Renders voter information with an optional popover for vote notes, enhancing usability.
  
  - `VoteDetailsModal`: Provides a modal for detailed viewing of vote notes in a read-only textarea.
  
  - `VoterStatusColumn` and associated constants: Organize and display voter statuses in columns based on their vote state, using a uniform look.

- Redundant code and inline comments have been cleaned up and replaced with reusable components, improving maintainability and readability.


<!--- PR #1347: https://github.com/validmind/frontend/pull/1347 --->
<!--- Labels: enhancement --->
### Trigger workflow on field change (#1347)

A new trigger type, "On Model Field Change," is now available when creating a workflow. This feature lets you monitor changes in a specific inventory model field before initiating workflow execution.

This update enhances the workflow management component and its API service, improving flexibility and user interface dynamics. Key changes include API adjustments for URL formatting and the addition of an optional `triggerFieldKey` parameter. The Workflow Modal now supports a new `MODEL_FIELD_CHANGE` trigger type, allowing users to select specific fields to trigger workflows. Error states reset upon modal open/close, and enumerations have been updated to support these new functionalities.

- **API Changes:**

  - The `GET` endpoint URL formatting has been corrected by removing an unnecessary line break.
  
  - The `PostWorkflow` API call now includes an optional `triggerFieldKey` parameter for capturing custom trigger field keys.

- **Workflow Modal Enhancements:**

  - Additional context and utility methods are imported to dynamically build a list of available fields from the organization's inventory model schema.
  
  - A new `MODEL_FIELD_CHANGE` trigger type allows users to select specific fields to trigger workflows.
  
  - The modal supports dynamic behavior based on the selected trigger type, capturing and passing the `field_name` to the API when `MODEL_FIELD_CHANGE` is selected.
  
  - Error states reset upon modal open/close, with conditional logic adjusting entity names and event types based on the trigger type.

- **Model Updates:**

  - Enumerations for `TriggerType`, `EntityName`, and `EntityEventType` have been extended to support the new `MODEL_FIELD_CHANGE` trigger, enabling workflows to handle both field-based modifications and traditional events.


<!--- PR #1372: https://github.com/validmind/frontend/pull/1372 --->
<!--- Labels: enhancement --->
### Allow roles and stakeholder types to be deleted (#1372)

This update introduces delete buttons with confirmation prompts on both list and detail pages for roles and stakeholder types. Group deletion now uses a reusable component with improved styling for consistency. An `API.ts` call has been implemented for deleting roles. Additionally, a menu item for stakeholder type settings has been added, following the [documentation](https://docs.validmind.com/guide/configuration/manage-model-stakeholder-types.html). Note that the roles detail page is reused for stakeholder type details, with minor differences, and the API roles delete endpoint is also used for stakeholder type deletion requests.

- Added delete buttons and confirmation prompts to the list and detail pages for roles and stakeholder types.

- Updated group deletion to use a reusable component and improved styling for consistency.

- Implemented an `API.ts` call for deleting roles.

- Added a menu item for stakeholder type settings as per the [documentation](https://docs.validmind.com/guide/configuration/manage-model-stakeholder-types.html).

Note: The roles detail page is reused for the stakeholder type detail page with slight differences. The API roles delete endpoint is also reused for stakeholder type deletion requests.

This update enhances role deletion and confirmation dialogs within the application for a more consistent user experience. Key improvements include a new `DeleteRole` API method for role deletion, a standardized `DeleteConfirmationAlert` component across multiple pages, and updated styling for `DangerMenuItem` to highlight destructive actions. The RoleDetails page now supports role and stakeholder type deletion with detailed messages. Roles and Stakeholders pages allow role deletion via a contextual menu, using react-query for immediate data updates. Minor UI copy adjustments in `AddRoleModal` clarify the distinction between adding roles and stakeholder types.

- A new API method, `DeleteRole`, supports role deletion by calling an Axios DELETE endpoint.

- The `DeleteConfirmationAlert` component standardizes the deletion confirmation workflow across Group, RoleDetails, Roles, and Stakeholders pages, providing consistent user experience and custom messages.

- `DangerMenuItem` styling has been refined to better indicate destructive actions with adjusted color and background properties.

- The RoleDetails page now supports role and stakeholder type deletion, integrating the new confirmation dialog and providing detailed messages about the impact of the action.

- Roles and Stakeholders listing pages allow role deletion via a contextual menu, using react-query mutations to trigger deletion operations and ensure immediate data updates.

- Minor UI copy adjustments in `AddRoleModal` clarify the difference between adding a new role and a stakeholder type.

These changes enhance the consistency of deletion flows, ensuring users are informed and deliberate when performing potentially destructive actions.


<!--- PR #1359: https://github.com/validmind/frontend/pull/1359 --->
<!--- Labels: enhancement, good first issue, javascript --->
### Add option to export comments in validation report (#1359)

We have introduced the ability to export comments from validation reports. Previously, only flags could be exported. By default, exporting comments is turned off.

To enable this feature, a new checkbox has been added to the UI. This checkbox allows users to instruct the backend to include comments in the validation report. When selected, comments will be included in the appendix of the exported document.

There are no breaking changes associated with this update.

This update improves the report download feature by introducing the `includeComments` option. In `API.ts`, the `DownloadReport` function now includes an optional boolean parameter to include comments in the report data. On the front end, the `DownloadValidationReportModal` component has a new checkbox for users to select this option. The UI and API call have been updated to handle this new state, ensuring comments are included in the report when specified.


<!--- PR #1371: https://github.com/validmind/frontend/pull/1371 --->
<!--- Labels: enhancement, good first issue, javascript --->
### Add ability to export comments in monitoring and documentation reports (#1371)

We have introduced a feature that allows exporting comments from monitoring and documentation reports. This new option is similar to existing export features, with the default setting for exporting comments turned off.

Users can now opt to include comments in their exported documents. Only resolved comments will be included, and they will appear at the end of the document.

This update enhances the UI and configuration options in export modals for Model Documentation, Validation Report, and Monitoring Report, improving the export experience. Key changes include a new "Include comments" checkbox, consistent layout improvements using `HStack`, integration of `MoreInfoPopOver` for contextual help, and minor accessibility enhancements. These updates simplify the export process by focusing on a single checkbox for comments inclusion.

Key changes include:

- A new "Include comments" checkbox in each modal allows users to decide whether comments should be included in the exported file. This option is managed with a new state variable and is passed to the API call accordingly.

- UI improvements have been made by replacing certain layout components with more consistent alternatives, such as using `HStack` for grouping text and popover components. This enhances alignment and spacing for a more coherent user experience.

- The `MoreInfoPopOver` component is now integrated directly within the header or section text to provide users with contextual help regarding document exporting.

- Minor adjustments to spacing and `aria-label` attributes have been added to buttons, specifically the download buttons, to improve accessibility.

Overall, these changes streamline the configuration experience for generating export documents, omitting redundant file format selection in favor of a single, focused checkbox option for comments inclusion.


<!--- PR #1393: https://github.com/validmind/frontend/pull/1393 --->
<!--- Labels: enhancement --->
### Add workflow-run step (#1393)

This update introduces a new workflow step, "Run Workflow," allowing users to target and execute any manually triggered workflow. Additionally, it enhances the styling of workflow node boxes to ensure consistent coloring, outlining, and selection across both zoom-in and zoom-out views for configured and unconfigured node boxes. These adjustments align with recent changes in the ValidMind backend.

This PR introduces key enhancements and bug fixes:

- UI & Spinner Update: Spinners across the application now use theme defaults for color properties, ensuring consistent styling.

- Workflow API Enhancements: The `GetWorkflows` function now supports pagination and filtering by trigger type. A new function, `GetWorkflowDependencies`, retrieves model dependency counts and lists dependent workflows, aiding deletion decisions.

- Workflow Deletion Modal Improvements: The delete modal now shows a warning and disables the delete button if dependencies prevent deletion, listing dependent workflows with links.

- New Run Workflow Feature: A new node and panel allow users to trigger another workflow. Integrated into the workflow canvas, it supports configuration via an inline dropdown using the `useWorkflows` hook.

- UI Consistency & Debug Enhancements: Minor UI tweaks and added inspection popovers improve debugging. Components like `NodeBox` now display contextual data to assist in troubleshooting workflows.

### Bug fixes


<!--- PR #1336: https://github.com/validmind/frontend/pull/1336 --->
<!--- Labels: bug --->
### Improve Auth0 error handling for better user guidance (#1336)

Users will now see detailed error messages from the backend instead of just error codes. If a specific message is unavailable, the default message will be displayed. Additionally, error handling during the organization onboarding process has been improved.

This update improves error handling in the `BootstrapForm` component by prioritizing detailed error messages from the API response (`error.response?.data?.message`) over generic ones (`error.message`). The selected error message is stored in a local variable (`errorMessage`) and used consistently in both inline error displays and toast notifications. This ensures that more descriptive backend error messages are utilized, enhancing troubleshooting and user guidance during organization creation failures.


<!--- PR #1361: https://github.com/validmind/frontend/pull/1361 --->
<!--- Labels: bug --->
### Templates should always have explicit content blocks declared (#1361)

The documentation sections will no longer include default text blocks. Instead, users will see an empty state with a prompt to "Add New Block."

- Fixed a bug where some sections were not being deleted.

<!-- List any breaking changes -->

This update refactors the menu rendering logic in the `BlockExplorer` component to enhance flexibility and reusability. Key changes include:

- A new `MenuWrapper` component consolidates menu display logic with `DocumentBlockModal` configuration, reducing duplication as the menu is used in multiple places within the `BlockExplorer` component.

- An optional `customRender` property is added to `BlockExplorerProps`. When provided, `BlockExplorer` uses this method wrapped within the `MenuWrapper` for customized UI behavior, such as an empty state display with an "Add New Block" button.

- `DocumentationPage` now utilizes the `customRender` feature of `BlockExplorer`, offering a cleaner, context-sensitive empty state where users are prompted to start building the section. The `MenuButton` triggers focus via the `setIsFocused` callback.

- Minor behavior changes include modifying the `getInitialSectionContents` function to return an empty array instead of a default content block, ensuring empty sections are truly empty when appropriate.

These changes improve modularity, reduce duplication, and give developers more control over block and menu rendering within the application.

<!-- ### Changes with no label -->


<!--- PR #1389: https://github.com/validmind/frontend/pull/1389 --->
<!--- Labels: none --->
<!--- ### Merge Staging hotfixes into Main (staging-1.33.3-to-main) (#1389) --->
<!-- No release notes or summary provided. -->


<!--- PR #1411: https://github.com/validmind/frontend/pull/1411 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.34.4) (#1411) --->
<!-- No release notes or summary provided. -->


<!--- PR #1364: https://github.com/validmind/frontend/pull/1364 --->
<!--- Labels: none --->
<!--- ### Repo Sync repo-sync/9683 (2025-05-05) (#1364) --->
<!-- No release notes or summary provided. -->


<!--- PR #1412: https://github.com/validmind/frontend/pull/1412 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.34.4) (#1412) --->
<!-- No release notes or summary provided. -->


<!--- PR #1391: https://github.com/validmind/frontend/pull/1391 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.34.2) (#1391) --->
<!-- No release notes or summary provided. -->


<!--- PR #1401: https://github.com/validmind/frontend/pull/1401 --->
<!--- Labels: none --->
<!--- ### Hotfix: Fixed cookie settings to work with local and deployed environments. (#1401) --->
<!-- No release notes or summary provided. -->


<!--- PR #1390: https://github.com/validmind/frontend/pull/1390 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.34.2) (#1390) --->
<!-- No release notes or summary provided. -->


<!--- PR #1398: https://github.com/validmind/frontend/pull/1398 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.34.4) (#1398) --->
<!-- No release notes or summary provided. -->


<!--- PR #1404: https://github.com/validmind/frontend/pull/1404 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.34.4) (#1404) --->
<!-- No release notes or summary provided. -->


<!--- PR #1354: https://github.com/validmind/frontend/pull/1354 --->
<!--- Labels: none --->
<!--- ### chore: sync pr template from backend (#1354) --->
<!-- No release notes or summary provided. -->


<!--- PR #1400: https://github.com/validmind/frontend/pull/1400 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.34.4) (#1400) --->
<!-- No release notes or summary provided. -->


<!--- PR #1402: https://github.com/validmind/frontend/pull/1402 --->
<!--- Labels: none --->
### Safely using dangerouslySetInnerHTML (#1402)

The DOMPurify library has been added to sanitize HTML content before using `dangerouslySetInnerHTML` in React components, preventing Cross-Site Scripting (XSS) attacks. This ensures all HTML is sanitized through a centralized utility function before rendering. Previously, unsanitized HTML was directly rendered, posing security risks.

This update implements DOMPurify version 3.2.5. The `sanitizeHtml` utility function is configured to allow the "target" attribute on links while sanitizing all other potentially dangerous HTML content.

This update enhances security by integrating `DOMPurify` to sanitize HTML content before rendering with React's `dangerouslySetInnerHTML`. Key changes include adding `DOMPurify` to `package.json` and `package-lock.json`, creating a `sanitizeHtml` utility function, and updating components like `CommandPalette`, `DocumentChecker`, and others to sanitize HTML content. These improvements prevent XSS attacks by cleaning HTML strings, ensuring safer rendering of user-generated or dynamic content.

This pull request introduces a security enhancement by integrating `DOMPurify` to sanitize HTML content before rendering with React's `dangerouslySetInnerHTML`. The changes include:

- Adding the `DOMPurify` dependency to `package.json` and `package-lock.json`.
  
- Introducing a new utility function `sanitizeHtml` in the `utils` module that wraps `DOMPurify.sanitize`.
  
- Updating components like `CommandPalette`, `DocumentChecker`, `FindingsList`, `GenerateWithAIModal`, `JSONLogicHumanizer`, `CustomText`, and `TemplateEditor` to sanitize dynamic HTML content before rendering. This prevents potential cross-site scripting (XSS) attacks by ensuring HTML strings are cleaned.
  
- Minor code formatting improvements and small refactors in some components for consistency.

These changes enhance application security by ensuring user-generated or dynamic HTML content is sanitized before DOM injection, contributing to safer rendering of external or user input content.


<!--- PR #1392: https://github.com/validmind/frontend/pull/1392 --->
<!--- Labels: none --->
### Set a cookie with the access token value (#1392)

This update introduces cookie-based authentication as an alternative to authorization headers for accessing assets. Previously, assets embedded in HTML, such as `img` tags, were inaccessible due to the inability to set custom headers. Now, the system first tries to authenticate with the Authorization header and, if unsuccessful, uses the `authToken` cookie. This ensures authenticated users can access assets in HTML contexts, enhancing security by preventing unauthorized access to organization-specific assets.

The update includes organization-level access control validation to ensure users can only access assets from their own organization. This change is part of a broader security enhancement to prevent unauthorized access to organization-specific assets.

This update enhances the `MainApp` component by introducing a feature that sets an authentication token as a cookie when an access token is present. This allows asset requests to verify user authentication via the cookie. Additionally, `onSuccess` and event handler callbacks have been refactored for better readability, and minor code formatting adjustments have been made to standardize styling in role mapping and JSX routing components.

- A new feature allows setting an authentication token as a cookie when an access token is present. This cookie serves as an alternative to using the auth token, specifically for serving assets. This change ensures that asset requests can verify user authentication through the cookie.

- Several `onSuccess` and event handler callbacks have been refactored to consistently wrap arrow function parameters in parentheses, enhancing readability and consistency across the codebase.

- Minor refactoring has been applied to code formatting in the mapping of roles and permissions, as well as in the JSX routing components. This standardizes the styling without altering the underlying functionality.

Overall, aside from style consistency improvements, the main functional enhancement is the injection of the auth token as a cookie.


## Agents
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/agents/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/agents/compare/b86ed7335b2cdc8fda7641be202a3cedc32211ba...b86ed7335b2cdc8fda7641be202a3cedc32211ba --->

<!-- ### Changes with no label -->


<!--- PR #22: https://github.com/validmind/agents/pull/22 --->
<!--- Labels: none --->
<!--- ### Merge Main into Prod (prod-19097) (#22) --->
<!-- No release notes or summary provided. -->


<!--- PR #26: https://github.com/validmind/agents/pull/26 --->
<!--- Labels: none --->
<!--- ### Merge Main into Prod (prod-11385) (#26) --->
<!-- No release notes or summary provided. -->


<!--- PR #20: https://github.com/validmind/agents/pull/20 --->
<!--- Labels: none --->
<!--- ### Repo Sync repo-sync/9683 (2025-05-05) (#20) --->
<!-- No release notes or summary provided. -->


<!--- PR #3: https://github.com/validmind/agents/pull/3 --->
<!--- Labels: none --->
### Implement code explainer agents (#3)

To use the Code Explainer, follow this example:

```python
from IPython.display import Markdown, display

from agents import code_explainer

with open("binary_classifier_code.py") as f:
    code_content = f.read()
state = {
    "inputs": {
        "additional_instructions": "Preprocessing module for binary classification",
        "source_code": code_content,
    },
    "output": "",
}
state = code_explainer.invoke(state)
display(display(Markdown(state["output"])))
```

The demo notebook is available at `notebooks/code_explainer.ipynb`.


## Documentation
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/documentation/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/documentation/compare/01f652d63c5c2897688a76ad8ca89ea50973c492...01f652d63c5c2897688a76ad8ca89ea50973c492 --->



<!--- PR #693: https://github.com/validmind/documentation/pull/693 --->
<!--- Labels: documentation --->
### Add missing `Export ongoing monitoring document` section to docs (#693)

This update adds a feature to the documentation, allowing users to export ongoing monitoring documentation for models. The new section provides step-by-step instructions for using the user interface to perform this export. Users should:

- Click on **Inventory** in the left sidebar.
- Select a model or use filters/search to find a model.
- Click on **Ongoing Monitoring** in the model's sidebar.
- Click on **Export Document** in the right sidebar.
- Download the file locally by clicking **Download File**.

This enhancement improves documentation usability by offering clear instructions for exporting ongoing monitoring reports.


<!--- PR #713: https://github.com/validmind/documentation/pull/713 --->
<!--- Labels: documentation, highlight --->
### Updated Validator Fundamentals courses for clarity and comprehensiveness (#713)

The **Validator Fundamentals** course has been updated for clarity and comprehensiveness, aligning with the Developer Fundamentals course. Updates include revised login instructions, detailed module learning outcomes, module summaries, and additional slides on previously omitted topics. The course has been thoroughly tested to ensure accurate instructions and time estimates.

The revamped course is divided into four modules with clear learning outcomes:

- **Module 1** — Using ValidMind for Model Validation
- **Module 2** — Running Data Quality Tests
- **Module 3** — Developing Challenger Models
- **Module 4** — Finalizing Validation Reports

This training series guides you through using ValidMind to validate datasets and models. It covers running and logging tests with the ValidMind Library and finalizing your model's validation report in the ValidMind Platform. You'll learn to automate testing, populate evidence in your validation report, track finding resolution, and more. Register to take the course now!


<!--- PR #707: https://github.com/validmind/documentation/pull/707 --->
<!--- Labels: documentation --->
### Updated content block features in documentation (#707)

The documentation has been reorganized to enhance clarity and usability. Templates and reusable text blocks, applicable to model documentation, validation reports, and ongoing monitoring, are now in a new sub-section. Broken links have been fixed, and aliases applied to old URLs. A new page details the block library feature, guiding users on managing text blocks. Updates reflect UI changes, including content block types and the new chat interface for AI text generation. Test results and metrics over time pages now include new user experiences for block menus. The ValidMind Platform documentation has expanded to include guides on managing templates and the text block library.

Since templates and reusable text blocks apply to more than just model documentation, such as validation reports and ongoing monitoring, the guides have been moved into a new sub-section. Broken links have been resolved, and aliases have been applied to the old URLs. A hotfix was applied to the `installation` repo to address broken links, but it was reverted to avoid repeated changes until the PR is approved.

A new page has been added to cover the new block library feature, providing a comprehensive guide on managing the text block library.

The page on working with content blocks has been updated to reflect changes in the UI due to the block library. It includes updated explanations of content block types and reflects the new user experience for adding and removing content blocks. Additionally, the "Generate Text with AI" section now includes the new chat interface.

The page on working with test results now reflects the new test-driven block menu user experience. A section has been added on configuring the display of test results once inserted.

The page on working with metrics over time now reflects the new metric over time block menu user experience.

To support the release of the updated content block interface and the text block library, the documentation on templates within the ValidMind Platform has been reorganized and expanded. Guides on managing templates for model documentation, validation reports, and ongoing monitoring reports are now available under the **Guides** in the **templates** section, along with a new guide on managing your text block library.

This update refactors documentation template paths by relocating them from the `model-documentation` directory to a new `templates` directory. This affects multiple files, including configuration files, guides, and release notes. Additionally, enhancements to the content block management system have been introduced, allowing for improved organization and reuse of text blocks. New features include managing a library of reusable text blocks, configuring test result displays, and enhancing the user interface for adding and removing content blocks.


<!--- PR #681: https://github.com/validmind/documentation/pull/681 --->
<!--- Labels: documentation, highlight --->
### Updated developer fundamentals training (#681)

The Developer Fundamentals course has been enhanced for clarity and simplicity, featuring updated login instructions, module outcomes, and summaries. Courses have been tested for accuracy in instructions and timing. A workaround for the `Copy snippet to clipboard` slide addresses a CORS error by allowing `allow="clipboard-read; clipboard-write"`. The latest version uses a two-column layout for consistency.

In the Learning Paths section, titles and descriptions have been refined for clarity. Buttons for "register now" or "coming soon" have been added. The Validator Fundamentals section has been cleaned up for upcoming updates. The extra "Training" drop-down has been removed to streamline navigation, with potential plans for sidebar or breadcrumb navigation. `Releases` has been added as an independent section in the drop-down menu. The browser compatibility message from registration pages has been styled and replicated in the "Legal Ease" section for consistency.

This update enhances notebook execution and documentation within GitHub Actions and site content. Key improvements include updated action names and descriptions in `action.yml` files, registration of the `validmind` kernel, and expanded notebook execution commands. Documentation now features new training modules and detailed markdown files, while site content is reorganized for better navigation. Notebook directories are restructured, and content is updated with new sections, images, and GIFs to aid users.

- **GitHub Actions Enhancements**:

  - Updated action names and descriptions in `action.yml` files for demo, prod, and staging notebooks to reflect the execution of multiple notebooks.
  
  - Added a step to register the `validmind` kernel in the GitHub Actions workflow to ensure the correct environment is used for notebook execution.
  
  - Modified the execution command to target a series of notebooks, improving the scope of automated testing.

- **Documentation and Training Content**:

  - Introduced new training modules and updated existing ones to provide a comprehensive learning path for developers, validators, and administrators using ValidMind.
  
  - Added detailed markdown files for each training module, outlining learning objectives, course content, and step-by-step instructions for using ValidMind.
  
  - Enhanced the site content with new sections and updated existing ones to improve navigation and user experience.

- **Notebook Content and Structure**:

  - Reorganized the notebook directory structure to separate executed notebooks from tutorials, improving clarity and maintainability.
  
  - Updated notebook content to include new sections on implementing custom tests and using external test providers, providing users with more advanced capabilities.
  
  - Added new images and GIFs to the documentation to visually guide users through the process of adding content blocks and test results.

These changes aim to streamline the notebook execution process, enhance the training and documentation experience, and provide users with more robust tools for model development and validation.

<!-- ### Changes with no label -->


<!--- PR #724: https://github.com/validmind/documentation/pull/724 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#724) --->
<!-- No release notes or summary provided. -->


<!--- PR #700: https://github.com/validmind/documentation/pull/700 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#700) --->
<!-- No release notes or summary provided. -->


<!--- PR #706: https://github.com/validmind/documentation/pull/706 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#706) --->
<!-- No release notes or summary provided. -->


<!--- PR #705: https://github.com/validmind/documentation/pull/705 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#705) --->
<!-- No release notes or summary provided. -->


<!--- PR #728: https://github.com/validmind/documentation/pull/728 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#728) --->
<!-- No release notes or summary provided. -->


<!--- PR #715: https://github.com/validmind/documentation/pull/715 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#715) --->
<!-- No release notes or summary provided. -->


<!--- PR #712: https://github.com/validmind/documentation/pull/712 --->
<!--- Labels: none --->
<!--- ### Fix merge conflicts for prod deploy #711 (#712) --->
<!-- No release notes or summary provided. -->


<!--- PR #723: https://github.com/validmind/documentation/pull/723 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#723) --->
<!-- No release notes or summary provided. -->


<!--- PR #709: https://github.com/validmind/documentation/pull/709 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#709) --->
<!-- No release notes or summary provided. -->


<!--- PR #725: https://github.com/validmind/documentation/pull/725 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#725) --->
<!-- No release notes or summary provided. -->


<!--- PR #718: https://github.com/validmind/documentation/pull/718 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#718) --->
<!-- No release notes or summary provided. -->


<!--- PR #703: https://github.com/validmind/documentation/pull/703 --->
<!--- Labels: none --->
<!--- ### fix: remove helm repo path from s3 sync commands (#703) --->
<!-- No release notes or summary provided. -->


<!--- PR #701: https://github.com/validmind/documentation/pull/701 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#701) --->
<!-- No release notes or summary provided. -->


<!--- ## Validmind-library --->
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/validmind-library/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/validmind-library/compare/cmvm/25.05.04...cmvm/25.05.04 --->
<!-- No public PRs found for this release -->
