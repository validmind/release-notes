---
title: "25.05.04 Hotfix release notes"
date: "May 16, 2025"
categories: [cmvm, 25.05.04, hotfix]
sidebar: validmind-installation
toc-expand: true
# Content edited by AI - 2025-06-04 09:27
# Content validated by AI - 2025-06-04 09:27
# Content overwritten from an earlier version - 2025-06-04 09:27
---

This release includes the ability to enable soft deletion of workflows, export comments in validation reports, run schema migrations in a separate container, and enable or disable LLM support with `OfflineFlags` for Barclays, among other enhancements.

# Backend
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/backend/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/backend/compare/7fde7cbb33d7335d7948a4e940fc4e83d6327660...7fde7cbb33d7335d7948a4e940fc4e83d6327660 --->

## Enhancements


<!--- PR #1400: https://github.com/validmind/backend/pull/1400 --->
<!--- Labels: enhancement --->
### Enable soft deletion of workflows (#1400)

This update introduces a soft delete feature for workflows and a dependency check endpoint. Key changes include:

- A database migration adds `deleted_at` and `deleted_by_id` columns to the workflows table for soft deletion tracking.
- Workflow model updates:
  - New columns support soft deletion.
  - The `serialize` method includes `deleted_at`.
  - Queries exclude soft-deleted workflows by filtering for `deleted_at` as `NULL`.
  - `get_workflow_dependencies` calculates dependent inventory models.
  - `mark_as_deleted` sets the `deleted_at` timestamp and records the user ID.

- UI route updates:
  - A DELETE endpoint allows soft deletion of workflows, returning appropriate HTTP status codes.
  - An endpoint checks workflow dependencies by returning the count of dependent inventory models.

- Test cases:
  - Tests ensure soft-deleted workflows are excluded from active queries.
  - Tests verify correct dependency counts before and after workflow executions.

These changes enhance workflow deletion handling, improve data integrity, and enable dependency tracking.


<!--- PR #1429: https://github.com/validmind/backend/pull/1429 --->
<!--- Labels: enhancement, python --->
### Add ability to export comments in validation reports (#1429)

We have added the ability to export comments from validation reports. Previously, only flags could be exported, and exporting comments was not possible. By default, exporting comments is turned off.

With the corresponding frontend update, there is now a checkbox labeled "Include comments left on document" available when exporting the validation report.

Customers requested this feature to allow contributors' comments to be saved.

There are no breaking changes associated with this update.

This update enhances reporting by integrating user comments into generated reports. Key changes include new methods for querying and joining annotation data with comments, updates to serialization processes to support a new `include_comments` flag, and modifications to UI reporting routes to handle this flag. A new function processes comments for document fragments, and a dataclass facilitates clean export of comment details. Unit tests ensure proper functionality and formatting.

- In the `Annotation` model (`annotation.py`), a static method `get_user_comments_by_model_id` is added to query and join annotation data with related comments and the user who created them.

- The report serialization process is updated in `model_inventory.py` and `reports.py` to support an `include_comments` flag for embedding user comments into reports, affecting document generation and content structure.

- The UI reporting routes (`ui_reporting.py`) now parse an additional parameter for comments inclusion. A helper method, `parse_generate_report_params`, consolidates all report parameters, including the `include_comments` flag.

- In the report render helpers, a new function `get_comment_text_for_doc` processes retrieved comments, strips HTML formatting, and organizes them in a styled text block for document fragments.

- A new dataclass `ExportAnnotation` in `util_models.py` facilitates clean export of comment details, including user name, text content, created date, and context.

- Unit tests in `test_reports.py` verify functionality: testing serialization with comments, ensuring comments appear as expected in document fragments, and validating HTML is properly cleaned before embedding in the final report.

These changes ensure user comments are properly queried, formatted, and integrated within generated reports for a comprehensive output.


<!--- PR #1433: https://github.com/validmind/backend/pull/1433 --->
<!--- Labels: enhancement, do not merge, breaking-change --->
### Run schema migrations in a separate container (#1433)

This update modifies the `docker-entrypoint` script and `docker-compose` configuration to improve the deployment process. Schema migrations, along with scripts for creating analytics views and managing RBAC, will now execute first in a separate container. Other ValidMind backend containers will wait for this container to complete before starting.

Schema migrations should now run once per deployment using a Kubernetes `job` resource. Failing to implement this `job` resource, either by not using the latest Helm chart version or omitting it in a custom deployment, will lead to system issues. The database schema may not align with the ValidMind backend requirements, causing potential degradation. An associated change to our Helm chart must merge with this update.

This update enhances deployment pipelines, documentation, Docker configurations, and startup scripts for improved functionality and clarity. Key changes include streamlined GitHub Actions for ECR login, updated Docker build tags, and enhanced local development instructions in `README.md`. A new service in `docker-compose.yaml` handles migrations, and the startup script now aligns with service naming conventions. Redundant code in `src/backend/api.py` has been removed to optimize migration handling.

- The GitHub Actions workflow (`deploy.yaml`) now uses the `aws-actions/amazon-ecr-login@v2` action for ECR login, simplifying the process and reducing failure points. Docker build tags and cache parameters utilize output variables from this action.

- `README.md` has updated local development instructions with `make` targets for database migrations, RBAC installation, and analytics views creation, offering clearer guidance. The ValidMind schema recreation now suggests using the migrations task instead of starting the API.

- A new service configuration for migrations in `docker-compose.yaml` builds from the backend Dockerfile and ensures schema migrations run in a controlled environment. Dependencies ensure the migrations service completes before dependent services proceed.

- The startup script (`docker-entrypoint.sh`) updates the Keycloak port reference to use `KEYCLOAK_SERVICE_PORT`, aligning with service conventions. The Redis startup check now skips waiting in migration mode, streamlining the startup flow for migration, worker, and API modes.

- Redundant Flask-Migrate initialization in `src/backend/api.py` has been removed, as migrations are now managed through a dedicated service or task.

These changes simplify deployment, improve developer guidance, and enhance startup and migration management across environments.


<!--- PR #1431: https://github.com/validmind/backend/pull/1431 --->
<!--- Labels: enhancement --->
### Enable or disable LLM support with `OfflineFlags` for Barclays (#1431)

This update introduces offline feature flag support and enhances the feature flags codebase. Key improvements include offline feature flag functionality configurable via environment variables, enabling use in environments without LaunchDarkly integration, such as VM deployments. Comprehensive docstrings have been added to all feature flag functions, and feature flag access has been refactored to use a new centralized, context-aware function, reducing code duplication. Unused feature flags have been removed, and type hints have been added for better maintainability and type safety.

This update enhances the feature flag system by adding offline flag support and improving context handling for LaunchDarkly evaluations.

- The `.env.example` file now includes a `FEATURE_FLAGS` JSON string for offline environments, enabling offline evaluation using a predefined JSON of flags.

- The `feature_flags.py` file introduces new functions. The `get_offline_feature_flag` retrieves flag values from the offline configuration, providing a default if absent. The `get_feature_flag_with_context` checks the offline configuration before attempting a LaunchDarkly evaluation, improving offline reliability.

- Context handling is improved with two functions. The `context_from_user` function now has an enhanced docstring, and a new function, `context_from_user_and_organization`, creates a multi-context using both user and organization information for more detailed evaluations.

- The backend tracking route now uses the `get_feature_flag_with_context` function instead of directly accessing the `ldclient`, decoupling feature flag evaluation from the LaunchDarkly client for more flexible offline support.

- Comprehensive unit tests have been added in `tests/unit/test_feature_flags.py`, covering scenarios like context creation, offline and online flag evaluation, and handling cases where user or organization data may be missing.

## Bug fixes


<!--- PR #1441: https://github.com/validmind/backend/pull/1441 --->
<!--- Labels: bug --->
### Add logging to `workflows` Celery task (#1441)

This update introduces logging functionality and increases the maximum number of worker threads.

This pull request introduces two key changes:

- The worker concurrency in the Celery configuration has been increased from 4 to 6 in the `celery_config.py` file. This adjustment aims to enhance performance by allowing more tasks to be processed simultaneously, especially under heavy workloads.

- A new logging statement has been added to the `workflows.py` module. This log records the process of finding available workflows based on a field change, including the field key and associated organization, to assist in debugging and tracking execution flow.


<!--- PR #1458: https://github.com/validmind/backend/pull/1458 --->
<!--- Labels: bug, security --->
### Remove privilege escalation issue (#1458)

We have fixed an issue that allowed normal users to escalate their permissions to admin level. This update removes the privilege escalation vulnerability.

This update enhances user role management by refining the authorization process and improving variable naming for clarity. In the POST endpoint, authorization now specifies `resource="Role"` and `action="create"` for precise control, replacing the previous `refresh="api-async"` parameter. Similarly, the DELETE endpoint uses `resource="Role"` with `action="delete"` to align with permission requirements. The variable `user` is now `to_update_user`, ensuring consistency in verifying organization membership and role assignments. Event publishing now correctly references the updated user variable, ensuring accurate event generation.


<!--- PR #1471: https://github.com/validmind/backend/pull/1471 --->
<!--- Labels: bug, security --->
### Check workflow permissions for states (#1471)

None

This update improves the UI workflow states endpoints by enforcing organization-specific data access. Workflows are now retrieved through the current user's organization using `g.current_user_org.workflows`, instead of accessing the global `Workflow` model. This applies to GET, POST, PATCH, and DELETE endpoints, ensuring workflows are only accessed within the user's organization, reducing data leakage risks. Additionally, `ResourceNotFoundError` exceptions are explicitly rethrown for precise error signaling, while other exceptions are returned as `InternalServerError`. These changes enhance security and error handling in workflow state management.


<!--- PR #1472: https://github.com/validmind/backend/pull/1472 --->
<!--- Labels: bug --->
### Ensure `SQLAlchemy` pool variables are integers (#1472)

This update addresses an issue with Kubernetes pod specifications, which require environment variables to be quoted, causing Python to interpret them as strings. SQLAlchemy struggles with these string values. The update ensures that when these environment variables are set by the Kubernetes pod specification, they are correctly cast to integers, rather than relying on default values.

This pull request improves the Flask application's configuration by converting the `SQLALCHEMY_POOL_SIZE` and `SQLALCHEMY_MAX_OVERFLOW` environment variables to integers. Previously, these values were used directly as strings, potentially causing type mismatches. This update ensures the correct data type is used, reducing potential runtime errors related to database connection pooling configurations.


<!--- PR #1470: https://github.com/validmind/backend/pull/1470 --->
<!--- Labels: bug, security --->
### Check model permissions on `/api/v1/workflows/targets/{cuid}/executions` (#1470)

This update refines the API route `/api/v1/workflows/targets/{cuid}/executions`. Previously, it used `Workflow.get_workflow` to filter workflows by the user's organization but did not apply the same filter when selecting executions by target. The change now includes the user in the parameters for `Execution.get_by_target`, ensuring executions are selected only from the user's organization.

This update refactors workflow retrieval methods to focus on the associated organization rather than the user object. Key changes include:

- In `src/backend/db/workflow.py`, the `get_workflow` method now requires an organization and a `cuid`. It raises a `ValueError` if the organization is not provided.

- The `get_by_target` method now accepts an organization parameter and filters queries using the organization linked to the workflow, ensuring executions are correctly scoped.

- REST API endpoints in `src/backend/routes/ui_workflows.py` now pass `g.current_user_org` to `Workflow.get_workflow`, aligning with the new model requirements.

- Unit tests in `tests/unit/test_workflows.py` have been updated to use the organization parameter for consistency in workflow retrieval.

These changes centralize access at the organization level, improving consistency and preventing mismatches from using user information directly.


<!--- PR #1396: https://github.com/validmind/backend/pull/1396 --->
<!--- Labels: bug, python --->
### Improve Auth0 error handling in onboarding flow (#1396)

When setting up the initial onboarding, selecting a weak password previously caused a backend error without any explanation. Although Auth0 generated a helpful error message, it was not shown to the user. This update ensures that at least one helpful message from Auth0 is now clearly presented to the user.

Bugfix: Improved error handling in the organization onboarding flow.

This PR introduces several functional improvements:

- **Debugging Enhancements**: A new remote debugging configuration is added to the VS Code launch file (`.vscode/launch.json`) to enable attaching a debugger via `debugpy` to the API service running in Docker. The README now includes instructions for using this setup. Docker Compose is updated to expose port 5678 and mount relevant backend volumes. The `docker-entrypoint.sh` script now launches the Python application with `debugpy`, facilitating remote debugging.

- **Auth Error Handling Improvements**: In `src/backend/auth/auth_provider.py`, error handling is enhanced to check for password strength errors. If a 'PasswordStrengthError' is detected in the API response, an error is raised with a new `INVALID_FIELD` code and detailed information. Other errors default to a generic unauthorized error. The route handling in `src/backend/routes/admin/organizations.py` is updated to catch and re-raise `AuthError`.

- **Code and Utility Enhancements**: The JSON encoder in `src/backend/utils/__init__.py` now handles objects with a `to_dict` method, improving custom object serialization. Logging in the generic error handler (`src/backend/errors/handlers.py`) is updated from exception level to error level to reduce excessive stack traces for expected issues.

- **Extended Unit Tests**: A comprehensive set of unit tests for `Auth0AuthProvider` is added in `tests/unit/test_auth0_provider.py`. These tests cover scenarios like handling weak passwords, successful user creation, and other error cases, using mocks to simulate API interactions and validate error signaling and token management.


<!--- PR #1462: https://github.com/validmind/backend/pull/1462 --->
<!--- Labels: bug, python, security --->
### Prevent unauthorized workflow status changes (#1462)

This update enhances security by adding validation to the `PUT /api/v1/statuses-workflows/{id}/status` endpoint. It now prevents users from changing the workflow status of organizations they do not belong to.

This update introduces the `get_status_for_org` static method, streamlining the process of retrieving a status by joining the `StatusesWorkflowStatus` and `StatusesWorkflow` tables using organization and workflow identifiers. This method replaces redundant queries in the edit endpoint, improving data access efficiency. Minor refactoring has enhanced code formatting and readability in block documentation and validation report functions. Unit tests verify the method's handling of both matching and non-matching identifiers.

<!-- ### Changes with no label -->


<!--- PR #1484: https://github.com/validmind/backend/pull/1484 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1484) --->
<!-- No release notes or summary provided. -->


<!--- PR #1417: https://github.com/validmind/backend/pull/1417 --->
<!--- Labels: none --->
### Update deployment workflows to use new `values-new.yaml` format (#1417)

This update modifies deployment workflow configurations in three YAML files: `deploy_aws_secondary.yaml`, `deploy_prod.yaml`, and `deploy_staging.yaml`. The workflows now use the new template file `values-new.yaml` from the `templates/validmind` directory instead of the old `values.yaml`. This ensures deployments utilize the updated configuration settings. The `sed` commands still replace placeholder strings with environment-specific values like site, environment, vault ID, repository, and API SHA, maintaining consistency across deployments.


<!--- PR #1424: https://github.com/validmind/backend/pull/1424 --->
<!--- Labels: none --->
### Ensure `ruff` scans all files to prevent skipped warnings (#1424)

This update enhances code formatting consistency and cleans up lint exception comments. Key changes include: updating the `Makefile` to run `ruff` with `--no-cache` for fresh code analysis, simplifying `# noqa: B950` to `# noqa` in migration scripts, reordering import statements for consistency, and adjusting a test in the object storage service to use the simplified `# noqa` format. These changes improve code clarity without altering functionality.

- Updated the `Makefile` to run `ruff` commands with the `--no-cache` option, ensuring the latest code analysis is used without cached results.

- Simplified verbose `# noqa: B950` markers in migration scripts to `# noqa`, maintaining lint suppression.

- Reordered import statements in some modules for consistency and to address minor dependency ordering issues.

- Adjusted a test in the object storage service to use the simplified `# noqa` format for the KMS key configuration string.

Overall, these changes focus on code formatting and clarity without affecting functionality.


<!--- PR #1436: https://github.com/validmind/backend/pull/1436 --->
<!--- Labels: none --->
<!--- ### Repo Sync repo-sync/9683 (2025-05-05) (#1436) --->
<!-- No release notes or summary provided. -->


<!--- PR #1336: https://github.com/validmind/backend/pull/1336 --->
<!--- Labels: none --->
### Add Keycloak entrypoint to `Dockerfile` (#1336)

This update to the Keycloak service configuration includes two main changes. First, volume mounts for Keycloak configuration files like `realm-export.json`, themes, and `entrypoint.sh` have been removed from the `docker-compose` file. These files are now included directly in the Docker image via the Dockerfile, simplifying deployment. Second, the environment variable `KC_DB_DATABASE` has been changed to `KC_DB_DtATABASE`. Verify this change to ensure it is correct and consistent with downstream components.


<!--- PR #1481: https://github.com/validmind/backend/pull/1481 --->
<!--- Labels: none --->
<!--- ### chore: ensure deploy workflows use correct values (#1481) --->
<!-- No release notes or summary provided. -->


<!--- PR #1492: https://github.com/validmind/backend/pull/1492 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.30.8) (#1492) --->
<!-- No release notes or summary provided. -->


<!--- PR #1495: https://github.com/validmind/backend/pull/1495 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1495) --->
<!-- No release notes or summary provided. -->


<!--- PR #1487: https://github.com/validmind/backend/pull/1487 --->
<!--- Labels: none --->
<!--- ### Cullen/merge staging into prod (#1487) --->
<!-- No release notes or summary provided. -->


<!--- PR #1428: https://github.com/validmind/backend/pull/1428 --->
<!--- Labels: none --->
### Limit concurrency of testing workflow (#1428)

This pull request adds a new configuration block to the GitHub Actions workflow for the Python application. The concurrency settings ensure that only the most recent workflow run remains active by grouping runs by workflow and branch reference. This change cancels any in-progress runs when a new run is triggered, saving CI resources and reducing potential conflicts from concurrent executions.


<!--- PR #1496: https://github.com/validmind/backend/pull/1496 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.30.8) (#1496) --->
<!-- No release notes or summary provided. -->


<!--- PR #1394: https://github.com/validmind/backend/pull/1394 --->
<!--- Labels: none --->
### Replace `Black` with `Ruff` for code formatting (#1394)

This update refactors import statements and adjusts code formatting across the project. Imports in source code, migration scripts, and utility modules have been reordered and grouped to better reflect dependencies. The `Makefile` now uses Ruff instead of Black for formatting, enhancing style consistency and readability. Minor whitespace and line-break adjustments have been made in various files. These changes improve maintainability and clarity without altering functionality.

Key functional changes:

- Standardized and reorganized import ordering in multiple files, including migration scripts, API modules, and utility scripts.
- Updated the `Makefile` to use Ruff for formatting and linting, enhancing style enforcement.
- Cleaned up redundant whitespace and adjusted formatting for inline strings and dictionary keys without changing program logic.

Overall, these improvements streamline the codebase, facilitating easier maintenance and reducing dependency issues without affecting business logic.


<!--- PR #1442: https://github.com/validmind/backend/pull/1442 --->
<!--- Labels: none --->
### Increase worker concurrency (#1442)

This update enhances system performance by increasing worker concurrency.

This pull request increases the worker concurrency for the Celery worker from 4 to 6 in `docker-entrypoint.sh`. This change enables the worker to handle more tasks simultaneously, potentially enhancing performance under load. The rest of the command remains unchanged, ensuring the worker starts with the correct work directory and Celery application context.


<!--- PR #1329: https://github.com/validmind/backend/pull/1329 --->
<!--- Labels: dependencies, python --->
### Update `werkzeug` from version 2.3.8 to 3.0.6 (#1329)

This update changes the `werkzeug` dependency version from `^2.3.0` to `^3.0.6` in the `pyproject.toml` file. The new version may offer bug fixes, performance enhancements, and additional features. Users should verify that this update does not affect application components relying on `werkzeug`, especially those related to routing, request handling, or middleware integration.


<!--- PR #1427: https://github.com/validmind/backend/pull/1427 --->
<!--- Labels: none --->
<!--- ### feat: allow frontend deploys from branches in dev (#1427) --->
<!-- No release notes or summary provided. -->


<!--- PR #1405: https://github.com/validmind/backend/pull/1405 --->
<!--- Labels: none --->
### Trigger workflow when a model attribute changes (#1405)

This update enhances the workflow trigger mechanism and inventory model field update handling. Key improvements include increased Celery worker concurrency from 5 to 6, a new optional `trigger_field_key` column in the workflows table, and updates to the `InventoryModel` update method to return both updated field information and old values. The Workflow model now supports additional trigger types and events, with new helper properties for status checking. Workflow validation methods and API endpoints have been enhanced for better error handling and processing.

- Increased Celery worker concurrency from 5 to 6 in the `Makefile`, potentially improving parallel task processing.

- Added a new migration to introduce the optional column `trigger_field_key` in the workflows table. This field supports triggering workflows based on specific field changes in inventory models.

- Updated the `InventoryModel` update method to return both the updated field information and the old value, allowing further processing by triggering background tasks.

- Expanded the Workflow model:
  - Now supports an additional trigger type and extended its allowed entities and events with a new `InventoryModel.field` type and an `updated` event type.
  - New helper properties (`is_deleted` and `is_enabled`) were added for easier status checking.
  - The workflow serialization method now includes the new `trigger_field_key`.

- Enhanced the workflow validation methods to validate the `trigger_field_key` along with type, entity name, and event type. Validation errors now use a custom `BadRequestError` with more descriptive error messages.

- Updated the API endpoints in the UI routes for workflows and inventory models to pass and process the `trigger_field_key`. When a model field changes, a new Celery task (`on_model_field_change`) is triggered to process workflow executions.

- The `WorkflowManager`'s `start_execution` method now includes type hints and improved documentation. Minor adjustments in test files ensure that date comparisons use timezone-aware datetime objects.

These changes improve the robustness and clarity of the workflow triggering mechanism with extended support for specific field updates in inventory models and refined error handling.


<!--- PR #1483: https://github.com/validmind/backend/pull/1483 --->
<!--- Labels: none --->
### Add `pg_stat_statements` migration script (#1483)

Adding an extension for profiling.

This update adds a migration script to manage the `pg_stat_statements` extension in PostgreSQL databases. The script checks for the extension's existence and creates it if absent. The upgrade function connects to the database, verifies the extension's installation, and conditionally creates it using SQL. It also retrieves and displays the extension's current version. The downgrade function is a placeholder without rollback logic. These changes prevent duplicate installations while ensuring monitoring features are available.


<!--- PR #1491: https://github.com/validmind/backend/pull/1491 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1491) --->
<!-- No release notes or summary provided. -->


<!--- PR #1420: https://github.com/validmind/backend/pull/1420 --->
<!--- Labels: none --->
### Remove `poetry.lock` from Dockerfile build process (#1420)

This update modifies the Dockerfile for the customer-managed environment by removing the `poetry.lock` file from the application directory during the container build process. This change prevents issues related to dependency resolution or outdated lock files from being included in the container. It ensures that the environment is set up with clean dependency management, allowing the project to generate an updated lock file in subsequent steps or during runtime.


<!--- PR #1358: https://github.com/validmind/backend/pull/1358 --->
<!--- Labels: none --->
### Add startup checks for datastores and Keycloak (#1358)

This update improves Docker configuration and startup logic for better service orchestration and dependency management. Key changes include:

- The `Dockerfile` now installs utilities like `jq`, `postgresql-client-15`, and `redis-tools` for enhanced operations and debugging.
  
- The `docker-compose.yaml` file adds a new port mapping (9000) for Keycloak and sets the `KC_HEALTH_ENABLED` environment variable for health checks.

- The `docker-entrypoint.sh` script includes readiness checks for Postgres, Redis, and Keycloak, ensuring services are available before the application starts, with clear logging messages.

- The Keycloak `Dockerfile` now exposes port 9000.

These changes enhance the resilience of container-based deployments by ensuring critical services are healthy before application processes begin.


<!--- PR #1418: https://github.com/validmind/backend/pull/1418 --->
<!--- Labels: none --->
### Allow Keycloak theme to enable local user registration (#1418)

This update introduces two key changes to the Keycloak realm configuration and templates. The self-registration feature is now disabled by setting the `registrationAllowed` flag to `false`, preventing end users from creating accounts via the registration link. The login template conditionally displays the registration link based on the `registrationAllowed` flag. The registration template now includes a debug block for form fields, defines required fields for validation, and renders additional fields only if they are not predefined.

In the Keycloak realm configuration, self-registration is disabled by setting the `registrationAllowed` flag to `false`, preventing account creation via the registration link.

The login and registration FreeMarker templates have been updated. The login template conditionally displays the registration link based on the realm's `registrationAllowed` flag. The registration template includes:

- A debug block for form fields, hidden by default with `display: none;`.
- Explicitly defined required fields: username, email, first name, last name, password, and password confirmation.
- Additional fields are rendered only if they are not among the required fields.

These changes enhance control over user self-registration and improve the registration form's structure and debugging capabilities.


<!--- PR #1439: https://github.com/validmind/backend/pull/1439 --->
<!--- Labels: none --->
### Support exporting comments for documentation and monitoring reports, and fix database query (#1439)

This update introduces two key changes:

- You can now export comments in both documentation and monitoring reports.
- A database query issue related to exporting comments has been fixed.

These enhancements allow users to view comments more effectively.

This update improves the management and display of user comments in inventory model reports. Key enhancements include:

- The `get_user_comments_by_model_id` method in the Annotation model now accepts a `content_type` parameter, enabling filtering and joining with the Metadata table to fetch comments based on the report type.

- A new helper function, `render_comment_fragments`, centralizes the logic for rendering comment fragments. It queries comments with the correct filters, formats comment text by stripping HTML tags, and handles nullable fields like `context` and `created_at`. The output includes the context only when present.

- Report serialization functions (`serialize_documentation_report` and `serialize_monitoring_report`) now support an `include_comments` option. When enabled, reports append a 'Comments' section in both the template structure and the list of rendered fragments.

- Unit tests have been updated to validate the new functionality, covering scenarios such as:
  - Comment rendering with and without the `include_comments` flag.
  - Filtering out irrelevant comments, such as those with a content type not matching the report type or unresolved annotations.
  - Ensuring the helper function `_create_annotation_helper` supports creating annotations with the enhanced structure.

These changes enhance the robustness and flexibility of the comment handling mechanism in the backend, allowing for better report customization and filtering.


<!--- PR #1425: https://github.com/validmind/backend/pull/1425 --->
<!--- Labels: none --->
<!--- ### fix: typo in name of action in release_cmvm.yaml (#1425) --->
<!-- No release notes or summary provided. -->


<!--- PR #1440: https://github.com/validmind/backend/pull/1440 --->
<!--- Labels: none --->
### Fix validation of trigger type during updates (#1440)

This update resolves an issue where a workflow `PUT` request would return an error during trigger type validation. The error occurred because the workflow mistakenly identified itself as an existing workflow with the same trigger type.

This update improves workflow validation by adding an `update_cuid` parameter to the `validate_trigger_type` method, ensuring the current workflow is excluded from duplicate checks during updates. The query now filters out the workflow with the `cuid` specified by `update_cuid`, preventing false positives. In `src/backend/routes/ui_workflows.py`, exception handling is refined by re-raising `BadRequestError` for clearer error differentiation. These changes enhance duplication checks and error handling in updates.

The workflow validation logic in the backend now includes an `update_cuid` parameter in the `validate_trigger_type` method. This ensures that when updating a workflow, the current record is excluded from duplicate checks based on `cuid`.

Query filtering for existing workflows now excludes the workflow with the `cuid` provided by `update_cuid`, preventing false positives after field validation.

In `src/backend/routes/ui_workflows.py`, exception handling is improved. A `BadRequestError` is explicitly re-raised for clearer error propagation, distinguishing it from general exceptions, which are wrapped in an `InternalServerError`.

These changes enhance update logic, ensuring correct duplication checks and appropriate error handling during updates.


<!--- PR #1454: https://github.com/validmind/backend/pull/1454 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1454) --->
<!-- No release notes or summary provided. -->


<!--- PR #1485: https://github.com/validmind/backend/pull/1485 --->
<!--- Labels: none --->
### Revert unauthorized access fix for inventory model assets (#1485)

This update modifies the system's behavior without introducing any breaking changes. There are no changes to the frontend interface, so no screenshots or videos are included.

This update simplifies the authentication process by removing the fallback logic for token extraction from cookies. The functions `get_token_auth_cookie` and `get_token_auth_header_or_cookie` have been eliminated. Authentication now strictly uses the token provided in the header via `get_token_auth_header`.

In the UI assets proxy endpoint, the `requires_auth` decorator and organization access check logic have been removed. The endpoint now directly retrieves a pre-signed URL from object storage without validating the user's organization, potentially affecting previous authorization checks for asset access.


<!--- PR #1426: https://github.com/validmind/backend/pull/1426 --->
<!--- Labels: none --->
### Update deployment workflows to use `values-new.yaml` for AWS environments (#1426)

This pull request updates the deployment workflow configurations for AWS secondary, production, and staging environments. The workflows now copy the new template file `values-new.yaml` into the manifests directory instead of the old `values.yaml`. The `sed` commands for template substitutions remain unchanged. This update ensures deployments use the latest configuration template to meet newer deployment requirements.


<!--- PR #1411: https://github.com/validmind/backend/pull/1411 --->
<!--- Labels: none --->
<!--- ### Clarify keycloak deployment docs (#1411) --->
<!-- No release notes or summary provided. -->


<!--- PR #1455: https://github.com/validmind/backend/pull/1455 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.30.8) (#1455) --->
<!-- No release notes or summary provided. -->


<!--- PR #1465: https://github.com/validmind/backend/pull/1465 --->
<!--- Labels: security --->
### Validate owners list against selected group (#1465)

A critical vulnerability has been fixed. Previously, users could be added to the owners list and access personally identifiable information (PII) without verification of their organizational affiliation. This update now ensures that users can only access data from their own organization and group, thereby protecting PII.

<!-- List any breaking changes -->

<!-- Add screenshots or videos showing before/after -->

This update enhances user membership and ownership handling in the application:

- Removed the unused `flask_migrate` import from the backend API module, optimizing project dependencies.
  
- Repositioned the `RolePermission` import in the authentication module for clearer dependency management.

- Added a new `is_member` method to the `Group` class to centralize and clarify group membership checks.

- Improved the UI inventory models route by ensuring users are verified as group members before being added as owners or developers, enhancing ownership assignment robustness.


<!--- PR #1445: https://github.com/validmind/backend/pull/1445 --->
<!--- Labels: none --->
### Ensure all model roles are considered when evaluating membership (#1445)

This update enhances the authorization logic in `src/backend/auth/auth.py` to consider all roles a user holds for a model, rather than just one. Previously, only the first matching role was considered, potentially leading to insufficient access. The new function `get_all_model_roles_for_user` aggregates all roles and associated content types, ensuring comprehensive permissions. The function `get_content_type_for_role` is now `get_content_type_for_roles`, accommodating multiple roles. This change may require updates to any systems assuming single-role logic.

The model membership and content type authorization logic now aggregates all roles a user has for a model, ensuring users with multiple roles receive all appropriate permissions. This prevents authorization errors and improves system flexibility. If any systems assumed single-role logic, they may need adjustments. The function `get_content_type_for_role` has been replaced by `get_content_type_for_roles`, which expects a list of roles. Consider updating documentation and services referencing the old logic.

This update enhances the authorization flow and role-based permissions in the backend, introducing a multi-role approach and refining content type resolution and authorization chains. Users can now have multiple roles, with `get_all_model_roles_for_user` returning all roles for a specific inventory model. Content type resolution iterates over user roles, filtering by permissions, and raises an `AuthError` for conflicting permissions. The `OrganizationRole` class now includes a `has_permission` method, and `RolePermission` features a mapping for permission-to-content type associations.

- Multi-Role Approach:
  - The single-role lookup is replaced with a multi-role approach. The function `get_model_role_for_user` is now `get_all_model_roles_for_user`, returning a list of all roles associated with a user for a specific inventory model. This supports scenarios where a user might have multiple roles.

- Content Type Resolution:
  - The function `get_content_type_for_roles` now iterates over all roles assigned to the user, filtering by their permissions using a new mapping (`RolePermission.PERMISSION_TO_CONTENT_TYPE`). This allows multiple documentation types to be considered based on the specific permissions granted through each role.
  - The default setting of the content type in the decorated function leverages these permissions. Additional logic checks for conflicting states, such as when a user has properties of both developer and validator. An `AuthError` is raised if both permissions (`update_doc` and `update_vr`) are found simultaneously.

- Authorization Chain Refinement:
  - Adjustments are made in the decorator and in `ensure_model_membership` to work with the new multi-role structure. The membership check now validates authorized content types against the list of user roles rather than a singular role.

- Data Model Enhancements:
  - A new helper method, `has_permission`, is added in the `OrganizationRole` class to abstract permission checking.
  - The `RolePermission` model now includes a mapping (`PERMISSION_TO_CONTENT_TYPE`) that links permission action IDs to relevant content types, with plans to expand this mapping as support for multiple document types grows.

These changes aim to improve the expressiveness and flexibility of the role-based permission system, enhancing the security and integrity of model access and modification operations within the application.


<!--- PR #1379: https://github.com/validmind/backend/pull/1379 --->
<!--- Labels: dependencies, go --->
### Bump `golang.org/x/net` from 0.34.0 to 0.38.0 in `casbin-server` (#1379)

This update upgrades the Go toolchain from `go1.23.1` to `go1.24.1` and updates several indirect dependencies by modifying the `go.mod` and `go.sum` files. Modules such as `golang.org/x/crypto`, `golang.org/x/net`, `golang.org/x/sys`, and `golang.org/x/text` are also updated. These changes ensure the project remains aligned with the latest Go ecosystem features and improvements, incorporating potential fixes and performance enhancements. The update does not alter any functional business logic.


<!--- PR #1486: https://github.com/validmind/backend/pull/1486 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.30.8) (#1486) --->
<!-- No release notes or summary provided. -->


<!--- PR #1408: https://github.com/validmind/backend/pull/1408 --->
<!--- Labels: none --->
### Added `global_id` to template serialization (#1408)

This update improves the backend template serialization process by adding a `global_id` key to the payload generated by the `serialize_template` function. The `global_id` is derived from the `base_template` property of the template object and is included alongside other metadata like `template_cuid`, `template`, and `created_at`. This change enhances traceability and consistency across different system components using these template definitions.


<!--- PR #1466: https://github.com/validmind/backend/pull/1466 --->
<!--- Labels: none --->
### Remove legacy logic for implicit text blocks (#1466)

This update refines the API endpoint handling of the `contents` field in UI inventory models. Previously, if a section lacked a `contents` key, the code defaulted to a list with a dictionary containing a `content_id` set to the section ID and a `content_type` of `text`. The new logic uses the dictionary `get()` method to retrieve `contents`, defaulting to an empty list if the key is absent. This change is applied consistently across both endpoints processing section data.

This simplification reduces unnecessary code and clarifies expected behavior when `contents` is missing. API users should ensure that returning an empty list, instead of a list with a default content block, does not cause unintended effects.


<!--- PR #1403: https://github.com/validmind/backend/pull/1403 --->
<!--- Labels: none --->
### Improve template handling with flattening enhancements (#1403)

This update improves template handling with key enhancements:

- The installation script now includes a `template_type` parameter in the `upsert` function, improving template differentiation.

- Validation functions have been added to backend database models for templates and versions, ensuring proper data processing. These use the new `flatten_sections` utility to convert nested structures into a flat, JSON-safe format.

- New utility functions, `extract_clean_section` and `flatten_sections`, clean and flatten nested sections for easier metadata storage and processing.

- Unit tests have been expanded to verify the new flattening functionality, ensuring correct handling of nested sections and updated structures.


<!--- PR #1482: https://github.com/validmind/backend/pull/1482 --->
<!--- Labels: none --->
### Prevent admins from modifying staff roles (#1482)

Admins can no longer modify staff roles using the `PATCH /api/v1/roles/<protected_role_id>/permissions` endpoint. This change addresses a potential security vulnerability.

This update refines the role management endpoints in the backend, focusing on consistency and security. Key changes include:

- Consistent Naming: The variable `orgRole` is now `org_role` in both GET and PATCH endpoints, adhering to snake_case conventions for better readability.

- Enhanced Role Protection: The PATCH endpoint now includes a check to prevent changes to roles marked as `staff`, similar to the existing restriction for `admin` roles, ensuring these roles remain immutable.

- Minor Refactoring: Systematic renaming and logic adjustments enhance consistency and enforce role-based restrictions.


<!--- PR #1493: https://github.com/validmind/backend/pull/1493 --->
<!--- Labels: none --->
### Remove `-m` flag from entrypoint without module (#1493)

This update does not introduce any breaking changes.

No visual changes were made, so screenshots or videos are not applicable.

This PR updates the startup command for the API service in the Docker entrypoint script. Previously, the command used the Python module flag `-m` with a file path, which might not have worked as expected. The updated command removes the `-m` flag and directly executes the script file using `ddtrace-run`. This change ensures the API service starts correctly, utilizing `ddtrace` for instrumentation as intended.


<!--- PR #1475: https://github.com/validmind/backend/pull/1475 --->
<!--- Labels: none --->
### Enhance template retrieval logic for improved data integrity and security (#1475)

This update does not alter functionality or behavior. There are no changes to document regarding comparisons, breaking changes, or visual updates.

This update includes two main changes: improved code readability and enhanced template retrieval logic. The `SQLALCHEMY_MAX_OVERFLOW` setting in `src/backend/api.py` has been reformatted for better readability without altering functionality. In `src/backend/routes/ui_templates.py`, the template retrieval logic now filters templates by the user's organization, enhancing data integrity and security. Additionally, minor import reordering and cleanup in `src/backend/routes/ui_assets_proxy.py` improve code organization.

This PR introduces two primary changes:

- In the backend API configuration (`src/backend/api.py`), the assignment of the `SQLALCHEMY_MAX_OVERFLOW` setting has been reformatted to improve code readability. The functionality remains unchanged, but the code style now aligns with other multiline assignments.

- The main functional enhancement is in the template retrieval logic (`src/backend/routes/ui_templates.py`). The query now filters based on the current user's organization (using `g.current_user_org.id`), ensuring that users can only access templates that belong to their own organization. This adjustment enhances both data integrity and security.

Minor import reordering and cleanup in `src/backend/routes/ui_assets_proxy.py` have also been performed, improving overall code organization and clarity.


<!--- PR #1490: https://github.com/validmind/backend/pull/1490 --->
<!--- Labels: none --->
### Remove `debugpy` from API service startup process (#1490)

This update enhances the system's functionality by addressing previous limitations, improving the overall user experience. There are no breaking changes in this update. Screenshots or videos are not applicable.

This update removes the `debugpy` integration from the API service startup command in the `docker-entrypoint.sh` file. Previously, the container started the API service with `debugpy` enabled, listening on `0.0.0.0:5678`. Now, the command directly starts the API service using `ddtrace-run` without invoking `debugpy`. This change simplifies the startup process for production deployments where remote debugging is not needed.


<!--- PR #1464: https://github.com/validmind/backend/pull/1464 --->
<!--- Labels: none --->
### Unauthorized access to inventory model documents via insecure direct object reference (IDOR) (#1464)

This update improves security for the UI assets proxy endpoint by requiring authentication, enforcing organization-level access control, and validating asset ownership. Authentication tokens can now be retrieved from cookies if the `Authorization` header is absent. These changes address a vulnerability that allowed unauthorized access to private assets from other organizations, ensuring users can only access assets within their own organization, thereby safeguarding sensitive data.

The update includes:

- Mandatory authentication for the previously unprotected endpoint.
- Organization-level access control to restrict asset access to users' own organizations.
- Support for retrieving authentication tokens from cookies as a fallback.
- Validation to ensure requested assets belong to the user's organization.

These enhancements strengthen the application's security by ensuring proper authentication and authorization for asset access.

This update enhances the backend's authentication and authorization logic by introducing new methods for token retrieval and enforcing stricter access controls. 

- The `get_token_auth_cookie` function retrieves an access token from an authorization cookie if not found in the headers.

- The `get_token_auth_header_or_cookie` function combines header and cookie methods for token retrieval, replacing the previous `get_token_auth_header` method. This ensures flexibility by allowing a fallback from header to cookie.

- An authentication decorator (`@requires_auth()`) is added to the asset serving endpoint in the UI Assets Proxy, ensuring API access is restricted to authenticated users.

- The endpoint now includes an authorization check to verify that the asset key's organization identifier matches the current user's organization. If there is a mismatch, an unauthorized error is raised.

These changes improve the authentication mechanism by supporting multiple token sources and ensuring assets are accessed only within the correct organizational context.


# Frontend
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/frontend/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/frontend/compare/32c1fd2869b3a69d9ed75be917d9be0589822872...32c1fd2869b3a69d9ed75be917d9be0589822872 --->

## Enhancements


<!--- PR #1347: https://github.com/validmind/frontend/pull/1347 --->
<!--- Labels: enhancement --->
### Trigger workflow on field change (#1347)

A new trigger type, "On Model Field Change," is now available when creating a workflow. This feature lets you select an inventory model field to monitor for changes, initiating workflow execution when a change is detected.

This update enhances the workflow management component and its API service, improving flexibility and user interface dynamics. Key changes include API adjustments for URL formatting and a new optional `triggerFieldKey` parameter in the `PostWorkflow` API call. The Workflow Modal now supports a new trigger type, `MODEL_FIELD_CHANGE`, allowing users to select specific fields to trigger workflows. Additionally, model enumerations have been updated to support these changes, ensuring workflows handle both field-based and traditional events effectively.

- **API Changes:**

  - The `GET` endpoint now correctly formats the URL string by removing an unnecessary line break.
  
  - Added an optional `triggerFieldKey` parameter to the `PostWorkflow` API call for custom trigger field keys.

- **Workflow Modal Enhancements:**

  - Imports additional context and utility methods, using `UsersContext` and `getSchemaPropertyByKey` to build a list of available fields.
  
  - Introduces a `MODEL_FIELD_CHANGE` trigger type, displaying a dropdown for field selection.
  
  - Supports dynamic behavior based on the selected trigger type, capturing and passing `field_name` to the API.
  
  - Resets error states upon modal open/close and adjusts entity names and event types based on the trigger.

- **Model Updates:**

  - Extended enumerations for `TriggerType`, `EntityName`, and `EntityEventType` to support the `MODEL_FIELD_CHANGE` trigger.


<!--- PR #1339: https://github.com/validmind/frontend/pull/1339 --->
<!--- Labels: enhancement --->
### Ability to delete a workflow (#1339)

This update introduces a new feature for 'soft-deleting' workflows. When a workflow is deleted, users can continue any ongoing executions that are using the deleted workflow. However, the workflow will be removed from the active workflows listing, and future executions will be prevented from running.

This update enables workflow deletion while checking for dependencies with associated models. 

API Enhancements:

- `GetWorkflowModelDependenciesCount` retrieves the number of models dependent on a workflow, warning users of potential impacts before deletion.
- `DeleteWorkflow` sends a DELETE request to remove a specified workflow.

New UI Components:

- `WorkflowDeleteModal` offers a confirmation dialog for deleting workflows, displaying warnings based on dependency counts and handling success and error notifications.
- `ExecutionDetails` alerts users if a workflow is deleted, clarifying that current executions continue despite deprecation.
- `WorkflowList` includes a delete option, triggering dependency checks and opening the delete modal for safer workflow deletion.

Model Update:

- A `deleted_at` field in the Workflow model tracks when a workflow is deleted, allowing the UI to render warnings conditionally.

These changes enhance workflow deletion by preventing accidental removal when dependencies exist and improving user feedback during the process.


<!--- PR #1328: https://github.com/validmind/frontend/pull/1328 --->
<!--- Labels: enhancement --->
### Implement improved template swap/merge experience (#1328)

A new feature has been added that allows users to update documents using a template. This feature enables merging a template into an existing document, with options to selectively add, ignore, delete, or retain changes.

This update introduces significant enhancements and UI improvements for managing document templates:

- **Dependency Updates**: The project version is now 1.33.4. New dependencies, `@minoru/react-dnd-treeview` and `react-dnd`, support advanced drag-and-drop template manipulation.

- **API Enhancements**: The `SwapTemplate` function is replaced by `CreateAndSwapTemplate`, combining template creation and swapping into one API call for better clarity and reusability.

- **UI Modifications and Component Updates**: UI components like `AddFindingModal` and `AttributesRailDocumentOverview` have been refined. Changes include updated trigger labels, enhanced layout, and integration of menu components for viewing or updating templates. Chakra UI components are now consistently used, with added modals and menus for template operations.

- **Swap Template Modal**: A new `SwapTemplateModal` component offers a drag-and-drop tree view for comparing active templates with selected versions. Users can mark sections with statuses like ADD, KEEP, IGNORE, or DELETE, and the UI helps resolve invalid configurations before applying changes.

- **Template Model Adjustments**: The template model now has an optional parent section and a `global_id` field to support new swapping logic.

These changes aim to streamline and enhance the management and swapping of document templates within the application.


<!--- PR #1351: https://github.com/validmind/frontend/pull/1351 --->
<!--- Labels: enhancement, refactor --->
### Approval process notes added to activity log (#1351)

The activity log now includes notes on workflow approval step voters.

This update enhances the UI with functional improvements and code refactoring, focusing on user interaction and maintainability. The `EventRowLayout` component now includes collapsible content for additional details like vote notes, toggled by an `IconButton`. New components for workflow approvals include `ApprovalActionButtons`, `ApprovalHeader`, `ApprovalVoterCard`, `VoteDetailsModal`, and `VoterStatusColumn`, each designed to streamline the approval process. Redundant code has been replaced with reusable components, enhancing modularity and readability.

In the `EventRowLayout` component, collapsible content has been implemented to display additional details, such as vote notes, when available. An `IconButton` toggles a `Collapse` element, with the display icon switching between a downward and upward chevron accordingly.

New components related to workflow approvals have been added:

- `ApprovalActionButtons`: Provides a consistent button group for approving or rejecting votes with appropriate color schemes and iconography.
- `ApprovalHeader`: Displays the approval title and message in a more structured layout.
- `ApprovalVoterCard`: Renders voter information with an optional popover for vote notes, enhancing usability when notes are present.
- `VoteDetailsModal`: Offers a modal for detailed viewing of vote notes in a read-only textarea.
- `VoterStatusColumn` and associated constants: These aid in organizing and displaying voter statuses in columns based on their vote state, using a uniform look for all statuses.

Some redundant code and inline commented sections have been cleaned up and replaced with reusable components, improving overall maintainability and readability.

Overall, this update increases the modularity of the code and offers a richer, more interactive user interface for event and workflow approval processes.


<!--- PR #1393: https://github.com/validmind/frontend/pull/1393 --->
<!--- Labels: enhancement --->
### Add workflow-run step (#1393)

A new "Run Workflow" step has been introduced, allowing users to target and execute any manually triggered workflow.

Styling updates have been applied to workflow node boxes to ensure consistent coloring, outlines, and selection, regardless of zoom level or configuration status.

A breaking change is included, as noted in the related backend pull request.

This PR introduces key enhancements and bug fixes, focusing on UI updates, API improvements, and new features for workflows.

- UI & Spinner Update: Spinners across the application now use theme defaults for consistent styling.

- Workflow API Enhancements: The `GetWorkflows` function now supports pagination and filtering by trigger type. A new `GetWorkflowDependencies` function helps identify dependencies, aiding in workflow deletion decisions.

- Workflow Deletion Modal Improvements: The delete modal now shows dependency warnings and disables the delete button if dependencies exist.

- New Run Workflow Feature: A new node allows users to trigger workflows, integrated with a configurable UI panel.

- UI Consistency & Debug Enhancements: Minor UI tweaks and inline inspection popovers have been added to improve debugging and workflow building.


<!--- PR #1359: https://github.com/validmind/frontend/pull/1359 --->
<!--- Labels: enhancement, good first issue, javascript --->
### Add ability to export comments in validation reports (#1359)

We have added the ability to export comments from validation reports. By default, this feature is turned off, similar to existing flags. A new checkbox in the UI allows users to choose whether to include comments in the validation report. When selected, comments will be included in the appendix of the exported document.

This update corresponds to a backend change and enhances the functionality of validation report exports by providing more comprehensive documentation. The new "Include comments left on document" checkbox is visible in the UI.

This update enhances the report download feature by introducing the `includeComments` option. In `API.ts`, the `DownloadReport` function now accepts an optional boolean parameter to include comments in the report data. On the front end, the `DownloadValidationReportModal` component includes a checkbox for users to toggle this option. The user interface is updated to manage this new state, and the API call is adjusted to pass the `include_comments` parameter, ensuring comments are included when specified.


<!--- PR #1371: https://github.com/validmind/frontend/pull/1371 --->
<!--- Labels: enhancement, good first issue, javascript --->
### Add ability to export comments in monitoring and documentation reports (#1371)

We have added the ability to export comments from monitoring and documentation reports. By default, this feature is turned off, similar to existing export options. Customers can now choose to view comments in these reports. When exporting, comments are included at the end of the document, and only resolved comments are exported.

This update enhances the UI and configuration options in export modals for Model Documentation, Validation Report, and Monitoring Report, improving the export experience. Key changes include a new "Include comments" checkbox, UI improvements with consistent layout components, integration of the `MoreInfoPopOver` for contextual help, and accessibility enhancements. These changes simplify the export process by focusing on a single checkbox option for comments inclusion.

Key changes include:

- A new "Include comments" checkbox in each modal allows users to control whether comments are included in the exported file. This option is managed with a new state variable and is passed to the API call accordingly.

- UI improvements have been made by replacing certain layout components with more consistent alternatives, such as using `HStack` for grouping text and popover components. This enhances alignment and spacing for a more coherent user experience.

- The `MoreInfoPopOver` component is now integrated directly within the header or section text to provide users with contextual help regarding document exporting.

- Minor adjustments to spacing and `aria-label` attributes have been added to buttons, specifically the download buttons, to improve accessibility.

- Overall, these changes streamline the configuration experience for generating export documents, omitting redundant file format selection in favor of a single, focused checkbox option for comments inclusion.


<!--- PR #1372: https://github.com/validmind/frontend/pull/1372 --->
<!--- Labels: enhancement --->
### Allow deletion of roles and stakeholder types (#1372)

This update introduces delete buttons and confirmation dialogs to both list and detail pages for roles and stakeholder types. The roles detail page is adapted for stakeholder types with minor differences. Group deletion now uses a reusable component with improved styling for consistency. An `API.ts` call has been added for deleting roles, which also supports stakeholder type deletions. Additionally, a stakeholder type settings menu item has been included as outlined in the [documentation](https://docs.validmind.com/guide/configuration/manage-model-stakeholder-types.html).

This update enhances role deletion and confirmation dialogs in the application, ensuring a consistent and informed user experience. 

- A new API method, `DeleteRole`, facilitates role deletion via an Axios DELETE endpoint.
  
- The `DeleteConfirmationAlert` component standardizes the confirmation process across multiple pages, including Group, RoleDetails, Roles, and Stakeholders, with custom messages.

- Components like `DangerMenuItem` now have improved styling to highlight destructive actions.

- The RoleDetails page supports role and stakeholder type deletion with detailed impact messages.

- Roles and Stakeholders pages enable role deletion through a contextual menu, using react-query mutations to update data immediately upon successful deletion.

- Minor UI copy changes in `AddRoleModal` clarify the distinction between adding a new role and a stakeholder type.

These improvements ensure consistent deletion flows, helping users make informed decisions when performing destructive actions.

## Bug fixes


<!--- PR #1336: https://github.com/validmind/frontend/pull/1336 --->
<!--- Labels: bug --->
### Improve Auth0 error handling for clearer user feedback (#1336)

This update enhances error handling by displaying informative error messages from the backend instead of just error codes. If no specific message is available, the default message will still be shown. Additionally, a bug fix improves error handling during the organization onboarding process.

This update improves error handling in the `BootstrapForm` component by prioritizing detailed error messages from the API response (`error.response?.data?.message`) over generic messages. This enhancement provides clearer feedback to users during organization creation failures. The selected error message is stored in a local variable (`errorMessage`) and used consistently in both inline error displays and toast notifications, ensuring more effective troubleshooting and user guidance.


<!--- PR #1361: https://github.com/validmind/frontend/pull/1361 --->
<!--- Labels: bug --->
### Refactor menu rendering in `BlockExplorer` to enhance flexibility and reusability (#1361)

Documentation sections will no longer include default text blocks. Instead, users will see an empty state prompting them to "Add New Block." Additionally, a bug has been fixed where some sections were not being deleted.

This update refactors the menu rendering logic in the `BlockExplorer` component to enhance flexibility and reusability. Key changes include:

- A new `MenuWrapper` component consolidates menu display logic with `DocumentBlockModal` configuration, reducing duplication as the menu is used in multiple places within `BlockExplorer`.

- An optional `customRender` property is added to `BlockExplorerProps`. When provided, `BlockExplorer` uses the `customRender` method within `MenuWrapper`, allowing for customized UI behavior, such as an empty state display with an "Add New Block" button.

- `DocumentationPage` now utilizes the `customRender` feature of `BlockExplorer`, offering a cleaner, context-sensitive empty state where users are prompted to start building the section. The `MenuButton` triggers focus via the `setIsFocused` callback.

- Minor behavior changes include modifying the `getInitialSectionContents` function to return an empty array instead of a default content block, ensuring empty sections are truly empty when appropriate.

These changes improve modularity, reduce duplication, and give developers more control over block and menu rendering within the application.

<!-- ### Changes with no label -->


<!--- PR #1412: https://github.com/validmind/frontend/pull/1412 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.34.4) (#1412) --->
<!-- No release notes or summary provided. -->


<!--- PR #1404: https://github.com/validmind/frontend/pull/1404 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.34.4) (#1404) --->
<!-- No release notes or summary provided. -->


<!--- PR #1391: https://github.com/validmind/frontend/pull/1391 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.34.2) (#1391) --->
<!-- No release notes or summary provided. -->


<!--- PR #1364: https://github.com/validmind/frontend/pull/1364 --->
<!--- Labels: none --->
<!--- ### Repo Sync repo-sync/9683 (2025-05-05) (#1364) --->
<!-- No release notes or summary provided. -->


<!--- PR #1389: https://github.com/validmind/frontend/pull/1389 --->
<!--- Labels: none --->
<!--- ### Merge Staging hotfixes into Main (staging-1.33.3-to-main) (#1389) --->
<!-- No release notes or summary provided. -->


<!--- PR #1398: https://github.com/validmind/frontend/pull/1398 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.34.4) (#1398) --->
<!-- No release notes or summary provided. -->


<!--- PR #1401: https://github.com/validmind/frontend/pull/1401 --->
<!--- Labels: none --->
<!--- ### Hotfix: Fixed cookie settings to work with local and deployed environments. (#1401) --->
<!-- No release notes or summary provided. -->


<!--- PR #1400: https://github.com/validmind/frontend/pull/1400 --->
<!--- Labels: none --->
<!--- ### Merge Staging into Prod (prod-1.34.4) (#1400) --->
<!-- No release notes or summary provided. -->


<!--- PR #1390: https://github.com/validmind/frontend/pull/1390 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.34.2) (#1390) --->
<!-- No release notes or summary provided. -->


<!--- PR #1411: https://github.com/validmind/frontend/pull/1411 --->
<!--- Labels: none --->
<!--- ### Merge Main into Staging (staging-1.34.4) (#1411) --->
<!-- No release notes or summary provided. -->


<!--- PR #1354: https://github.com/validmind/frontend/pull/1354 --->
<!--- Labels: none --->
<!--- ### chore: sync pr template from backend (#1354) --->
<!-- No release notes or summary provided. -->


<!--- PR #1392: https://github.com/validmind/frontend/pull/1392 --->
<!--- Labels: none --->
### Set a cookie with the access token value (#1392)

This update adds support for cookie-based authentication, allowing access to assets without relying solely on `Authorization` headers. Previously, assets embedded in HTML were inaccessible due to the inability of HTML `img` tags to set headers. Now, the system first tries the `Authorization` header for authentication and, if unsuccessful, uses the `authToken` cookie. This ensures authenticated users can access assets in HTML contexts. The update also enhances security by enforcing organization-level access control, preventing unauthorized access to assets.

This update enhances the `MainApp` component by setting an authentication token as a cookie when an access token is available, allowing asset requests to verify user authentication via the cookie. Additionally, `onSuccess` and event handler callbacks have been refactored for improved readability, and minor code formatting adjustments have been made to standardize styling in role mapping and JSX routing components.

- A new feature sets an authentication token as a cookie when an access token is present, allowing asset requests to verify user authentication through the cookie.

- `OnSuccess` and event handler callbacks have been refactored to consistently wrap arrow function parameters in parentheses, enhancing readability and consistency.

- Minor refactoring standardizes code formatting in role mapping and JSX routing components without altering functionality.

Overall, the main functional enhancement is the injection of the auth token as a cookie, alongside style consistency improvements.


<!--- PR #1402: https://github.com/validmind/frontend/pull/1402 --->
<!--- Labels: none --->
### Safely use `dangerouslySetInnerHTML` with HTML sanitization (#1402)

The DOMPurify library has been added to sanitize HTML content before using `dangerouslySetInnerHTML` in React components, enhancing security by preventing Cross-Site Scripting (XSS) attacks. This update ensures all HTML is sanitized through a centralized utility function before rendering. DOMPurify version 3.2.5 is implemented, with the `sanitizeHtml` utility function configured to allow the "target" attribute on links while sanitizing other potentially dangerous HTML content.

This update improves security by integrating DOMPurify to sanitize HTML content before rendering with React's `dangerouslySetInnerHTML`. Key changes include:

- Adding DOMPurify to `package.json` and `package-lock.json` for HTML sanitization.
- Introducing a `sanitizeHtml` utility function in the utils module, wrapping `DOMPurify.sanitize`.
- Updating components like CommandPalette, DocumentChecker, and others to sanitize HTML content, preventing XSS attacks.
- Implementing minor code formatting improvements for consistency.

These enhancements ensure safer rendering of dynamic HTML content.


# Agents
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/agents/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/agents/compare/b86ed7335b2cdc8fda7641be202a3cedc32211ba...b86ed7335b2cdc8fda7641be202a3cedc32211ba --->

<!-- ### Changes with no label -->


<!--- PR #20: https://github.com/validmind/agents/pull/20 --->
<!--- Labels: none --->
<!--- ### Repo Sync repo-sync/9683 (2025-05-05) (#20) --->
<!-- No release notes or summary provided. -->


<!--- PR #22: https://github.com/validmind/agents/pull/22 --->
<!--- Labels: none --->
<!--- ### Merge Main into Prod (prod-19097) (#22) --->
<!-- No release notes or summary provided. -->


<!--- PR #26: https://github.com/validmind/agents/pull/26 --->
<!--- Labels: none --->
<!--- ### Merge Main into Prod (prod-11385) (#26) --->
<!-- No release notes or summary provided. -->


<!--- PR #3: https://github.com/validmind/agents/pull/3 --->
<!--- Labels: none --->
### Implement code explainer agents (#3)

To use the Code Explainer, follow this example:

```python
from IPython.display import Markdown, display
from agents import code_explainer

with open("binary_classifier_code.py") as f:
    code_content = f.read()

state = {
    "inputs": {
        "additional_instructions": "Preprocessing module for binary classification",
        "source_code": code_content,
    },
    "output": "",
}

state = code_explainer.invoke(state)
display(display(Markdown(state["output"])))
```

The demo notebook is available at `notebooks/code_explainer.ipynb`.


# Documentation
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/documentation/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/documentation/compare/01f652d63c5c2897688a76ad8ca89ea50973c492...01f652d63c5c2897688a76ad8ca89ea50973c492 --->



<!--- PR #693: https://github.com/validmind/documentation/pull/693 --->
<!--- Labels: documentation --->
### Add missing `Export ongoing monitoring document` section to docs (#693)

This update adds a feature to the documentation, enabling users to export ongoing monitoring documentation for models. The new section provides step-by-step instructions for navigating the user interface to perform this export. Users should:

- Click `Inventory` in the left sidebar.
- Select a model or use filters/search to locate a model.
- Click `Ongoing Monitoring` in the model's sidebar.
- Click `Export Document` in the right sidebar.
- Download the file locally by clicking `Download File`.

This enhancement aims to improve usability by providing clear instructions for exporting ongoing monitoring reports.


<!--- PR #707: https://github.com/validmind/documentation/pull/707 --->
<!--- Labels: documentation --->
### Updated content block features in documentation (#707)

The documentation has been reorganized to enhance clarity and usability. Guides related to templates and reusable text blocks, applicable to model documentation, validation reports, and ongoing monitoring, have been moved to a new sub-section. Broken links have been fixed, and aliases applied to old URLs. A new page details the block library feature, offering a comprehensive guide on managing text blocks. Updates reflect changes in the user interface, including content block types and the new chat interface for generating text with AI. The test-driven block menu and metric over time block menu user experiences have been updated. Documentation on templates within the ValidMind Platform has been expanded, with guides now available under the **Guides** in the **templates** section.

This pull request reorganizes documentation template paths by relocating them from the `model-documentation` directory to a new `templates` directory. This update impacts several files, including configuration files, guides, and release notes. Additionally, it enhances the content block management system, enabling improved organization and reuse of text blocks. New features include managing a library of reusable text blocks, configuring test result displays, and enhancing the user interface for adding and removing content blocks.


<!--- PR #681: https://github.com/validmind/documentation/pull/681 --->
<!--- Labels: documentation, highlight --->
### Updated Developer Fundamentals training (#681)

The Developer Fundamentals course has been updated for improved clarity and comprehensiveness, featuring revised login instructions, module learning outcomes, and summaries. Courses have been tested for accurate instructions and timing. A workaround for the `Copy snippet to clipboard` slide addresses a CORS-type error by using `allow="clipboard-read; clipboard-write"`. The layout now uses a simple two-column format.

In the Learning Paths section, title casing is standardized, and descriptions are more concise. A "register now" or "coming soon" button is included based on course availability. The Validator Fundamentals section is prepared for upcoming validation experience notebooks.

The extra "Training" drop-down has been removed to simplify navigation, with potential plans to reintroduce sidebar or breadcrumb navigation. The `Releases` section is now part of the condensed drop-down menu.

A consistent browser compatibility message is displayed on registration pages and reiterated in the "Legal Ease" section on the policy page.

This pull request enhances the notebook execution and documentation process within GitHub Actions and site content. Key updates include improved action names and descriptions in `action.yml` files, registration of the `validmind` kernel, and expanded notebook execution commands. Documentation now features new training modules, detailed markdown files, and improved site navigation. The notebook directory structure is reorganized for clarity, with updated content and visual aids to guide users in model development and validation.

- **GitHub Actions Enhancements**:
  - Updated action names and descriptions in `action.yml` files for demo, prod, and staging notebooks to reflect the execution of multiple notebooks.
  - Added a step to register the `validmind` kernel in the GitHub Actions workflow, ensuring the correct environment is used for notebook execution.
  - Modified the execution command to target a series of notebooks, improving the scope of automated testing.

- **Documentation and Training Content**:
  - Introduced new training modules and updated existing ones to provide a comprehensive learning path for developers, validators, and administrators using ValidMind.
  - Added detailed markdown files for each training module, outlining learning objectives, course content, and step-by-step instructions for using ValidMind.
  - Enhanced the site content with new sections and updated existing ones to improve navigation and user experience.

- **Notebook Content and Structure**:
  - Reorganized the notebook directory structure to separate executed notebooks from tutorials, improving clarity and maintainability.
  - Updated notebook content to include new sections on implementing custom tests and using external test providers, providing users with more advanced capabilities.
  - Added new images and GIFs to the documentation to visually guide users through the process of adding content blocks and test results.

These changes aim to streamline the notebook execution process, enhance the training and documentation experience, and provide users with more robust tools for model development and validation.


<!--- PR #713: https://github.com/validmind/documentation/pull/713 --->
<!--- Labels: documentation, highlight --->
### Updated Validator Fundamentals courses (#713)

The **Validator Fundamentals** course has been updated for clarity and comprehensiveness, aligning with the Developer Fundamentals course. Updates include revised login instructions, detailed module learning outcomes, module summaries, and additional content on previously omitted topics. The course has been tested to ensure accurate instructions and time estimates.

The course is divided into four modules:

- **Module 1**: Using ValidMind for Model Validation
- **Module 2**: Running Data Quality Tests
- **Module 3**: Developing Challenger Models
- **Module 4**: Finalizing Validation Reports

This training series covers the basics of using ValidMind to validate datasets and models. It includes running and logging tests with the ValidMind Library and finalizing validation reports on the ValidMind Platform. You'll learn to automate testing, populate evidence in validation reports, track finding resolution, and more. Register now to take the course!

<!-- ### Changes with no label -->


<!--- PR #706: https://github.com/validmind/documentation/pull/706 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#706) --->
<!-- No release notes or summary provided. -->


<!--- PR #701: https://github.com/validmind/documentation/pull/701 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#701) --->
<!-- No release notes or summary provided. -->


<!--- PR #728: https://github.com/validmind/documentation/pull/728 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#728) --->
<!-- No release notes or summary provided. -->


<!--- PR #705: https://github.com/validmind/documentation/pull/705 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#705) --->
<!-- No release notes or summary provided. -->


<!--- PR #703: https://github.com/validmind/documentation/pull/703 --->
<!--- Labels: none --->
<!--- ### fix: remove helm repo path from s3 sync commands (#703) --->
<!-- No release notes or summary provided. -->


<!--- PR #715: https://github.com/validmind/documentation/pull/715 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#715) --->
<!-- No release notes or summary provided. -->


<!--- PR #712: https://github.com/validmind/documentation/pull/712 --->
<!--- Labels: none --->
<!--- ### Fix merge conflicts for prod deploy #711 (#712) --->
<!-- No release notes or summary provided. -->


<!--- PR #718: https://github.com/validmind/documentation/pull/718 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#718) --->
<!-- No release notes or summary provided. -->


<!--- PR #700: https://github.com/validmind/documentation/pull/700 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#700) --->
<!-- No release notes or summary provided. -->


<!--- PR #709: https://github.com/validmind/documentation/pull/709 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#709) --->
<!-- No release notes or summary provided. -->


<!--- PR #724: https://github.com/validmind/documentation/pull/724 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#724) --->
<!-- No release notes or summary provided. -->


<!--- PR #725: https://github.com/validmind/documentation/pull/725 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#725) --->
<!-- No release notes or summary provided. -->


<!--- PR #723: https://github.com/validmind/documentation/pull/723 --->
<!--- Labels: none --->
<!--- ### Merge main into staging (#723) --->
<!-- No release notes or summary provided. -->


<!--- # Validmind-library --->
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/validmind-library/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/validmind-library/compare/cmvm/25.05.04...cmvm/25.05.04 --->
<!-- No public PRs found for this release -->
