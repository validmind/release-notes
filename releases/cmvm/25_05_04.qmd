---
title: "cmvm/25.05.04 hotfix release notes"
date: "May 23, 2025"
sidebar: validmind-installation
toc-expand: true
# Content edited by AI - 2025-05-28 17:13
# Content validated by AI - 2025-05-28 17:13
# Content overwritten from an earlier version - 2025-05-28 17:13
---

## Backend
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/backend/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/backend/compare/7fde7cbb33d7335d7948a4e940fc4e83d6327660...7fde7cbb33d7335d7948a4e940fc4e83d6327660 --->

### Enhancements


<!--- PR #1400: https://github.com/validmind/backend/pull/1400 --->
<!--- Labels: enhancement --->
### Ability to delete a workflow (#1400)

This update introduces a soft delete mechanism for workflows and a corresponding dependency check endpoint. Here are the main changes:

- Two new columns have been added to the workflows table to store the deletion timestamp (`deleted_at`) and the ID of the user who performed the deletion (`deleted_by_id`).

Updates to the Workflow model include:
- The addition of new columns (`deleted_at`, `deleted_by_id`) to support soft deletion.
- An update to the serialize method to include the `deleted_at` field.
- A modification to the workflow retrieval query to exclude soft-deleted workflows by filtering for records where `deleted_at` is NULL.
- The introduction of a new class method `get_workflow_dependencies` to calculate the count of dependent inventory models for a given workflow.
- The introduction of a new instance method `mark_as_deleted`, which sets the `deleted_at` timestamp and records the user who deleted the workflow before committing the change.

Updates to the UI routes include:
- The addition of a new DELETE endpoint to soft delete a workflow. This endpoint uses the `mark_as_deleted` method and returns the appropriate HTTP status codes based on the outcome.
- The implementation of a new endpoint to check workflow dependencies by returning the count of inventory models relying on the specified workflow.

New and updated test cases ensure correct functionality:
- Tests now verify that soft-deleted workflows are excluded from active workflow queries.
- Tests check that dependencies are correctly counted before and after workflow executions are started.

Overall, these changes provide a robust mechanism to handle workflow deletion in a non-destructive way, improving data integrity and allowing for dependency tracking on workflows.


<!--- PR #1431: https://github.com/validmind/backend/pull/1431 --->
<!--- Labels: enhancement --->
### Enable or disable LLM support using `OfflineFlags` (#1431)

We've made significant changes to the Feature Flags codebase. 

We've added offline feature flag functionality via environment variables. This means that feature flags, which were previously only accessible through LaunchDarkly and required an active connection, can now be configured even when LaunchDarkly integration is not available. 

We've also made several improvements to the codebase. These include adding comprehensive docstrings to all feature flag functions, refactoring feature flag access to use a new centralized context-aware function, removing unused feature flags (FLAG_REDIS_ENABLED, FLAG_CASBIN_RELOAD_ENABLED, FLAG_AUTH_CONFIG), and adding type hints to improve code maintainability.

The new FlagHelper Module has several features. It enables feature flag functionality in environments where LaunchDarkly integration is not possible, such as VM deployments. It also improves code maintainability through better documentation and type hints. Additionally, it centralizes feature flag access through a single function to reduce code duplication and removes technical debt by cleaning up unused feature flags.

In summary, we've added support for offline feature flags configuration through environment variables. This enables feature flag functionality in environments without LaunchDarkly integration.

This update significantly enhances the feature flag system by introducing offline flag support and improved context handling for LaunchDarkly evaluations. Here are the main changes:

1. **.env.example File Update:** The .env.example file now includes a `FEATURE_FLAGS` JSON string. This configuration is intended for offline environments where the deployment cannot be integrated with LaunchDarkly. It enables the offline evaluation of feature flags by loading a pre-defined JSON of flags.

2. **Update to feature_flags.py:** The `feature_flags.py` file has been updated with several new functions. A new function, `get_offline_feature_flag`, retrieves flag values from the offline configuration, returning a default if the flag is not present. Additionally, `get_feature_flag_with_context` first checks the offline configuration before attempting a LaunchDarkly evaluation, enhancing reliability in offline mode.

3. **Context Functions Improvement:** Two context functions have been improved. The existing `context_from_user` function now has an enhanced docstring, and a new function, `context_from_user_and_organization`, is added to create a multi-context using both user and organization information. This allows for more granular feature flag evaluations based on multiple context sources.

4. **Backend Tracking Route Update:** The tracking route in the backend now leverages the new `get_feature_flag_with_context` function instead of directly accessing the `ldclient`. This decouples the feature flag evaluation from the LaunchDarkly client and allows for more flexible offline support.

5. **Unit Test Enhancements:** Comprehensive unit tests have been added in `tests/unit/test_feature_flags.py`. These tests cover various scenarios, including context creation, offline and online flag evaluation, and handling of scenarios where user or organization data may be missing.


<!--- PR #1429: https://github.com/validmind/backend/pull/1429 --->
<!--- Labels: enhancement, python --->
### Introduces the ability to export comments in validation reports (#1429)

We have introduced a new feature that allows comments to be exported from validation reports. Previously, this was not possible. Now, similar to the existing flags, exporting comments is an option that defaults to off.

In conjunction with the corresponding frontend update, there is now a "include comments left on document" checkbox available when exporting the validation report. This feature can be seen in the following screenshot:
![Screenshot 2025-05-05 at 08 55 55](https://github.com/user-attachments/assets/b6b886e6-60cd-4c05-8ac3-46e3edbad7b8)

This change was implemented in response to customer requests. Our users expressed a desire to have the option to save their contributors' comments.

Please note that there are no breaking changes associated with this update.

This update enhances the reporting functionality by incorporating user comments into the generated reports. Here are the key changes:

1. A new static method, `get_user_comments_by_model_id`, has been added to the Annotation model (`annotation.py`). This method queries and combines annotation data with related comments and the user who created them.

2. The report serialization process has been updated across several modules. Changes in `model_inventory.py` and `reports.py` now support an additional flag (`include_comments`) for embedding user comments into reports. This affects both the document generation and the content structure.

3. The UI reporting routes (`ui_reporting.py`) now parse an additional parameter for comments inclusion. A helper method, `parse_generate_report_params`, consolidates all report parameters, including the new `include_comments` flag.

4. A new function, `get_comment_text_for_doc`, has been introduced in the report render helpers. This function processes the retrieved comments, removes HTML formatting, and organizes them in a styled text block that is then converted to a document fragment.

5. A new dataclass, `ExportAnnotation`, has been added to `util_models.py` to facilitate the clean export of comment details, including user name, text content, created date, and context.

6. Several unit tests have been added in `test_reports.py` to verify the new functionality. These tests ensure that comments are serialized correctly, appear as expected in document fragments, and that HTML is properly cleaned before being embedded in the final report.

These changes aim to provide a more comprehensive report output by ensuring that user comments are properly queried, formatted, and integrated within the generated reports.


<!--- PR #1433: https://github.com/validmind/backend/pull/1433 --->
<!--- Labels: enhancement, do not merge, breaking-change --->
### "Run schema migrations in a separate container" (#1433)

In the latest update, schema migrations are now designed to run once per deployment using a Kubernetes `job` resource. This is a crucial change to ensure system stability and performance. 

If you do not implement this `job` resource, either by not updating to the latest version of the Helm chart or by failing to incorporate it into your custom deployment method, your system may experience degradation. This is because the database schema will not be up-to-date with what the ValidMind backend requires.

Please note that this change is significant and may disrupt your system if not properly implemented. It is highly recommended to update your deployment methods to accommodate this change and ensure the smooth operation of your system.

This release introduces several functional improvements across deployment pipelines, documentation, Docker configurations, and startup scripts:

1. **GitHub Actions workflow (deploy.yaml)**:
   - We've removed custom steps for retrieving and outputting the ECR registry information. The workflow now uses the official `aws-actions/amazon-ecr-login@v2` action to log into ECR, simplifying the process and reducing potential points of failure.
   - Docker build tags and cache parameters have been updated to use output variables from the new login action.

2. **Documentation Updates (README.md)**:
   - We've enhanced local development instructions by adding `make` targets for running database migrations, installing RBAC, and creating analytics views. This provides clearer guidance for initializing the development environment.
   - Instructions for recreating the ValidMind schema have been clarified, suggesting use of the migrations task instead of starting the API.

3. **Docker Compose Enhancements (docker-compose.yaml)**:
   - A new service configuration for migrations has been introduced. This service builds from the backend Dockerfile and is configured to run schema migrations in a controlled environment.
   - Dependency conditions have been added to ensure that the migrations service completes successfully before dependent services proceed.

4. **Startup Script Adjustments (docker-entrypoint.sh)**:
   - The Keycloak port reference has been updated to pull from `KEYCLOAK_SERVICE_PORT`, aligning with service naming conventions.
   - The Redis startup check has been modified to conditionally skip waiting when running in migration mode, allowing migrations to run without unnecessary delays.
   - The startup flow has been streamlined to differentiate between migration, worker, and API startup modes.

5. **Code Cleanup (src/backend/api.py)**:
   - Redundant Flask-Migrate initialization has been removed, as the migrations are now handled through a dedicated service or task.

These changes aim to simplify the deployment process, improve clarity in developer guidance, and ensure that the application's startup and migration procedures are better managed across different environments.

<!-- Image: https://github.com/user-attachments/assets/3647fe3b-bfb9-421c-9b77-4899653ee14b -->
<!-- Image: https://github.com/user-attachments/assets/15e0f88a-506d-4e20-9968-e1fad0c76583 -->
<!-- Image: https://github.com/user-attachments/assets/612f6b1e-9f91-402f-82f0-406857261e95 -->
<!-- Image: https://github.com/user-attachments/assets/62bd5ef7-c8e2-472e-b34b-a84efd6d73a1 -->
### Bug fixes


<!--- PR #1458: https://github.com/validmind/backend/pull/1458 --->
<!--- Labels: bug, security --->
### Fixed privilege escalation vulnerability (#1458)

We have addressed a security vulnerability in this release. Previously, regular users were able to escalate their permissions by granting themselves admin access. This privilege escalation vulnerability has now been removed to enhance the security of the system. 

Please note that there are no breaking changes associated with this update. 

As this is a backend update, there are no frontend changes to display through screenshots or videos.

In this update, we've enhanced the user role management endpoints for better clarity and control. We've updated the authorization mechanism in the POST endpoint, changing from a generic `refresh="api-async"` parameter to a more specific control with `resource="Role"` and `action="create"`. This provides a finer level of control over permissions. Similarly, in the DELETE endpoint, the authorization now uses `resource="Role"` with `action="delete"` to better reflect the permission requirements.

We've also improved variable naming for clarity. The variable previously named `user` has been renamed to `to_update_user` to more accurately represent the user that will be updated. This ensures consistency when checking organization membership and creating the role assignment. Furthermore, the event publishing call now correctly references the updated user variable, ensuring that events are generated with the correct user information.


<!--- PR #1472: https://github.com/validmind/backend/pull/1472 --->
<!--- Labels: bug --->
### Ensure `SQLAlchemy` pool variables are integers (#1472)

The Kubernetes (k8s) pod specification previously did not allow environment variables to be set as integers, necessitating their encapsulation in quotes. This led to Python interpreting them as strings, which SQLAlchemy did not handle well. With this update, these values will be cast to integers when the environment variable is present and set by the Kubernetes pod specification. Until this point, we have been relying on default settings.

In this update, we've enhanced the configuration of the Flask application to ensure that SQLAlchemy-related environment variables, specifically `SQLALCHEMY_POOL_SIZE` and `SQLALCHEMY_MAX_OVERFLOW`, are explicitly cast to integers. This improvement addresses the previous issue where these values were directly taken from environment variables as strings, potentially causing type mismatches. This change enforces correct type usage, reducing the likelihood of runtime errors related to database connection pooling configurations.

<!-- Image: https://github.com/user-attachments/assets/18eefd93-835f-4f4e-bcfa-a9884f9706a5 -->

<!--- PR #1470: https://github.com/validmind/backend/pull/1470 --->
<!--- Labels: bug, security --->
### Check model permissions on `api/v1/workflows/targets/{cuid}/executions` (#1470)

This release does not include any deployment notes, breaking changes, screenshots/videos, or areas needing special review. 

The following checklist was adhered to during the development of this release:
- The PR body clearly describes what the changes are, why they were made, and how to test them.
- Release notes have been written.
- Deployment notes have been written.
- Any breaking changes have been identified.
- Appropriate labels have been applied.
- The PR has been linked to Shortcut.
- Screenshots/videos have been added for the frontend.
- Unit tests have been added for the backend.
- The changes have been tested locally.
- Documentation has been updated as required.

There are no additional notes for this release.

This update refactors the methods used to retrieve workflows, shifting the focus from user-based lookups to organization-based ones. Here are the key changes:

In the `src/backend/db/workflow.py` file:
- The `get_workflow` method now requires an organization and a cuid. If no organization is provided, it raises a ValueError with a descriptive message.
- The `get_by_target` method has been updated to accept an organization parameter. It uses this to filter the query, ensuring that the returned workflow executions are correctly scoped by organization.

In the REST API endpoints in the `src/backend/routes/ui_workflows.py` file:
- All calls to `Workflow.get_workflow` now pass `g.current_user_org` instead of `g.current_user`, aligning data retrieval with the new workflow model requirements.

In the unit tests in the `tests/unit/test_workflows.py` file:
- The tests have been updated to use the organization parameter when fetching workflows and testing execution queries, ensuring consistency in how workflows are retrieved throughout the project.

These changes centralize the context on organization-level access, improving consistency and helping avoid potential mismatches that could occur by using user information directly.


<!--- PR #1441: https://github.com/validmind/backend/pull/1441 --->
<!--- Labels: bug --->
### Enhanced logging for `workflows` Celery task

In this update, we've made two significant improvements to boost application performance and monitoring.

First, we've updated the Celery configuration to increase worker concurrency from 4 to 6. This enhancement allows more tasks to run concurrently, effectively addressing performance bottlenecks during high workload periods. This modification can be found in the `celery_config.py` file.

Second, we've added a new logging statement in the Workflow Tasks module (`workflows.py`). This log entry records the process of identifying available workflows based on a field change. It provides details such as the field key and the associated organization. This addition is designed to facilitate debugging and monitoring of the workflow query execution flow (#1441)

In this update, we have made two significant changes to improve application performance and monitoring.

Firstly, we have updated the Celery configuration to increase the worker concurrency from 4 to 6. This enhancement allows more tasks to run concurrently, effectively addressing performance bottlenecks during periods of high application workload. You can find this modification in the `celery_config.py` file.

Secondly, we have added a new logging statement in the Workflow Tasks module (`workflows.py`). This log entry records the process of identifying available workflows based on a field change, providing details such as the field key and the associated organization. This addition is intended to facilitate debugging and monitoring of the workflow query execution flow.


<!--- PR #1396: https://github.com/validmind/backend/pull/1396 --->
<!--- Labels: bug, python --->
### Improved error handling for Auth0 authentication process (#1396)

We have improved the error handling during the initial onboarding process. Previously, if a weak password was chosen, the backend would throw a 500 error without any explanation. Although Auth0 provided a helpful error message, it was not properly utilized.

With this update, if a weak password is chosen during the initial onboarding, at least one helpful message from Auth0 will be presented to the user in a clear and understandable manner.

This is part of our ongoing efforts to enhance user experience and address bugs. This specific update is related to PR #1396 and is focused on improving the organization on-boarding flow error handling.

This release introduces several functional improvements:

Debugging Enhancements:
- We've added a new remote debugging configuration to the VS Code launch file (`.vscode/launch.json`). This allows you to attach a debugger (via `debugpy`) to the API service running in Docker. We've also updated the README with instructions on how to use this configuration for interactive debugging.
- The Docker Compose configuration now exposes port 5678 and mounts relevant volumes from the backend. This provides a smoother debugging experience in a containerized environment.
- We've modified the `docker-entrypoint.sh` script to launch the Python application with `debugpy` (using the `-m debugpy --listen 0.0.0.0:5678` flag). This facilitates remote debugging.

Auth Error Handling Improvements:
- The authentication provider code (`src/backend/auth/auth_provider.py`) now includes enhanced error handling that checks for password strength errors. When a 'PasswordStrengthError' is detected in the API response, an error is raised with a new `INVALID_FIELD` code, along with detailed error information. In other cases, it falls back to a generic unauthorized error.
- The route handling in `src/backend/routes/admin/organizations.py` has been updated to specifically catch and re-raise `AuthError`. This ensures that such errors are handled appropriately by the calling context.

Code and Utility Enhancements:
- In the JSON encoder (`src/backend/utils/__init__.py`), we've added a new case to properly handle objects that implement a `to_dict` method. This improves the serialization of custom objects.
- We've updated logging in the generic error handler (`src/backend/errors/handlers.py`) from exception level logging to error level logging. This avoids excessive stack traces for expected issues.

Extended Unit Tests:
- We've added a comprehensive new set of unit tests for `Auth0AuthProvider` in `tests/unit/test_auth0_provider.py`. These tests cover scenarios including handling weak passwords, successful user creation, and other error cases. The tests use mocks to simulate API interactions and validate correct error signaling and token management.


<!--- PR #1462: https://github.com/validmind/backend/pull/1462 --->
<!--- Labels: bug, python, security --->
### Enhanced security for workflow status modification

In this update, we've improved security by introducing a new static method, `get_status_for_org`. This method simplifies the process of retrieving a status by joining the `StatusesWorkflowStatus` and `StatusesWorkflow` tables based on organization and workflow identifiers. This method is now used in the edit endpoint, replacing previous redundant queries with a more efficient data access pattern.

Minor refactoring was also performed on the block documentation and validation report functions to improve code formatting and readability.

To ensure the robustness of the `get_status_for_org` function, we've added unit tests. These tests verify both positive and negative cases, ensuring that the method correctly handles scenarios where the organization or workflow identifiers do not match, as well as when an invalid status identifier is provided.

We have added extra validation to the `PUT /api/v1/statuses-workflows/{id}/status` endpoint. This change is designed to prevent users from modifying the workflow status of organizations they are not part of. 

Previously, a member of organization `foo` could potentially alter the workflow status of organization `bar`. This was due to the backend not validating whether the requester was a member of the organization being modified. 

This update addresses this security issue, ensuring that users can only modify the workflow status of organizations they are members of (#1462)

We have added extra validation to the `PUT /api/v1/statuses-workflows/{id}/status` endpoint. This change is designed to prevent users from modifying the workflow status of organizations they are not part of. 

Previously, a member of organization `foo` could potentially alter the workflow status of organization `bar`. This was due to the backend not validating whether the requester was a member of the organization being modified. 

This update addresses this security issue, ensuring that users can only modify the workflow status of organizations they are members of.

In this update, we've introduced a new static method, `get_status_for_org`. This method streamlines the process of retrieving a status by joining the `StatusesWorkflowStatus` and `StatusesWorkflow` tables based on organization and workflow identifiers. This new method is now utilized in the edit endpoint, replacing previous redundant queries with a more efficient data access pattern.

We've also performed minor refactoring on the block documentation and validation report functions to improve code formatting and readability. 

To ensure the robustness of the `get_status_for_org` function, we've added unit tests. These tests verify both positive and negative cases, ensuring that the method correctly handles scenarios where the organization or workflow identifiers do not match, as well as when an invalid status identifier is provided.


<!--- PR #1471: https://github.com/validmind/backend/pull/1471 --->
<!--- Labels: bug, security --->
### Enhanced data security for workflow states access (#1471)

This release does not include any new features, breaking changes, or deployment notes. No screenshots or videos are available as there are no frontend changes. 

The following checklist was completed for this release:
- The PR description includes details about what the PR is for, why it's necessary, and how to test it.
- Release notes have been written.
- Any potential breaking changes have been identified.
- Appropriate labels have been applied to the PR.
- The PR has been linked to Shortcut.
- The changes have been tested locally.
- The documentation has been updated as required.

Please note that no unit tests were added for backend changes in this release. There are also no specific areas that require special review or additional notes to consider.

This release includes an update to the User Interface (UI) workflow states endpoints to enhance data security. The endpoints now enforce organization-specific data access. Instead of accessing the global Workflow model directly, the endpoints now retrieve workflows through the current user's organization using `g.current_user_org.workflows`. This change applies to multiple endpoints (GET, POST, PATCH, and DELETE), ensuring that only workflows associated with the current user's organization are accessed. This reduces the risk of data leakage between organizations.

In addition to these security improvements, we have refined exception handling. `ResourceNotFoundError` exceptions are now explicitly rethrown, allowing for precise error signaling to the client. Any other exceptions are caught and returned as an `InternalServerError`.

Overall, these updates improve security by constraining data access to the user's organization and provide clearer error propagation within workflow state management.

<!-- ### Changes with no label -->


<!--- PR #1454: https://github.com/validmind/backend/pull/1454 --->
<!--- Labels: none --->
<!--- ### Merging main branch into staging for version `1.30.8` (#1454) --->
<!-- No release notes or summary provided. -->


<!--- PR #1455: https://github.com/validmind/backend/pull/1455 --->
<!--- Labels: none --->
<!--- ### Production update to version `prod-1.30.8` (#1455) --->
<!-- No release notes or summary provided. -->


<!--- PR #1484: https://github.com/validmind/backend/pull/1484 --->
<!--- Labels: none --->
<!--- ### Merging main branch into staging for version 1.30.8 (#1484) --->
<!-- No release notes or summary provided. -->


<!--- PR #1428: https://github.com/validmind/backend/pull/1428 --->
<!--- Labels: none --->
### Introduce limit on testing workflow concurrency (#1428)

In this update, we've introduced a new configuration block to the GitHub Actions workflow for the Python application. This addition of concurrency settings ensures that only the most recent workflow run is active by grouping runs according to the workflow and branch reference. This change is designed to cancel any in-progress runs when a new run is triggered, thereby saving CI resources and reducing potential conflicts from concurrent executions.

<!-- Image: https://github.com/user-attachments/assets/17ccbde5-050b-4078-8e27-c4096776173f -->

<!--- PR #1426: https://github.com/validmind/backend/pull/1426 --->
<!--- Labels: none --->
### Updated deployment workflow configurations for AWS environments (#1426)

This update modifies the deployment workflow configurations for AWS secondary, production, and staging environments. The workflows now use the new template file (`values-new.yaml`) instead of the old template file (`values.yaml`). This file is copied into the `manifests` directory, with the `sed` commands for template substitutions remaining the same. This change ensures that deployments meet the requirements of the updated configuration template.


<!--- PR #1487: https://github.com/validmind/backend/pull/1487 --->
<!--- Labels: none --->
<!--- ### Merging staging into production (#1487) --->
<!-- No release notes or summary provided. -->


<!--- PR #1466: https://github.com/validmind/backend/pull/1466 --->
<!--- Labels: none --->
### Refactored API endpoint for 'Contents' field in UI inventory models

We've updated the way the API endpoint handles the 'contents' field of sections in the UI inventory models. Previously, if a section didn't include a 'contents' key, the system would default to a list containing a dictionary with a 'content_id' (set to the section id) and a 'content_type' of 'text'. 

Now, the system uses the dictionary `get()` method to retrieve 'contents', defaulting to an empty list if the key is absent. This change has been consistently applied in both endpoints where section data is processed.

This simplification of the code makes the expected behavior when 'contents' is missing clearer. However, we recommend that users of this API verify that returning an empty list (instead of a list with a default content block) doesn't introduce any unintended downstream effects (#1466)

## Release Notes

### Refactoring of API Endpoint for 'Contents' Field in UI Inventory Models

We've made changes to how the API endpoint handles the 'contents' field of sections in the UI inventory models. In the previous version, if a section did not include a 'contents' key, the system would default to a list containing a dictionary with a 'content_id' (set to the section id) and a 'content_type' of 'text'. 

With this update, the system now uses the dictionary `get()` method to retrieve 'contents', defaulting to an empty list if the key is absent. This change has been applied consistently in both endpoints where section data is processed.

### Impact and Considerations

This refactoring simplifies the code and makes the expected behavior when 'contents' is missing more clear. However, we recommend that users of this API verify that returning an empty list (instead of a list with a default content block) does not introduce any unintended downstream effects.


<!--- PR #1491: https://github.com/validmind/backend/pull/1491 --->
<!--- Labels: none --->
<!--- ### Merged main branch into staging for version `1.30.8` (#1491) --->
<!-- No release notes or summary provided. -->


<!--- PR #1394: https://github.com/validmind/backend/pull/1394 --->
<!--- Labels: none --->
### Switched code formatting tool from `Black` to `Ruff` (#1394)

This update introduces a comprehensive refactoring of import statements and code formatting across the project. The changes include reorganizing and grouping imports in source code, migration scripts, and utility modules. Some imports have been relocated to better align with dependency requirements. The code formatting tool in the Makefile has been switched from Black to Ruff to enforce consistent style guidelines, resolve potential circular dependencies, and enhance readability. Minor adjustments to whitespace and line breaks have been made in various files, including API handlers, service modules, and tests. The functionality remains the same, but the maintainability and clarity of the code have been significantly improved.

Key functional changes include:

- Standardized and reorganized import ordering in multiple files, such as migration scripts, API modules, and utility scripts.
- Updated the Makefile to run Ruff for both formatting and linting, enhancing style enforcement.
- Removed redundant whitespace and adjusted formatting for inline strings and dictionary keys without changing the program logic.

These improvements aim to streamline the codebase, making future maintenance easier and reducing the risk of dependency issues without affecting business logic.


<!--- PR #1403: https://github.com/validmind/backend/pull/1403 --->
<!--- Labels: none --->
### Enhancements to template handling

This release introduces several improvements to the way templates are managed within the application:

1. **Installation Script Update**: We've updated the call to the `upsert` function in the installation script to include a new `template_type` parameter. This allows for better differentiation between templates.

2. **Backend Database Model Enhancements**: We've added validation functions (`@validates` decorators) to the backend database models for templates and template versions. These functions ensure that template data is processed correctly each time it's set or updated. They use the new `flatten_sections` utility function to convert nested section structures into a flat, JSON-safe format.

3. **New Utility Functions**: We've implemented two new utility functions, `extract_clean_section` and `flatten_sections`. These functions traverse nested sections recursively, remove unwanted keys like 'order', 'index', and 'sections', and output a cleaned, flat structure. This simplifies the storage and processing of template metadata.

4. **Unit Test Expansion**: We've expanded unit tests to include the new flattening functionality. These tests confirm that nested sections are correctly flattened, handle cases where the 'sections' key might be missing, and manage deeply nested structures appropriately. They also ensure that existing functionalities, like template serialization, handle the updated structure correctly (for example, using 'sections' instead of 'pages') (#1403)

This release introduces several enhancements to template handling within the application. The key updates are as follows:

1. **Installation Script Update**: The call to the upsert function in the installation script now includes an additional `template_type` parameter. This change allows for better differentiation between templates.

2. **Backend Database Model Enhancements**: Validation functions (@validates decorators) have been added to the backend database models for templates and template versions. These functions ensure that template data is correctly processed each time it is set or updated. They leverage the new `flatten_sections` utility function to convert nested section structures into a flat, JSON-safe format.

3. **New Utility Functions**: We've implemented two new utility functions, `extract_clean_section` and `flatten_sections`. These functions recursively traverse nested sections, remove unwanted keys such as 'order', 'index', and 'sections', and output a cleaned, flat structure. This update simplifies the storage and processing of template metadata.

4. **Unit Test Expansion**: Unit tests have been expanded to include the new flattening functionality. These tests confirm that nested sections are correctly flattened, handle cases where the sections key might be missing, and manage deeply nested structures appropriately. They also ensure that existing functionalities, like template serialization, properly handle the updated structure (e.g., using 'sections' instead of 'pages').


<!--- PR #1411: https://github.com/validmind/backend/pull/1411 --->
<!--- Labels: none --->
### Refined Keycloak configuration setup for enhanced clarity and accuracy (#1411)

In this update, we have refactored the Keycloak configuration setup to improve clarity and configuration accuracy for environments using Keycloak for authentication and administrative operations. 

The following changes have been made:

- In the `.env.example` file, we have deprecated the use of the `AUTH_AUTHORITY` variable. Instead, we have introduced the `KEYCLOAK_SERVER_URL` variable to explicitly define the Keycloak API endpoint.

- In the GitHub Actions workflow file (`python.yaml`), we have removed the `AUTH_AUTHORITY` environment variable and now rely on the updated key configuration variables.

- In the Keycloak `README.md`, we have clarified the distinction between `KEYCLOAK_HOST` and `KEYCLOAK_SERVER_URL`, providing clear examples for different deployment scenarios such as Docker Compose, local development, and production.

- In the integration test (`tests/integration/test_auth_provider.py`), we have removed the legacy `AUTH_AUTHORITY` variable during environment setup to align with the new configuration.

These changes will help users to better understand and manage their Keycloak configurations.


<!--- PR #1495: https://github.com/validmind/backend/pull/1495 --->
<!--- Labels: none --->
<!--- ### Merging main branch into staging for version 1.30.8 (#1495) --->
<!-- No release notes or summary provided. -->


<!--- PR #1418: https://github.com/validmind/backend/pull/1418 --->
<!--- Labels: none --->
### Enable local user registration in `Keycloak` theme (#1418)

This update introduces two significant changes:

1. The self-registration feature in the Keycloak realm configuration has been disabled by setting the `registrationAllowed` flag to false. This adjustment ensures that end users can no longer create accounts via the registration link.

2. The login and registration FreeMarker templates have been revised. In the login template, the registration link will now only be displayed when the realm's `registrationAllowed` flag is set to true. The registration template has also been enhanced with the following updates:
   - A debug block has been added to display available form fields. This block is hidden by default via the CSS style `display: none;`.
   - The registration form now clearly defines required fields (username, email, first name, last name, password, and password confirmation) to ensure proper validation.
   - Any additional fields from the provided form data are iterated and rendered only if they are not among the explicitly defined required fields.

These changes aim to improve control over user self-registration and enhance the structure and debugging capabilities of the registration form.

<!-- Image: https://github.com/user-attachments/assets/346efb29-3e5c-4045-9c3a-2fa6100c4434 -->
<!-- Image: https://github.com/user-attachments/assets/8294534c-39fc-422d-a561-7420de39888e -->

<!--- PR #1408: https://github.com/validmind/backend/pull/1408 --->
<!--- Labels: none --->
### Introduced `global_id` to template serialization (#1408)

This release introduces a functional enhancement to the backend template serialization process. A new key, `global_id`, has been added to the payload generated by the `serialize_template` function. This `global_id` is sourced from the `base_template` property of the template object and is included alongside other metadata such as `template_cuid`, `template`, and `created_at`.

This update ensures that the serialized output now carries a unique global identifier, improving traceability and consistency across different parts of the system that utilize these template definitions.


<!--- PR #1417: https://github.com/validmind/backend/pull/1417 --->
<!--- Labels: none --->
### Updated staging and production to new `values` format (#1417)

This update modifies the deployment workflow configurations in three YAML files: `deploy_aws_secondary.yaml`, `deploy_prod.yaml`, and `deploy_staging.yaml`. The main change is the update to the copy operation. Workflows will now use the new template file `values-new.yaml` located in the `templates/validmind` directory, replacing the previous `values.yaml`. This ensures that deployments will utilize the updated configuration settings. The `sed` commands continue to replace templated placeholder strings with environment-specific values, such as site, environment, vault ID, repository, and API SHA, ensuring consistency across deployments.


<!--- PR #1425: https://github.com/validmind/backend/pull/1425 --->
<!--- Labels: none --->
### Fixed typo in action name in `release_cmvm.yaml` (#1425)

This update corrects the GitHub Actions workflow used for creating a release from a CMVM tag. The action reference has been changed from `softprops/actions-gh-release@v2` to `softprops/action-gh-release@v2`. This adjustment ensures the workflow uses the correct action, enabling proper release note generation when a tag starting with 'refs/tags/cmvm' is pushed.


<!--- PR #1329: https://github.com/validmind/backend/pull/1329 --->
<!--- Labels: dependencies, python --->
### Update `werkzeug` dependency from version 2.3.8 to 3.0.6 (#1329)

This update increases the version of the Werkzeug dependency in the `pyproject.toml` file from ^2.3.0 to ^3.0.6. The upgrade focuses on incorporating the bug fixes, performance enhancements, and new features offered by the latest version of Werkzeug. Please ensure to verify that this update does not disrupt any application components that depend on Werkzeug, particularly in areas related to routing, request handling, or middleware integration.

<!-- Image: https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=werkzeug&package-manager=pip&previous-version=2.3.8&new-version=3.0.6 -->

<!--- PR #1442: https://github.com/validmind/backend/pull/1442 --->
<!--- Labels: none --->
### "Increased worker concurrency for improved performance" (#1442)

We have made an update to increase worker concurrency. This enhancement will improve the overall performance and efficiency of the system.

In this update, we have increased the worker concurrency for the Celery worker from 4 to 6 in the `docker-entrypoint.sh` file. This change allows the worker to process more tasks concurrently, potentially improving performance under heavy load. The rest of the command remains unchanged, ensuring that the worker starts with the correct work directory and Celery application context.


<!--- PR #1440: https://github.com/validmind/backend/pull/1440 --->
<!--- Labels: none --->
### Improved validation for updating workflow trigger types (#1440)

This release addresses a bug that was preventing the update of a workflow. Previously, when a workflow PUT operation was executed, it returned an error during the validation of the trigger type. This was because it was returning itself and complaining about the existence of another workflow with the same trigger type. This issue has now been fixed.

This update enhances the workflow validation logic in the backend by introducing an extra parameter, `update_cuid`, to the `validate_trigger_type` method. This adjustment ensures that the current workflow record is excluded from a duplicate check (based on `cuid`) when updating an existing workflow.

The update specifically modifies the query filtering for existing workflows by adding a filter condition to exclude the workflow with the `cuid` passed in via `update_cuid`. This change prevents false positives when updating a workflow after validating its fields.

In addition, the exception handling in the UI workflows route (`src/backend/routes/ui_workflows.py`) has been slightly refined. A `BadRequestError` is now explicitly re-raised, which provides clearer error propagation and distinguishes it from general exceptions that are wrapped in an `InternalServerError`.

Overall, these changes refine the update logic to ensure that workflow duplication is correctly checked and errors are handled appropriately during update operations.


<!--- PR #1493: https://github.com/validmind/backend/pull/1493 --->
<!--- Labels: none --->
### Updated startup command for API service

In this update, we've modified the startup command for the API service in the Docker entrypoint script. Previously, the command used the Python module flag (-m) with a file path, which may not have worked as expected. Now, we've removed the -m flag and the script file is directly executed using `ddtrace-run`. This change ensures the API service starts correctly, using `ddtrace` for instrumentation as intended.

We've also made significant visual updates to our platform. Please be aware that these changes may affect your current setup. Here are the key changes:

Visual updates:
- Homepage: We've provided before and after screenshots for a better understanding of the changes.
- Profile Page: We've provided before and after screenshots for a better understanding of the changes.

Please review these changes carefully to ensure a smooth transition (#1493)

We have made some significant updates in this release. Please note that these changes may affect your current setup.

Here are the key changes you should be aware of:

We have made some visual updates to our platform. To give you a better understanding of these changes, we have provided before and after screenshots.

Homepage:
![Homepage Before](homepage_before.png)
![Homepage After](homepage_after.png)

Profile Page:
![Profile Before](profile_before.png)
![Profile After](profile_after.png)

Please review these changes carefully to ensure a smooth transition.

This update modifies the startup command for the API service in the Docker entrypoint script. The previous command used the Python module flag (-m) with a file path, which may not have functioned as expected. The revised command removes the -m flag and directly executes the script file using `ddtrace-run`. This adjustment ensures the API service starts correctly, utilizing `ddtrace` for instrumentation as intended.


<!--- PR #1420: https://github.com/validmind/backend/pull/1420 --->
<!--- Labels: none --->
### Updated `poetry.lock` file removal in Dockerfile build process (#1420)

This update introduces a modification to the Dockerfile for the customer-managed environment. The change involves the removal of the `poetry.lock` file from the application directory during the container build process. This adjustment is designed to prevent potential issues related to dependency resolution or outdated locks from being included in the container. This ensures that the environment is established with clean dependency management.

The focus of this change is on a specific file removal operation. This maintains the integrity of the container build and may allow the project to generate an updated lock file in later steps or during runtime.


<!--- PR #1486: https://github.com/validmind/backend/pull/1486 --->
<!--- Labels: none --->
<!--- ### Merged main branch into staging for version `1.30.8` (#1486) --->
<!-- No release notes or summary provided. -->


<!--- PR #1465: https://github.com/validmind/backend/pull/1465 --->
<!--- Labels: security --->
### Validating owner's list against selected group (#1465)

We have addressed a critical vulnerability that previously allowed a user to be added to the owners list and subsequently obtain personally identifiable information (PII). This process did not include checks to verify if the user belonged to the organization.

Please note, this update may introduce some breaking changes. Be sure to review your system setup and configurations to ensure compatibility.

For a visual representation of these changes, please refer to the attached screenshots or videos. These will provide a clear before-and-after comparison of the updates.

This release introduces several enhancements to improve user membership and ownership management in the application:

- In the Backend API module, we've removed the unused import of `flask_migrate`, which helps clean up the project dependencies.

- In the Authentication module, we've repositioned the `RolePermission` import. This change, while having minimal functional impact, contributes to clearer dependency management.

- We've added a new method, `is_member`, to the Group class. This method checks whether a given user is already a member of the group, centralizing group membership checks and clarifying the intent of the membership logic.

- In the UI Inventory Models route, we've enhanced the logic for adding an owner to the inventory model. The route now verifies if the user exists and is a member of the group before adding them as an owner or developer. This update prevents non-existent or unauthorized users from being mistakenly added, ensuring more robust handling of ownership assignments.


<!--- PR #1427: https://github.com/validmind/backend/pull/1427 --->
<!--- Labels: none --->
### Allow frontend deployments from custom branches in development (#1427)

This update enhances the deployment workflow by allowing users to specify a custom branch or tag for the frontend repository. The main changes include:

1. A new input parameter `frontend_branch_or_tag` has been added to the GitHub Actions deployment workflow in the `.github/workflows/deploy.yaml` file. This string parameter is required and defaults to "main".

2. The checkout step for the `validmind/frontend` repository has been modified to use the value provided by `frontend_branch_or_tag` instead of defaulting to the "main" branch. If no input value is provided, it will default to "main".

These changes provide more flexibility in specifying the frontend code to be deployed, accommodating scenarios where different branches or tags need to be deployed without the need to modify the workflow file each time.


<!--- PR #1358: https://github.com/validmind/backend/pull/1358 --->
<!--- Labels: none --->
### Added startup checks for datastores and Keycloak (#1358)

This update enhances the Docker configuration and startup logic to improve service orchestration and dependency management. The enhancements include:

- The Dockerfile has been updated to install additional utilities such as `jq`, `postgresql-client-15`, and `redis-tools` to support enhanced operations and debugging.
- The `docker-compose.yaml` file has been modified to add a new port mapping (9000) for Keycloak and set a new environment variable (`KC_HEALTH_ENABLED`) to enable health checking.
- The `docker-entrypoint.sh` file has been improved to implement readiness checks for Postgres, Redis, and, conditionally, Keycloak. This ensures that dependent services are available before the application starts. It includes waiting loops with clear logging messages for each service.
- The Keycloak Dockerfile has been updated to expose the new port (9000) alongside the existing one.

These changes aim to improve the resilience of the container-based deployment by ensuring that critical services are healthy before initiating the application processes.


<!--- PR #1439: https://github.com/validmind/backend/pull/1439 --->
<!--- Labels: none --->
### Enhanced comment export for documentation and monitoring reports and fixed database query issue (#1439)

This update introduces two main changes:

1) It now allows for the exportation of comments in both documentation and monitoring reports. This new feature enhances the user experience by providing more comprehensive data in the reports.

2) A fix has been implemented for an issue with the 'get comments to export' database query. This fix ensures the smooth operation of the comment export feature.

Please note that there are no breaking changes associated with this update.

Unfortunately, we are unable to provide screenshots or videos for this update as it pertains to backend changes only.

This update enhances the management and rendering of user comments associated with inventory models in various reports. The key changes include:

1. The Annotation model's method `get_user_comments_by_model_id` has been updated to accept an additional parameter (`content_type`). This change ensures that the appropriate comments are fetched based on the type of report being generated.

2. A new helper function, `render_comment_fragments`, has been introduced in the report render helpers. This function centralizes the logic for rendering comment fragments. It queries comments with the correct filters, formats comment text (e.g., stripping HTML tags), and ensures proper handling of nullable fields like `context` and `created_at`. The formatting output now conditionally includes the `context` only when it is present.

3. Adjustments have been made in the report serialization functions (`serialize_documentation_report` and `serialize_monitoring_report`) to support an `include_comments` option. When enabled, the reports now append a 'Comments' section both in the template structure and in the list of fragments rendered.

4. Unit tests have been updated to validate the new functionality. The tests now cover scenarios including:
   - Comment rendering with and without the `include_comments` flag.
   - Verification that irrelevant comments (e.g., those with a content type not matching the report type or unresolved annotations) are correctly filtered out.
   - Ensuring the helper function `_create_annotation_helper` supports the creation of annotations with the enhanced structure.

These changes enhance the robustness and flexibility of the comment handling mechanism in the backend, allowing for improved report customization and filtering.


<!--- PR #1464: https://github.com/validmind/backend/pull/1464 --->
<!--- Labels: none --->
### Enhanced security measures to prevent unauthorized access to inventory model documents (#1464)

### Changes to UI Assets Proxy Endpoint Security

We've made several enhancements to improve the security of our UI assets proxy endpoint:

- We've added an authentication requirement to the endpoint that was previously unprotected.
- We've implemented organization-level access control to ensure users can only access assets from their own organization.
- We've added support for auth token retrieval from cookies as a fallback when the Authorization header is not present.
- We've added validation logic that checks if the requested asset belongs to the user's organization.

Before these changes, the assets proxy endpoint did not require authentication and had no organization-level access controls, potentially allowing unauthorized access to private assets. Now, the endpoint is protected with authentication and organization-level access control.

### Security Enhancement: Addressing Unauthorized Access Vulnerability

This change aims to mitigate a security vulnerability that could allow unauthorized users to access private assets from other organizations. By introducing authentication mechanisms and enforcing proper access controls, we can restrict user access to assets belonging solely to their respective organizations, thereby safeguarding sensitive data.

### Release Notes

#### Security Enhancements: Authentication and Organization-Level Access Controls

This release strengthens security by adding authentication and organization-level access controls to protect private assets. Users will now only be able to access assets from their own organization, enhancing data isolation and security.

There are no breaking changes. All changes are backward compatible as legitimate users will still be able to access their assets.

This PR enhances the security posture of our application by ensuring proper authentication and authorization for asset access.

This update introduces significant enhancements to the backend's authentication and authorization logic. Here are the key changes:

1. We've added a new function, `get_token_auth_cookie`, which retrieves an access token from an authorization cookie if it's not available in the headers.

2. We've replaced the previous `get_token_auth_header` method with a new function, `get_token_auth_header_or_cookie`. This function combines both header and cookie methods to extract the token, providing more flexibility in token extraction. This function is now used in the authentication decorators, allowing for a fallback from header to cookie.

3. We've added an authentication decorator (`@requires_auth()`) to the asset serving endpoint within the UI Assets Proxy. This ensures that only authenticated users can access the API.

4. The endpoint now performs an authorization check. If the asset key contains an organization identifier, it must match the current user's organization. If there's a mismatch, an unauthorized error is raised.

These changes improve the authentication mechanism by supporting multiple token sources and ensure that assets are only accessible within the correct organizational context.


<!--- PR #1445: https://github.com/validmind/backend/pull/1445 --->
<!--- Labels: none --->
### Improved model membership evaluation to consider all user roles

This release introduces significant updates to the Authorization Flow and Role-Based Permissions. We've replaced the single-role lookup with a multi-role approach. The function `get_model_role_for_user` has been replaced by `get_all_model_roles_for_user`, which returns a list of all roles associated with a user for a specific inventory model. This supports scenarios where a user might have multiple roles.

The content type resolution has also been updated. The function `get_content_type_for_roles` now iterates over all roles assigned to the user, filtering by their permissions using a new mapping (`RolePermission.PERMISSION_TO_CONTENT_TYPE`). This allows multiple documentation types to be considered based on the specific permissions granted through each role. 

The authorization flow has been refined to work with the new multi-role structure. In the membership check, the authorized content types are now validated against the list of user roles rather than a singular role.

Data model enhancements include the addition of a new helper method, `has_permission`, in the `OrganizationRole` class to abstract permission checking. The `RolePermission` model now includes a mapping (`PERMISSION_TO_CONTENT_TYPE`) that links permission action IDs to relevant content types.

The overall objective of these changes is to improve the expressiveness and flexibility of the role-based permission system. This is a key part of the security and integrity of model access and modification operations within the application.

Please note the following considerations for these Role-Based Access Control changes:

- If any downstream code or policies assumed only a single role per user per model, those assumptions may need to be revisited.
- The function `get_content_type_for_role` is replaced by `get_content_type_for_roles` and now expects a list of roles.

We recommend reviewing and updating any documentation or downstream services that reference the old single-role logic. This change lays the groundwork for more granular or complex role-based access control in the future (#1445)

The previous model membership and authorization logic only considered the first role a user held for a model. This could lead to insufficient access and authorization errors for users with multiple roles (e.g., both "developer" and "validator"). 

In this update, we have improved the model membership and authorization logic to consider all roles a user holds for a model. Now, users with multiple roles will have access to all content types and actions permitted by any of their roles. This change enhances the flexibility and correctness of model access control.  
<!-- [Learn more ...](<relative-link>) -->

Please note the following considerations for these Role-Based Access Control changes:

- Revisiting Assumptions: If any downstream code or policies assumed only a single role per user per model, those assumptions may need to be revisited.
- Function Update: The function `get_content_type_for_role` is replaced by `get_content_type_for_roles` and now expects a list of roles.

We recommend reviewing and updating any documentation or downstream services that reference the old single-role logic. This change lays the groundwork for more granular or complex role-based access control in the future.

This release introduces significant updates to the Authorization Flow and Role-Based Permissions.

We have replaced the single-role lookup with a multi-role approach. The previous function `get_model_role_for_user` has been replaced by `get_all_model_roles_for_user`. This new function returns a list of all roles associated with a user for a specific inventory model, supporting scenarios where a user might have multiple roles.

We have also updated the content type resolution. The function `get_content_type_for_roles` now iterates over all roles assigned to the user, filtering by their permissions using a new mapping (`RolePermission.PERMISSION_TO_CONTENT_TYPE`). This allows multiple documentation types to be considered based on the specific permissions granted through each role. The default setting of the content type in the decorated function leverages these permissions. Additional logic checks for a conflicting state, such as when a user has properties of both developer and validator. An `AuthError` is raised if both permissions (`update_doc` and `update_vr`) are found simultaneously.

The authorization flow has been refined. Adjustments have been made in the decorator and in `ensure_model_membership` to work with the new multi-role structure. In the membership check, the authorized content types are now validated against the list of user roles rather than a singular role.

Data model enhancements include the addition of a new helper method, `has_permission`, in the `OrganizationRole` class to abstract permission checking. The `RolePermission` model now includes a mapping (`PERMISSION_TO_CONTENT_TYPE`) that links permission action IDs to relevant content types. This mapping will be expanded as support for multiple document types grows.

The overall objective of these changes is to improve the expressiveness and flexibility of the role-based permission system. This is a key part of the security and integrity of model access and modification operations within the application.


<!--- PR #1485: https://github.com/validmind/backend/pull/1485 --->
<!--- Labels: none --->
### "Reverted changes to unauthorized access prevention for inventory model assets" (#1485)

This release does not include any breaking changes.

Here are the before and after screenshots for both the desktop and mobile versions:

Desktop Version:

Homepage:

Before:
![Homepage Before](desktop-homepage-before.png)  

After:
![Homepage After](desktop-homepage-after.png)

About Us Page:

Before:
![About Us Before](desktop-aboutus-before.png)  

After:
![About Us After](desktop-aboutus-after.png)

Mobile Version:

Homepage:

Before:
![Homepage Before](mobile-homepage-before.png)  

After:
![Homepage After](mobile-homepage-after.png)

About Us Page:

Before:
![About Us Before](mobile-aboutus-before.png)  

After:
![About Us After](mobile-aboutus-after.png)

In this update, we've made significant changes to the authentication process and the User Interface (UI) assets proxy endpoint.

For the authentication process, we've streamlined operations by removing the fallback logic that previously allowed token extraction from cookies. As a result, the functions `get_token_auth_cookie` and `get_token_auth_header_or_cookie` have been eliminated. Authentication now strictly relies on the token provided in the header using `get_token_auth_header`.

In the UI assets proxy endpoint, we've removed the `requires_auth` decorator and stripped out the organization access check logic. The assets endpoint now directly retrieves a pre-signed URL from the object storage without validating the user's organization. Please note that this simplification could impact previously enforced authorization checks for asset access.


<!--- PR #1490: https://github.com/validmind/backend/pull/1490 --->
<!--- Labels: none --->
### "Debug mode removed from API service startup command" (#1490)

The current release does not include any breaking changes.

In this update, we have removed the debugpy integration from the API service startup command in the `docker-entrypoint.sh` file. Previously, the container would launch the API service with debugpy enabled, listening on `0.0.0.0:5678`. Now, the command directly starts the API service using `ddtrace-run`, without invoking debugpy. This change simplifies the startup process, particularly for production deployments where remote debugging is not required or desired.


<!--- PR #1483: https://github.com/validmind/backend/pull/1483 --->
<!--- Labels: none --->
### Introducing `pg_stat_statements` extension management for PostgreSQL databases (#1483)

We have added an extension for profiling. This enhancement will allow users to better monitor and analyze the performance of their applications.

This release introduces a migration script for managing the `pg_stat_statements` extension in a PostgreSQL database. The script checks for the extension's existence and creates it if it's not already present.

The upgrade function connects to the database and executes a query to determine if the `pg_stat_statements` extension is installed. If it's not, the function creates the extension using a conditional SQL command. Afterward, it retrieves and displays the current version of the extension for your information.

Please note that the downgrade function is currently a placeholder and does not implement any rollback logic.

The changes in this release focus solely on managing the `pg_stat_statements` database extension. This ensures that the monitoring features provided by `pg_stat_statements` are available without duplicating the extension if it already exists.


<!--- PR #1492: https://github.com/validmind/backend/pull/1492 --->
<!--- Labels: none --->
<!--- ### Updated production version to `prod-1.30.8` (#1492) --->
<!-- No release notes or summary provided. -->


<!--- PR #1496: https://github.com/validmind/backend/pull/1496 --->
<!--- Labels: none --->
<!--- ### Updated production to version `1.30.8` (#1496) --->
<!-- No release notes or summary provided. -->


<!--- PR #1424: https://github.com/validmind/backend/pull/1424 --->
<!--- Labels: none --->
### Ensure `ruff` scans all files to prevent skipping warnings (#1424)

This update introduces several enhancements aimed at improving code formatting consistency and refining lint exception comments. Here are the changes you can expect:

- The Makefile has been updated to run ruff commands with the `--no-cache` option. This ensures that the most recent code analysis is used without relying on cached results, potentially identifying new issues more effectively.

- Various migration scripts have been modified. The verbose `# noqa: B950` markers have been removed and replaced with a shorter `# noqa`. This simplifies the code without affecting the intended lint suppression.

- Some import statements in a few modules have been reordered to enhance consistency and potentially resolve minor dependency ordering issues.

- A test in the object storage service has been adjusted to use the same simplified `# noqa` format for the KMS key configuration string.

These changes primarily impact code formatting and clarity, with no changes to functionality.


<!--- PR #1379: https://github.com/validmind/backend/pull/1379 --->
<!--- Labels: dependencies, go --->
### Updated `golang.org/x/net` from version 0.34.0 to 0.38.0 in `casbin-server` (#1379)

This update focuses on enhancing the Go toolchain and several indirect dependencies. Specifically, we've upgraded the Go toolchain from `go1.23.1` to `go1.24.1` and updated the versions for modules such as `golang.org/x/crypto`, `golang.org/x/net`, `golang.org/x/sys`, and `golang.org/x/text`. These changes are reflected in the updated `go.mod` and `go.sum` files.

These updates help keep the project current with the latest features, improvements, fixes, and performance enhancements in the Go ecosystem. Importantly, these changes do not alter any functional business logic. Instead, they ensure that the project can benefit from the latest upstream changes and compatibility improvements provided by these upgrades.

<!-- Image: https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=golang.org/x/net&package-manager=go_modules&previous-version=0.34.0&new-version=0.38.0 -->

<!--- PR #1336: https://github.com/validmind/backend/pull/1336 --->
<!--- Labels: none --->
### Add `Keycloak` entrypoint to `Dockerfile` (#1336)

This update introduces two main changes to the Keycloak service configuration:

1. **Removal of Volume Mounts:** The volume mounts for the Keycloak configuration files (`realm-export.json`, `themes`, and `entrypoint.sh`) in the `docker-compose` file have been removed. These files are now incorporated into the Docker image during the build process, as specified in the Dockerfile. This change is designed to simplify deployment by including the necessary assets at the time of image creation.

2. **Modification of Environment Variable:** The environment variable has been changed from `KC_DB_DATABASE` to `KC_DB_DtATABASE`. This could be an intentional alteration or a typographical error. It's crucial to confirm whether the new variable name is accurate and aligns with the anticipated configuration in downstream components.

In summary, this update improves the deployment process by integrating configuration files into the image, thus reducing dependence on host-based volume mounts. However, it's important to be cautious about the environment variable change to avoid any potential issues.


<!--- PR #1405: https://github.com/validmind/backend/pull/1405 --->
<!--- Labels: none --->
### Trigger workflow when an `InventoryModel` attribute changes (#1405)

This release introduces several significant enhancements to the workflow trigger mechanism and inventory model field update handling. Here are the key changes:

- The concurrency of celery workers has been increased from 5 to 6 in the Makefile, which may enhance parallel task processing.

- A new migration has been added to introduce an optional "trigger_field_key" column in the workflows table. This feature allows workflows to be triggered based on specific field changes in inventory models.

- The InventoryModel update method has been updated to return both the updated field information and the old value. This change enables further processing by triggering background tasks.

- The Workflow model has been expanded:
   - It now supports an additional trigger type and has extended its allowed entities and events with a new "InventoryModel.field" type and an "updated" event type.
   - New helper properties (is_deleted and is_enabled) have been added for easier status checking.
   - The workflow serialization method now includes the new trigger_field_key.

- The workflow validation methods have been enhanced to validate the trigger_field_key along with type, entity name, and event type. The validation errors now use a custom BadRequestError with more descriptive error messages.

- The API endpoints in the UI routes for workflows and inventory models have been updated to pass and process the trigger_field_key. Specifically, when a model field changes, a new celery task (on_model_field_change) is triggered to process workflow executions.

- The WorkflowManager's start_execution method now includes type hints and improved documentation. Minor adjustments in test files ensure that date comparisons use timezone-aware datetime objects.

These changes improve the robustness and clarity of the workflow triggering mechanism with extended support for specific field updates in inventory models and refined error handling.


<!--- PR #1482: https://github.com/validmind/backend/pull/1482 --->
<!--- Labels: none --->
### Prevent administrators from modifying staff roles (#1482)

We have made an update to enhance security within our system. Administrators will no longer be able to modify staff roles using the `PATCH /api/v1/roles/<protected_role_id>/permissions` command. This change addresses a potential security vulnerability where admins could previously alter staff roles.

Please note that this update may introduce breaking changes. We recommend reviewing your current setup to ensure compatibility.

We have also made some visual changes to our Homepage and Profile Page. Here are the before and after screenshots for your reference:

Homepage:
![Homepage Before](homepage_before.png)
![Homepage After](homepage_after.png)

Profile Page:
![Profile Before](profile_before.png)
![Profile After](profile_after.png)

This release includes a refactor of the role management endpoints in the backend. The key changes are:

1. **Consistent Naming**: The variable previously named `orgRole` has been renamed to `org_role` throughout the GET and PATCH endpoints. This change follows snake_case conventions and improves code readability.

2. **Enhanced Role Protection**: An additional check has been introduced in the PATCH endpoint to prevent modifications to roles marked as `staff`. This is similar to the existing constraint for `admin` roles, ensuring that both admin and staff roles remain immutable via this endpoint.

3. **Minor Refactoring**: This release includes systematic renaming and minor logic adjustments to maintain consistency across related queries and handling of permissions. These changes improve maintainability and enforce proper role-based restrictions within the application.


<!--- PR #1475: https://github.com/validmind/backend/pull/1475 --->
<!--- Labels: none --->
### Improved security with enhanced template retrieval logic

This release introduces two main updates:

We've reformatted the assignment of the `SQLALCHEMY_MAX_OVERFLOW` setting in the backend API configuration (`src/backend/api.py`) for better code readability. This change does not affect functionality but ensures consistency with other multiline assignments.

We've also enhanced the template retrieval logic (`src/backend/routes/ui_templates.py`). Previously, templates were retrieved based solely on a unique identifier. Now, the query also filters based on the current user's organization (using `g.current_user_org.id`). This ensures that users can only access templates belonging to their own organization, enhancing data integrity and security.

Minor import reordering and cleanup have been performed in `src/backend/routes/ui_assets_proxy.py` to improve overall code organization and clarity.

Please note, we have made some significant changes that may affect your current setup. Review the following breaking changes:

- [List of breaking changes]

We've also made some visual updates to our frontend. To help you understand these changes, we've provided some before and after screenshots and videos:

- [Add screenshots or videos showing before/after] (#1475)

In this release, we have made some significant changes that may affect your current setup. Please review the following breaking changes:

- [List of breaking changes]

We've also made some visual updates to our frontend. To help you understand these changes, we've provided some before and after screenshots and videos:

- [Add screenshots or videos showing before/after]

This release introduces two main updates:

In the backend API configuration (`src/backend/api.py`), the assignment of the `SQLALCHEMY_MAX_OVERFLOW` setting has been reformatted for better code readability. This change does not affect functionality but ensures consistency with other multiline assignments.

The template retrieval logic (`src/backend/routes/ui_templates.py`) has been enhanced. Previously, templates were retrieved based solely on a unique identifier. Now, the query also filters based on the current user's organization (using `g.current_user_org.id`). This ensures that users can only access templates belonging to their own organization, enhancing data integrity and security.

Additionally, minor import reordering and cleanup have been performed in `src/backend/routes/ui_assets_proxy.py` to improve overall code organization and clarity.


## Frontend
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/frontend/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/frontend/compare/32c1fd2869b3a69d9ed75be917d9be0589822872...32c1fd2869b3a69d9ed75be917d9be0589822872 --->

### Enhancements


<!--- PR #1347: https://github.com/validmind/frontend/pull/1347 --->
<!--- Labels: enhancement --->
### Trigger workflow on model field change (#1347)

In the latest update, we've introduced a new feature for creating workflows. Now, you have access to a new Trigger type called "On Model Field Change". This feature allows you to select an inventory model field to monitor for changes, which will then initiate the workflow execution.

For more details, please visit the [GitHub Link](https://github.com/user-attachments/assets/4f0fa1d1-0484-401e-a012-923d4cc6503e).

API Changes:

- Adjustments have been made to the GET endpoint in the API to correctly format the URL string by eliminating an unnecessary line break in the template literal.
- A new optional parameter, `triggerFieldKey`, has been introduced to the PostWorkflow API call. This allows workflows to capture a custom trigger field key.

Workflow Modal Enhancements:

- The Workflow Modal component now imports additional context and utility methods. The `UsersContext` and `getSchemaPropertyByKey` functions are utilized to dynamically construct a list of available fields from the organization's inventory model schema.
- A new workflow trigger type, `MODEL_FIELD_CHANGE`, has been introduced. When this is selected, the UI presents a dropdown for users to select the specific field that will trigger the workflow.
- The modal has been updated to support dynamic behavior based on the selected trigger type. Specifically, when the `MODEL_FIELD_CHANGE` trigger is selected, the form captures and passes the `field_name` to the API.
- The component now resets error states when the modal is opened or closed. It also includes conditional logic to adjust entity names and event types depending on whether the workflow is initiated by a field change event or a regular model registration event.

Model Updates:

- Enumerations for `TriggerType`, `EntityName`, and `EntityEventType` have been expanded to accommodate the new `MODEL_FIELD_CHANGE` trigger. This ensures that workflows can properly manage both field-based modifications and traditional events.

These changes enhance the flexibility of workflow triggering mechanisms and improve the dynamics of the user interface for workflow creation and editing.


<!--- PR #1339: https://github.com/validmind/frontend/pull/1339 --->
<!--- Labels: enhancement --->
### Enhanced ability to delete workflows (#1339)

This update introduces a new feature that allows for 'soft-deleting' workflows. With this feature, users can delete a workflow, but any executions currently using the deleted workflow will continue to run. However, the deleted workflow will be removed from the active workflows listing and future executions will be prevented from running.

API Enhancements:

- A new function, `GetWorkflowModelDependenciesCount`, has been introduced. This function retrieves the number of models that depend on a given workflow. It is primarily used to warn users about the potential impact before they delete a workflow.
- Another new function, `DeleteWorkflow`, has been added. This function sends a DELETE request to remove the specified workflow.

New UI Components:

- A new component, `WorkflowDeleteModal`, is now available. This modal provides a confirmation dialog for deleting workflows. It displays additional warnings if the workflow is used by models (using the dependency count), and handles success and error scenarios with toast notifications.
- Enhancements have been made to the `ExecutionDetails` component. An alert is now shown to indicate if a workflow has been deleted. This ensures users understand that even though the workflow is deprecated, current executions will continue normally.
- The workflow listing page, `WorkflowList`, now includes a delete option. This option triggers the dependency count check and then opens the delete modal, facilitating safer deletion of workflows.

Model Update:

- A new field, `deleted_at`, has been added to the Workflow model. This field tracks when a workflow has been deleted. The UI uses this information to conditionally render warnings.

These changes aim to provide a robust mechanism for workflow deletion. They prevent accidental removal when dependencies exist and improve user feedback during the deletion process.


<!--- PR #1328: https://github.com/validmind/frontend/pull/1328 --->
<!--- Labels: enhancement --->
### Implemented improved template swap and merge experience (#1328)

Version 2.0.0 introduces a new feature: Update from Template. This feature enables users to merge a template into an existing one, providing the flexibility to selectively add, ignore, delete, and keep changes.

This update introduces several significant functional enhancements and user interface improvements:

We have updated the project version from 1.33.3 to 1.33.4 and added new dependencies related to drag-and-drop functionality, such as @minoru/react-dnd-treeview and react-dnd. These additions enable advanced template manipulation capabilities.

We have replaced the old SwapTemplate function with a new function, CreateAndSwapTemplate. This new function consolidates the creation and swapping of document templates into a single API call, improving clarity and reusability in handling template updates.

Several user interface components, including AddFindingModal, AttributesRailDocumentOverview, AttributesRailMonitoringOverview, and AttributesRailValidationReportOverview, have been updated to refine user interactions. Notable changes include:
- Updated trigger labels (for example, "Add Finding" has been modified to "Add Model Finding") for improved clarity.
- Enhanced layout and integration of menu components with options to view template details or initiate a template update.
- Consistent use of Chakra UI components with added modals and menus for handling template view and swap operations.

We have introduced a comprehensive new component, SwapTemplateModal. This modal provides a drag-and-drop tree view allowing users to compare the active working template with a selected template version. Users can mark sections and blocks with statuses such as ADD, KEEP, IGNORE, or DELETE, and the user interface guides them to resolve any invalid configurations before applying changes.

Minor modifications in the template model include making the parent section optional and introducing a global_id field, which help support the new swapping logic.

Overall, these changes focus on providing a more streamlined and interactive approach to managing and swapping document templates within the application.


<!--- PR #1351: https://github.com/validmind/frontend/pull/1351 --->
<!--- Labels: enhancement, refactor --->
### Approval process notes added to activity log (#1351)

We've made changes to the Approval Vote Activity Display. Now, the display includes the reviewer's avatar, name, and notes within the approval vote activity, all integrated with the existing text. This enhancement provides a more comprehensive view of the approval process, making it easier to track changes and decisions.

The rendering of the voter now uses the approval voter columns list component for consistency. Please note that these changes were implemented without specific design guidance, and we welcome feedback from the design team for alternative implementations.

Here's a look at the changes:

Before:
![activity-voted-before](https://github.com/user-attachments/assets/1d223bca-e325-41a5-b711-bb6279734ef5)

After:
![activity-voted-after](https://github.com/user-attachments/assets/1192b553-622c-4c0e-8f70-d2c374e10a17)
![activity-voted-popover-after](https://github.com/user-attachments/assets/82069d26-a0f9-4636-a6fa-f619d3ac658c)

From the Inventory Model Activity Tab:
![activity-voted-after](https://github.com/user-attachments/assets/ed419ad3-a0a3-4ab7-9c9c-4c1019ae0bf6)
![activity-voted-popover-after](https://github.com/user-attachments/assets/22c539f2-30d3-48a0-b705-568f6c81b934)

In summary, we've added workflow approval step voter notes to the activity log. This update will help streamline your workflow and make tracking changes more efficient.

This update introduces several functional enhancements and refactors across the application to improve user experience and code maintainability. Here are the key changes:

In the EventRowLayout component, we've added collapsible content to display additional details such as vote notes when available. An IconButton now toggles a Collapse element, and the display icon switches between a downward and upward chevron accordingly.

We've also introduced new components related to workflow approvals:
- ApprovalActionButtons: This provides a consistent button group for approving or rejecting votes with appropriate color schemes and iconography.
- ApprovalHeader: This displays the approval title and message in a more structured layout.
- ApprovalVoterCard: This renders voter information with an optional popover for vote notes, enhancing usability when notes are present.
- VoteDetailsModal: This offers a modal for detailed viewing of vote notes in a read-only textarea.
- VoterStatusColumn and associated constants: These aid in organizing and displaying voter statuses in columns based on their vote state, using a uniform look for all statuses.

Lastly, we've cleaned up some redundant code and inline commented sections, replacing them with reusable components. This improves overall maintainability and readability of the code.

Overall, this update increases the modularity of the code and offers a richer, more interactive user interface for event and workflow approval processes.

<!-- Image: https://github.com/user-attachments/assets/1d223bca-e325-41a5-b711-bb6279734ef5 -->
<!-- Image: https://github.com/user-attachments/assets/1192b553-622c-4c0e-8f70-d2c374e10a17 -->
<!-- Image: https://github.com/user-attachments/assets/82069d26-a0f9-4636-a6fa-f619d3ac658c -->
<!-- Image: https://github.com/user-attachments/assets/ed419ad3-a0a3-4ab7-9c9c-4c1019ae0bf6 -->
<!-- Image: https://github.com/user-attachments/assets/22c539f2-30d3-48a0-b705-568f6c81b934 -->
<!-- Image: https://github.com/user-attachments/assets/a873f63f-53f1-479c-83cb-c34b06abe475 -->
<!-- Image: https://github.com/user-attachments/assets/31888669-60df-41b1-89ba-ae9c4a187255 -->

<!--- PR #1359: https://github.com/validmind/frontend/pull/1359 --->
<!--- Labels: enhancement, good first issue, javascript --->
### Introduce the ability to include comments in exported validation reports (#1359)

We have introduced the ability to export comments from validation reports. Previously, this feature was not available. Now, users can choose to include comments in their exported validation reports, although this feature is turned off by default.

This update corresponds to a backend change, which can be found at https://github.com/validmind/backend/pull/1429.

To export comments, a checkbox has been added to the user interface. When this box is checked, the backend is instructed to include comments in the validation report.

This new feature provides the option to include comments left in validation reports when exporting the document. These comments will be included in the appendix of the exported document.

Please note that there are no breaking changes associated with this update.

A new checkbox labeled "include comments left on document" has been added to the user interface. This can be seen in the following screenshot:

![Screenshot](https://github.com/user-attachments/assets/deff2eda-b081-44fc-bb6f-2e3cbf759da9)

We have enhanced the report download functionality in this release. A new option, `includeComments`, has been introduced. This option, when enabled, allows users to include comments in the downloaded report data. 

In the API, the `DownloadReport` function now accepts this optional boolean parameter. Correspondingly, the front-end component, `DownloadValidationReportModal`, includes a checkbox for users to toggle this option. 

The User Interface (UI) has been updated to manage this new state. The API call has been modified to pass the `include_comments` parameter, ensuring that the requested report includes comments when specified. This enhancement provides users with more comprehensive report data, including valuable commentary.


<!--- PR #1372: https://github.com/validmind/frontend/pull/1372 --->
<!--- Labels: enhancement --->
### Enable deletion of roles and stakeholder types (#1372)

### New Features

#### Roles & Role Detail Page
- We've added delete buttons along with a confirmation prompt to both the list of roles and the role detail page.
- We've introduced an API.ts call for deleting roles.

#### Stakeholder Types & Stakeholder Type Details Page
- We've added delete buttons along with a confirmation prompt to both the list of stakeholder types and the stakeholder type details page.
- We've added the stakeholder type settings menu item, as described in the [ValidMind documentation](https://docs.validmind.com/guide/configuration/manage-model-stakeholder-types.html).

### Updates

#### General
- We've updated group deletion to use a reusable component for better efficiency.
- We've updated the styling across the platform for a more consistent user experience.

### Additional Information
Please note that the roles details page is reused for the stakeholder type detail page with slight differences. The API roles delete endpoint is also reused for stakeholder type deletion requests.

### User Attachments
You can view the related user attachments [here](https://github.com/user-attachments/assets/fa8dd882-6067-4a76-9d87-55013d912464).

This update introduces several functional improvements focused on role deletion and confirmation dialogs within the application. Here are the key changes:

A new API method, `DeleteRole`, has been added to the API module. This method supports the deletion of roles by calling an Axios DELETE endpoint.

The deletion confirmation workflow has been standardized using a new `DeleteConfirmationAlert` component. This component is now used across multiple pages including `Group`, `RoleDetails`, `Roles`, and `Stakeholders` to confirm deletion actions. It provides a consistent user experience and custom messages.

Existing components like `DangerMenuItem` have been updated with refined styling. This better indicates destructive actions through adjusted color and background properties.

The `RoleDetails` page now supports deletion of roles and stakeholder types. This is achieved by integrating the new confirmation dialog and providing detailed deletion messages explaining the impact of the action.

The `Roles` and `Stakeholders` listing pages have been updated to allow role deletion via a contextual menu. The implementation uses react-query mutations to trigger deletion operations. It ensures that on success, the queried data is invalidated to reflect the changes immediately.

Minor UI copy adjustments have been made in the `AddRoleModal` to clearly differentiate between adding a new role and adding a stakeholder type.

These changes improve the consistency of deletion flows throughout the application. They ensure that users are well-informed and deliberate when performing potentially destructive actions.

<!-- Image: https://github.com/user-attachments/assets/f3566939-008c-40de-8c43-2893a582fe0c -->

<!--- PR #1371: https://github.com/validmind/frontend/pull/1371 --->
<!--- Labels: enhancement, good first issue, javascript --->
### Introduce feature to include comments in exported monitoring and documentation reports (#1371)

We have introduced a new feature that allows the export of comments from monitoring reports and documentation reports. This feature is an extension of the existing flags and is set to off by default. This change follows up on a previous update where we added a new field for validation reports.

This new feature was implemented to enhance the customer comment viewing experience. Now, when exporting a document, you have the option to include comments left in monitoring reports and documentation reports. These comments will be appended at the end of the document. Please note that only comments that have been resolved will be included in the exported document.

There are no breaking changes associated with this update.

Here is a screenshot of the new feature:

![Screenshot](https://github.com/user-attachments/assets/b7911da3-11e8-4884-b478-7a7bc9318671)

This update introduces several enhancements to the user interface and additional configuration options in the export modals throughout the application. These improvements are specifically designed to enhance the export experience for Model Documentation, Validation Report, and Monitoring Report modals.

Key changes include:

- A new "Include comments" checkbox in each modal. This feature allows users to decide if comments should be included in the exported file. The checkbox status is managed using a new state variable and is passed to the API call as needed.

- User interface improvements achieved by replacing certain layout components with more consistent alternatives. For example, HStack is now used for grouping text and popover components, enhancing alignment and spacing for a more coherent user experience.

- The MoreInfoPopOver component is now directly integrated within the header or section text. This provides users with contextual help regarding document exporting.

- Minor adjustments have been made to spacing and aria-label attributes on buttons, specifically the download buttons, to improve accessibility.

- The update streamlines the configuration experience for generating export documents by removing redundant file format selection. Now, there is a single, focused checkbox option for including comments.

<!-- Image: https://github.com/user-attachments/assets/ce04734f-4c15-4aa9-993c-d04c4c25d1ef -->
<!-- Image: https://github.com/user-attachments/assets/c4be76c5-2f99-41d5-88be-dcc72b242f54 -->
<!-- Image: https://github.com/user-attachments/assets/c969ca78-ddef-438d-8a79-6b866246d3f8 -->

<!--- PR #1393: https://github.com/validmind/frontend/pull/1393 --->
<!--- Labels: enhancement --->
### Introducing a new workflow step: "Run Workflow" (#1393)

We've introduced a new workflow step, "Run Workflow". This feature allows you to target any manual-trigger workflow and execute it. 

We've also updated the styling for the workflow node boxes. The changes aim to provide more consistency in terms of color, outline, and selection for both the zoom-in and zoom-out versions of configured and unconfigured node boxes. 

These updates are in response to the breaking change in [ValidMind's backend PR #1463](https://github.com/validmind/backend/pull/1463). 

Please note that there are no breaking changes for the frontend with this update. 

For a visual representation of these changes, please refer to the [User Attachments Assets](https://github.com/user-attachments/assets/3ffbdfb1-e330-4d8f-be3a-5eb9cb962559).

This release introduces several functional enhancements and bug fixes:

- **UI & Spinner Update:** We've updated multiple components across the application to remove hardcoded color properties from spinners. Spinners now rely on theme defaults, ensuring consistent styling.

- **Workflow API Enhancements:** We've improved the API functions for fetching workflows. The `GetWorkflows` function now supports pagination and optional filtering by trigger type. We've also added a new API function, `GetWorkflowDependencies`, which retrieves both the model dependency count and a list of workflows that depend on a given workflow. This helps users make informed decisions when deleting workflows.

- **Workflow Deletion Modal Improvements:** The delete modal for workflows now handles dependency errors more gracefully. If a workflow can't be deleted due to existing dependencies, a warning alert is shown, along with a list of dependent workflows (with links to their details). The delete button also becomes disabled.

- **New Run Workflow Feature:** We've implemented a new run workflow node and its associated panel. This node allows users to trigger another workflow and is integrated into the workflow canvas with proper UI components. It supports configuration via an inline dropdown that paginates the workflow options using the new `useWorkflows` hook.

- **UI Consistency & Debug Enhancements:** We've made minor UI tweaks to several node components, such as border styling changes and updated rounding. We've also added inline inspection popovers to aid debugging. Additional components like `NodeBox` now display contextual data to assist builders in troubleshooting workflows.

### Bug fixes


<!--- PR #1361: https://github.com/validmind/frontend/pull/1361 --->
<!--- Labels: bug --->
### Always declare explicit content blocks in templates (#1361)

We have made a change to the documentation sections. They will no longer contain default text blocks for each section. Instead, an empty state will be displayed, prompting you to "Add New Block". This change was necessary because the default text blocks were causing a bug that prevented their deletion as they were tied to sections by ID.

We have fixed a bug that was preventing some sections from being deleted. Please note that there are no breaking changes associated with this update.

Before this update, the documentation sections looked like this:
![Before Update](https://github.com/user-attachments/assets/d5791f82-f757-4f9b-9116-95ced6605d38)

After the update, the documentation sections will look like this:
![After Update](https://github.com/user-attachments/assets/d8dfd992-d137-4e07-913c-18a9695afdac)

This update refactors the menu rendering logic within the BlockExplorer component to enhance flexibility and reusability. Key changes include:

1. The introduction of a new MenuWrapper component. This component consolidates the menu display logic and the DocumentBlockModal configuration, reducing duplication as the menu is used in multiple places within the BlockExplorer component.

2. The addition of a new optional property, `customRender`, to the `BlockExplorerProps`. When provided, BlockExplorer renders using the `customRender` method wrapped within the MenuWrapper. This allows for customized UI behavior, such as presenting an empty state display with an 'Add New Block' button.

3. Updates in `DocumentationPage` to leverage the new `customRender` feature of BlockExplorer. This change provides a cleaner and more context-sensitive empty state where users are prompted to start building the section. The `MenuButton` is used to trigger focus via the `setIsFocused` callback.

4. Minor behavior changes, such as modifying the `getInitialSectionContents` function to return an empty array instead of a default content block. This ensures that empty sections are truly empty when appropriate.

These changes aim to improve modularity, reduce duplication, and provide developers with more control over how blocks and menus are rendered within the application.


<!--- PR #1336: https://github.com/validmind/frontend/pull/1336 --->
<!--- Labels: bug --->
### Enhanced error handling for organization creation failures (#1336)

In the previous version, any errors raised by the backend were only presented by their error code. With this update, we have improved the error handling in the organization on-boarding flow. Now, helpful error messages from the backend can be presented to the user. If no specific message is available, the default error message will be displayed.

Here's a screenshot of the improved frontend:

![frontend-initial-error-password](https://github.com/user-attachments/assets/b826d6c5-7a84-4ba2-b5f9-59b2ad50c381)

This update enhances the error handling logic in the BootstrapForm component. Now, the form prioritizes displaying a detailed error message retrieved from the API response over the generic error message. This change improves the clarity of error feedback provided to users during organization creation failures. The chosen error message is stored in a local variable (`errorMessage`) and is used consistently in both inline error displays and toast notifications.

Additionally, this update ensures that if the backend provides a more descriptive error message, it will be used. This enhancement makes troubleshooting and user guidance more effective.

<!-- Image: https://github.com/user-attachments/assets/b826d6c5-7a84-4ba2-b5f9-59b2ad50c381 -->
<!-- ### Changes with no label -->


<!--- PR #1390: https://github.com/validmind/frontend/pull/1390 --->
<!--- Labels: none --->
<!--- ### Merging main branch into staging for version `1.34.2` (#1390) --->
<!-- No release notes or summary provided. -->


<!--- PR #1411: https://github.com/validmind/frontend/pull/1411 --->
<!--- Labels: none --->
<!--- ### Merged main branch into staging for version `1.34.4` (#1411) --->
<!-- No release notes or summary provided. -->


<!--- PR #1404: https://github.com/validmind/frontend/pull/1404 --->
<!--- Labels: none --->
<!--- ### Merged main branch into staging for version `1.34.4` (#1404) --->
<!-- No release notes or summary provided. -->


<!--- PR #1389: https://github.com/validmind/frontend/pull/1389 --->
<!--- Labels: none --->
<!--- ### Merging staging hotfixes into the main branch (#1389) --->
<!-- No release notes or summary provided. -->


<!--- PR #1398: https://github.com/validmind/frontend/pull/1398 --->
<!--- Labels: none --->
<!--- ### Merged main branch into staging for version 1.34.4 (#1398) --->
<!-- No release notes or summary provided. -->


<!--- PR #1400: https://github.com/validmind/frontend/pull/1400 --->
<!--- Labels: none --->
<!--- ### Production update to version `prod-1.34.4` (#1400) --->
<!-- No release notes or summary provided. -->


<!--- PR #1391: https://github.com/validmind/frontend/pull/1391 --->
<!--- Labels: none --->
<!--- ### Production update to version `prod-1.34.2` from staging (#1391) --->
<!-- No release notes or summary provided. -->


<!--- PR #1412: https://github.com/validmind/frontend/pull/1412 --->
<!--- Labels: none --->
<!--- ### Production update to version `prod-1.34.4` (#1412) --->
<!-- No release notes or summary provided. -->


<!--- PR #1392: https://github.com/validmind/frontend/pull/1392 --->
<!--- Labels: none --->
### "Introducing cookie-based authentication for asset access" (#1392)

This update introduces support for cookie-based authentication as an alternative to authorization headers when accessing assets. Previously, assets could only be accessed with an Authorization header. However, HTML img tags and similar elements can't set custom headers when requesting assets. This limitation made assets embedded in HTML inaccessible when authentication was required.

With this update, the system will first try to authenticate using the Authorization header. If that fails, it will attempt to authenticate using the "authToken" cookie. This change makes assets accessible to properly authenticated users even in HTML contexts.

This update is crucial because assets are typically embedded into HTML img tags, which lack the ability to set an auth header. Without this change, authenticated users couldn't view assets embedded in HTML documentation, reports, and other UI components. Cookie-based authentication provides a secure alternative authentication method for these scenarios.

Additionally, this update addresses a security issue where unauthorized users could potentially access assets from organizations they don't belong to.

In terms of user-facing changes, this update improves the display of images and other media in documentation, reports, and other sections of the application.

This update also includes a security enhancement related to organization-specific access control.

This update introduces several improvements to the MainApp component and related modules. Here are the key changes:

1. A new feature has been added that sets an authentication token as a cookie when an access token is present. This cookie serves as an alternative to using the auth token, especially for serving assets. This change ensures that asset requests can authenticate users through the cookie.

2. We've refactored several onSuccess and event handler callbacks to consistently wrap arrow function parameters in parentheses, enhancing readability and consistency across the codebase.

3. Minor refactoring has been applied to code formatting in the mapping of roles and permissions, as well as in the JSX routing components. This standardizes the styling without altering the underlying functionality.

In summary, besides improvements in style consistency, the main functional enhancement is the addition of the auth token as a cookie.


<!--- PR #1402: https://github.com/validmind/frontend/pull/1402 --->
<!--- Labels: none --->
### Enhanced security with HTML sanitization in `dangerouslySetInnerHTML`

We've introduced a significant security enhancement to our application by integrating DOMPurify. This change sanitizes HTML content before it's rendered, using React's `dangerouslySetInnerHTML`. Here are the key updates:

- The DOMPurify dependency has been added to `package.json` and `package-lock.json`, enabling HTML sanitization throughout the application.
  
- A new utility function, `sanitizeHtml`, has been introduced in the utils module. This function wraps `DOMPurify.sanitize` and is used across multiple components.

- Various components, including CommandPalette, DocumentChecker, FindingsList, GenerateWithAIModal, JSONLogicHumanizer, CustomText, and TemplateEditor, have been updated to sanitize dynamic HTML content before rendering. This step helps prevent potential cross-site scripting (XSS) attacks by ensuring that any HTML string passed to `dangerouslySetInnerHTML` is properly cleaned.

- Minor code formatting improvements have been made in utility functions and other small refactors in some components to ensure consistency.

These changes significantly enhance the security of our application by ensuring that any user-generated or dynamic HTML content undergoes sanitization before being injected into the DOM. This results in a safer rendering process when displaying content from external sources or user inputs.

We've added the DOMPurify library to sanitize HTML content before using `dangerouslySetInnerHTML` in React components. This change prevents Cross-Site Scripting (XSS) attacks. Prior to this update, unsanitized HTML was being directly rendered, which could have created potential security vulnerabilities. Now, all HTML is sanitized through a centralized utility function before rendering.

The use of React's `dangerouslySetInnerHTML` without sanitization can expose the application to XSS attacks. By ensuring all HTML content is properly sanitized before rendering, we've enhanced the security of our application.

This update improves the security for HTML rendering in the user interface (UI) by implementing sanitization that prevents XSS attacks while maintaining proper content display.

There are no special deployment considerations for this update. It's a standard security enhancement that requires only the addition of the DOMPurify package.

This update implements DOMPurify version 3.2.5. The `sanitizeHtml` utility function has been configured to allow the "target" attribute on links while sanitizing all other potentially dangerous HTML content (#1402)

We've added the DOMPurify library to sanitize HTML content before using `dangerouslySetInnerHTML` in React components. This change prevents Cross-Site Scripting (XSS) attacks. Prior to this update, unsanitized HTML was being directly rendered, which could have created potential security vulnerabilities. Now, all HTML is sanitized through a centralized utility function before rendering.

The use of React's `dangerouslySetInnerHTML` without sanitization can expose the application to XSS attacks. By ensuring all HTML content is properly sanitized before rendering, we've enhanced the security of our application.

This update improves the security for HTML rendering in the user interface (UI) by implementing sanitization that prevents XSS attacks while maintaining proper content display.

There are no special deployment considerations for this update. It's a standard security enhancement that requires only the addition of the DOMPurify package.

This update implements DOMPurify version 3.2.5. The `sanitizeHtml` utility function has been configured to allow the "target" attribute on links while sanitizing all other potentially dangerous HTML content.

This update introduces a significant security enhancement to our application. We have integrated DOMPurify into our codebase to sanitize HTML content before it is rendered, using React's `dangerouslySetInnerHTML`. Here are the key changes:

- We have added the DOMPurify dependency to `package.json` and `package-lock.json`. This enables HTML sanitization throughout the application.
  
- We have introduced a new utility function, `sanitizeHtml`, in the utils module. This function wraps `DOMPurify.sanitize` and is used across multiple components.

- We have updated various components, including CommandPalette, DocumentChecker, FindingsList, GenerateWithAIModal, JSONLogicHumanizer, CustomText, and TemplateEditor, to sanitize dynamic HTML content before rendering. This step helps prevent potential cross-site scripting (XSS) attacks by ensuring that any HTML string passed to `dangerouslySetInnerHTML` is properly cleaned.

- We have also made minor code formatting improvements in utility functions and other small refactors in some components to ensure consistency.

These changes significantly enhance the security of our application by ensuring that any user-generated or dynamic HTML content undergoes sanitization before being injected into the DOM. This results in a safer rendering process when displaying content from external sources or user inputs.


## Agents
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/agents/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/agents/compare/b86ed7335b2cdc8fda7641be202a3cedc32211ba...b86ed7335b2cdc8fda7641be202a3cedc32211ba --->

<!-- ### Changes with no label -->


<!--- PR #26: https://github.com/validmind/agents/pull/26 --->
<!--- Labels: none --->
<!--- ### Merging main branch into production branch (#26) --->
<!-- No release notes or summary provided. -->


<!--- PR #22: https://github.com/validmind/agents/pull/22 --->
<!--- Labels: none --->
<!--- ### Merging main branch into production (#22) --->
<!-- No release notes or summary provided. -->


<!--- PR #3: https://github.com/validmind/agents/pull/3 --->
<!--- Labels: none --->
### Implementation of code explainer agents (#3)

# Code Explainer LLM agent

This changes covers implementation of the code explainer prompts and LangGraph implementation.  The code explainer agent take two inputs `source_code`  and `additional_instructions` in string format. 

## How to use the Code Explainer

```python
from IPython.display import Markdown, display

from agents import code_explainer

with open("binary_classifier_code.py") as f:
    code_content = f.read()
state = {
    "inputs": {
        "additional_instructions": "Preprocessing module for binary classification",
        "source_code": code_content,
    },
    "output": "",
}
state = code_explainer.invoke(state)
display(display(Markdown(state["output"])))
```

## Unit test
A test has been added in the `tests/test_graphs.py` file

## Demo notebook
The demo notebook is located at `notebooks/code_explainer.ipynb`


## Documentation
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/documentation/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/documentation/compare/01f652d63c5c2897688a76ad8ca89ea50973c492...01f652d63c5c2897688a76ad8ca89ea50973c492 --->



<!--- PR #693: https://github.com/validmind/documentation/pull/693 --->
<!--- Labels: documentation --->
### Add missing section on exporting ongoing monitoring documents to user guide (#693)

### New Feature: Exporting Ongoing Monitoring Documentation

We're introducing a new feature that enables users to export ongoing monitoring documentation for models. This update includes a detailed guide on how to use this feature through the user interface. Here are the steps:

1. Select **Inventory** from the left sidebar.
2. Choose a model or use filters/search to locate one.
3. Select **Ongoing Monitoring** from the model's sidebar.
4. Click on **Export Document** in the right sidebar.
5. Download the document to your local system by clicking **Download File**.

This feature enhancement is designed to improve the user experience by providing straightforward instructions for exporting ongoing monitoring reports.

<!-- Image: https://github.com/user-attachments/assets/477bcb8b-36f5-46b1-93b5-ab5e53aac8d2 -->
<!-- Image: https://github.com/user-attachments/assets/cb5ca15b-4fdb-4c7a-b167-a2272521641e -->
<!-- Image: https://github.com/user-attachments/assets/cbc093ff-9990-417e-8e36-70bcd8c89657 -->
<!-- Image: https://github.com/user-attachments/assets/1caad158-f185-48fc-a9f8-1306524deeab -->
<!-- Image: https://github.com/user-attachments/assets/e42eaa97-cf28-41a6-b4c1-5de5966c69a6 -->

<!--- PR #713: https://github.com/validmind/documentation/pull/713 --->
<!--- Labels: documentation, highlight --->
### Updated Validator Fundamentals training courses (#713)

We've made significant updates to our **Validator Fundamentals** course to make it more comprehensive and straightforward, similar to the improvements we made to the Developer Fundamentals course. The updated course now includes revised login instructions, individual module learning outcomes, module summaries, and additional slides covering previously unaddressed topics.

We've thoroughly tested and timed these courses to ensure the instructions and time estimates are accurate and sensible.

The **Validator Fundamentals** course has been restructured into four modules, each with clear learning outcomes:

1. **Module 1** — Using ValidMind for Model Validation.
2. **Module 2** — Running Data Quality Tests.
3. **Module 3** — Developing Challenger Models.
4. **Module 4** — Finalizing Validation Reports.

This training series guides you through the basics of using ValidMind for validating datasets and models. It covers running and logging tests with the ValidMind Library, finalizing your model's validation report on the ValidMind Platform, and more. You'll learn how to use ValidMind to automate testing, populate evidence in your validation report, track finding resolution, and more. Register now to take the course!

Please note that the course preview is available [here](https://docs-demo.vm.validmind.ai/pr_previews/beck/sc-8468/update-validator-fundamentals-course/training/validator-fundamentals/validator-fundamentals-register.html). Be aware of the course module preview disclaimer.


<!--- PR #681: https://github.com/validmind/documentation/pull/681 --->
<!--- Labels: documentation, highlight --->
### Enhancements to Developer Fundamentals Training

We've introduced several improvements to the Developer Fundamentals training. These enhancements focus on the notebook execution and documentation process within GitHub Actions and the site content.

For GitHub Actions, we've updated the action names and descriptions in the `action.yml` files for demo, prod, and staging notebooks. This better reflects the execution of multiple notebooks. We've also added a step to register the `validmind` kernel in the GitHub Actions workflow. This ensures the correct environment is used for notebook execution. Additionally, we've modified the execution command to target a series of notebooks, improving the scope of automated testing.

In terms of documentation and training content, we've introduced new training modules and updated existing ones. This provides a comprehensive learning path for developers, validators, and administrators using ValidMind. We've added detailed markdown files for each training module, outlining learning objectives, course content, and step-by-step instructions for using ValidMind. We've also enhanced the site content with new sections and updated existing ones to improve navigation and user experience.

We've made changes to the notebook content and structure as well. We've reorganized the notebook directory structure to separate executed notebooks from tutorials, improving clarity and maintainability. We've updated notebook content to include new sections on implementing custom tests and using external test providers. This provides users with more advanced capabilities. We've also added new images and GIFs to the documentation to visually guide users through the process of adding content blocks and test results.

These changes aim to streamline the notebook execution process, enhance the training and documentation experience, and provide users with more robust tools for model development and validation. 

We've also made several updates to improve your experience with our Learning Paths and website. Here are the key changes:

We've improved our Learning Paths by standardizing the casing in titles for better readability, simplifying and clarifying course descriptions, and adding a "Register Now" or "Coming Soon" button for each course, depending on its availability.

We've enhanced the Validator Fundamentals section in anticipation of the upcoming validation experience notebooks. 

We've made some changes to improve navigation on our website. We've removed the redundant "Training" drop-down from the training section to streamline navigation and added the `Releases` section to the condensed drop-down menu.

We've also updated the browser compatibility message and the Legal Ease section for better user experience (#681)

We've made several updates to improve your experience with our Learning Paths and website. Here are the key changes:

**Learning Paths Preview**

We've made the following improvements to our Learning Paths:

- Standardized the casing in titles for better readability.
- Simplified and clarified course descriptions.
- Added a "Register Now" or "Coming Soon" button for each course, depending on its availability.

Here's a preview of the updated Learning Paths:

![Learning Paths Preview](https://github.com/user-attachments/assets/1f26debf-73f8-468f-9687-3f53255cf903)

**Validator Fundamentals**

We've also enhanced the Validator Fundamentals section in anticipation of the upcoming validation experience notebooks. 

Here's a sneak peek at the updated Validator Fundamentals:

![Validator Fundamentals Preview](https://github.com/user-attachments/assets/a6127863-d75c-4911-9ba0-be6e4fd3382a)

**Website Updates**

We've made some changes to improve navigation on our website:

- Removed the redundant "Training" drop-down from the training section to streamline navigation.
- Added the `Releases` section to the condensed drop-down menu.

Here's a look at the updated navigation:

![Website Navigation Update](https://github.com/user-attachments/assets/65038b2d-da76-4c7e-8b45-ca0f699d8499)

**Browser Compatibility Message and Legal Ease Section**

We've also updated the browser compatibility message and the Legal Ease section for better user experience. 

Here are the updated sections:

| Updated Browser Compatibility Message | Updated Legal Ease Section |
|--|--|
|<img width="1288" alt="Updated Browser Compatibility Message" src="https://github.com/user-attachments/assets/aa089576-5e0b-474a-b1c7-55a5349ea249" /> | <img width="1313" alt="Updated Legal Ease Section" src="https://github.com/user-attachments/assets/7f768adc-62fb-4fb1-bdad-615a7dbf5e01" />|

This update introduces several enhancements to the notebook execution and documentation process within GitHub Actions and the site content. 

In terms of GitHub Actions enhancements, we've updated the action names and descriptions in the `action.yml` files for demo, prod, and staging notebooks to better reflect the execution of multiple notebooks. We've also added a step to register the `validmind` kernel in the GitHub Actions workflow, ensuring the correct environment is used for notebook execution. Furthermore, we've modified the execution command to target a series of notebooks, improving the scope of automated testing.

For documentation and training content, we've introduced new training modules and updated existing ones to provide a comprehensive learning path for developers, validators, and administrators using ValidMind. We've added detailed markdown files for each training module, outlining learning objectives, course content, and step-by-step instructions for using ValidMind. Additionally, we've enhanced the site content with new sections and updated existing ones to improve navigation and user experience.

Regarding notebook content and structure, we've reorganized the notebook directory structure to separate executed notebooks from tutorials, improving clarity and maintainability. We've updated notebook content to include new sections on implementing custom tests and using external test providers, providing users with more advanced capabilities. We've also added new images and GIFs to the documentation to visually guide users through the process of adding content blocks and test results.

These changes aim to streamline the notebook execution process, enhance the training and documentation experience, and provide users with more robust tools for model development and validation.

<!-- Image: https://github.com/user-attachments/assets/d886a3bb-df86-48a3-926d-faaeaf423da4 -->
<!-- Image: https://github.com/user-attachments/assets/1f26debf-73f8-468f-9687-3f53255cf903 -->
<!-- Image: https://github.com/user-attachments/assets/a6127863-d75c-4911-9ba0-be6e4fd3382a -->
<!-- Image: https://github.com/user-attachments/assets/65038b2d-da76-4c7e-8b45-ca0f699d8499 -->
<!-- Image: https://github.com/user-attachments/assets/9a72e430-7871-47ca-9401-83cdb51c1907 -->

<!--- PR #707: https://github.com/validmind/documentation/pull/707 --->
<!--- Labels: documentation --->
### Updated features for content block management (#707)

We've made some updates to our documentation to support the release of our updated content block interface and the text block library. 

We've reorganized and expanded our documentation on templates within the ValidMind Platform. You can now find guides on managing templates for model documentation, validation reports, and ongoing monitoring reports under our Guides in the templates section. We've also added a new guide on how to manage your text block library.

You can preview the changes live [here](https://docs-demo.vm.validmind.ai/pr_previews/beck/sc-8990/documentation-saving-text-block-to-block/guide/guides.html).

We've resolved any broken links and applied aliases to the old URLs. We've also updated the 'Manage text block library' page to cover the new block library feature. You can preview this page [here](https://docs-demo.vm.validmind.ai/pr_previews/beck/sc-8990/documentation-saving-text-block-to-block/guide/templates/manage-text-block-library.html).

The 'Work with content blocks' page has been updated to reflect the new UI. You can preview the updated page [here](https://docs-demo.vm.validmind.ai/pr_previews/beck/sc-8990/documentation-saving-text-block-to-block/guide/model-documentation/work-with-content-blocks.html).

The 'Work with test results' page now reflects the new test-driven block menu UX and includes a section on configuring the display of test results once inserted. You can preview this page [here](https://docs-demo.vm.validmind.ai/pr_previews/beck/sc-8990/documentation-saving-text-block-to-block/guide/model-documentation/work-with-test-results.html).

The 'Work with metrics over time' page now reflects the new metric over time block menu UX. You can preview this page [here](https://docs-demo.vm.validmind.ai/pr_previews/beck/sc-8990/documentation-saving-text-block-to-block/guide/monitoring/work-with-metrics-over-time.html).

Finally, we've updated the 'Developer Fundamentals' course to reference block insertion and relevant slides have been updated to the new UX. You can preview this course [here](https://docs-demo.vm.validmind.ai/pr_previews/beck/sc-8990/documentation-saving-text-block-to-block/training/developer-fundamentals/developer-fundamentals-register.html). Please note that the embedded Jupyter notebooks won't render properly yet as we haven't pushed the updated training to production at the moment.

This update refactors the paths for documentation templates, moving them from the `model-documentation` directory to a new `templates` directory. This change impacts various files across the project, including configuration files, guides, and release notes. 

In addition, we've enhanced the content block management system for better organization and reuse of text blocks. You can now manage a library of reusable text blocks, configure test result displays, and enjoy an improved user interface for adding and removing content blocks.

<!-- Image: https://github.com/user-attachments/assets/0320abec-a754-40e5-abde-0edc19a1a6f1 -->
<!-- Image: https://github.com/user-attachments/assets/c26e4843-5c89-4747-a1eb-d63c37ec4cc4 -->
<!-- ### Changes with no label -->


<!--- PR #715: https://github.com/validmind/documentation/pull/715 --->
<!--- Labels: none --->
<!--- ### Main branch merged into staging branch (#715) --->
<!-- No release notes or summary provided. -->


<!--- PR #709: https://github.com/validmind/documentation/pull/709 --->
<!--- Labels: none --->
<!--- ### Main branch merged into staging branch (#709) --->
<!-- No release notes or summary provided. -->


<!--- PR #724: https://github.com/validmind/documentation/pull/724 --->
<!--- Labels: none --->
<!--- ### Merging main branch into staging branch (#724) --->
<!-- No release notes or summary provided. -->


<!--- PR #718: https://github.com/validmind/documentation/pull/718 --->
<!--- Labels: none --->
<!--- ### Merging main branch into staging branch (#718) --->
<!-- No release notes or summary provided. -->


<!--- PR #725: https://github.com/validmind/documentation/pull/725 --->
<!--- Labels: none --->
<!--- ### Main branch merged into staging branch (#725) --->
<!-- No release notes or summary provided. -->


<!--- PR #705: https://github.com/validmind/documentation/pull/705 --->
<!--- Labels: none --->
<!--- ### Merging main branch into staging branch (#705) --->
<!-- No release notes or summary provided. -->


<!--- PR #723: https://github.com/validmind/documentation/pull/723 --->
<!--- Labels: none --->
<!--- ### Merging main branch into staging branch (#723) --->
<!-- No release notes or summary provided. -->


<!--- PR #728: https://github.com/validmind/documentation/pull/728 --->
<!--- Labels: none --->
<!--- ### Main branch merged into staging branch (#728) --->
<!-- No release notes or summary provided. -->


<!--- PR #701: https://github.com/validmind/documentation/pull/701 --->
<!--- Labels: none --->
<!--- ### Merging main branch into staging branch (#701) --->
<!-- No release notes or summary provided. -->


<!--- PR #706: https://github.com/validmind/documentation/pull/706 --->
<!--- Labels: none --->
<!--- ### Main branch merged into staging branch (#706) --->
<!-- No release notes or summary provided. -->


<!--- PR #700: https://github.com/validmind/documentation/pull/700 --->
<!--- Labels: none --->
<!--- ### Merging main branch into staging branch (#700) --->
<!-- No release notes or summary provided. -->


<!--- ## Validmind-library --->
<!--- Tag: [cmvm/25.05.04](https://github.com/validmind/validmind-library/releases/tag/cmvm/25.05.04) --->
<!--- Compare API call: gh api repos/validmind/validmind-library/compare/cmvm/25.05.04...cmvm/25.05.04 --->
<!-- No public PRs found for this release -->
