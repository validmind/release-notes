---
title: "Refactor custom field permissions handling in `API.ts` and `CustomFieldModal` components (#1423)"
categories: [frontend, 25.06, release, enhancement]
sidebar: release-notes
toc-expand: true
date: "May 30, 2025"
# Content edited by AI - 2025-06-10 17:54
# Content overwritten from an earlier version - 2025-06-10 17:54
# PR URL: https://github.com/validmind/frontend/pull/1423
---

The `TCustomFieldPermissions` interface manages read/write permissions for custom fields, simplifying permission management. The `GetFieldPermissions` API call retrieves permissions using the field key, enhancing user experience. The `useCustomFieldPermissions` hook uses this API to fetch permissions, improving logic and performance. Imports in `API.ts` and `CustomFieldModal/index.tsx` have been updated to align with the new model structure, keeping the codebase organized. The field permissions dropdown now loads instantly.

This update improves the management of custom field permissions:

- Added an asynchronous function, `GetFieldPermissions`, in `API.ts` to retrieve permissions for a custom field, returning an object with `write` and `read` roles. Some existing API functions have been refactored for better formatting.

- The `CustomFieldModal` component now correctly imports `CodeTestResponse` from the appropriate module, aligning with the new custom fields model.

- The `useCustomFieldPermissions` hook now uses the `GetFieldPermissions` API function, replacing manual iteration over organization roles. This simplifies logic by directly using `write` permissions from the API.

- Introduced a new type, `TCustomFieldPermissions`, in the `custom_fields` model to ensure type consistency.

These changes centralize permission-related logic in the API and reduce repetitive code in UI components, enhancing clarity and efficiency.

<!--- VALIDATION SUMMARY
Content Type: title
Validation Status: CHECK
Attempts: 7
Last Validation: 2025-06-10 17:43:07
Result: The edited content provides more specific information by mentioning the exact locations where the refactoring should occur, namely in the `API.ts` and `CustomFieldModal` components. This added detail can help developers understand the scope of the task more clearly. The edit improves the original co...
Reedit Available: Yes
Reedit Message: The edited content provides more specific information by mentioning the exact locations where the refactoring should occur, namely in the `API.ts` and `CustomFieldModal` components. This added detail ...
--->
