---
title: "Enable or disable LLM support with `OfflineFlags` for Barclays (#1431)"
categories: [backend, 25.05.04, hotfix, enhancement]
sidebar: release-notes
toc-expand: true
date: "May 16, 2025"
# Content edited by AI - 2025-06-04 12:29
# Content validated by AI - 2025-06-04 12:29
# Content overwritten from an earlier version - 2025-06-04 12:29
# PR URL: https://github.com/validmind/backend/pull/1431
---

This update introduces offline feature flag support and enhances the feature flags codebase. Key improvements include:

- Offline feature flag functionality can now be configured through environment variables, enabling use in environments where LaunchDarkly integration is not feasible, such as VM deployments.

- Comprehensive docstrings have been added to all feature flag functions, enhancing code documentation.

- Feature flag access has been refactored to use a new centralized, context-aware function, reducing code duplication.

- Unused feature flags (`FLAG_REDIS_ENABLED`, `FLAG_CASBIN_RELOAD_ENABLED`, `FLAG_AUTH_CONFIG`) have been removed, addressing technical debt.

- Type hints have been added to improve code maintainability and type safety.

This update enhances the feature flag system by adding offline flag support and improving context handling for LaunchDarkly evaluations. The `.env.example` file now includes a `FEATURE_FLAGS` JSON string for offline environments, enabling offline evaluation of feature flags. The `feature_flags.py` file introduces new functions: `get_offline_feature_flag` retrieves flag values from offline configurations, and `get_feature_flag_with_context` checks offline configurations before LaunchDarkly evaluations. Context functions have been improved, with `context_from_user` now featuring an enhanced docstring and a new `context_from_user_and_organization` function for multi-context evaluations. The backend tracking route now uses `get_feature_flag_with_context`, decoupling it from the LaunchDarkly client for flexible offline support. Comprehensive unit tests in `tests/unit/test_feature_flags.py` cover various scenarios, including context creation and flag evaluation.