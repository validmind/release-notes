---
title: "Enable or disable LLM support with `OfflineFlags` for Barclays (#1431)"
categories: [backend, 25.05.04, hotfix, enhancement]
sidebar: release-notes
toc-expand: true
date: "May 23, 2025"
# Content edited by AI - 2025-06-05 09:34
# Content validated by AI - 2025-06-05 09:34
# Content overwritten from an earlier version - 2025-06-05 09:34
# PR URL: https://github.com/validmind/backend/pull/1431
---

This update introduces offline feature flag support and enhances the feature flags codebase. Key improvements include:

- Offline feature flags can now be configured via environment variables, enabling their use in environments without LaunchDarkly integration, such as VM deployments.

- Comprehensive docstrings have been added to all feature flag functions, enhancing code documentation.

- Feature flag access is now refactored to use a centralized, context-aware function, reducing code duplication.

- Unused feature flags (`FLAG_REDIS_ENABLED`, `FLAG_CASBIN_RELOAD_ENABLED`, `FLAG_AUTH_CONFIG`) have been removed.

- Type hints have been added to improve code maintainability and type safety.

This update enhances the feature flag system by adding offline support and improving context handling for LaunchDarkly evaluations. Key changes include the addition of a `FEATURE_FLAGS` JSON string in the `.env.example` file for offline environments, new functions in `feature_flags.py` for offline flag retrieval, and improved context functions. The backend now uses `get_feature_flag_with_context` for flag evaluations, and comprehensive unit tests have been added to ensure reliability.

The `.env.example` file now includes a `FEATURE_FLAGS` JSON string for offline environments, allowing offline evaluation of feature flags using a pre-defined JSON of flags.

The `feature_flags.py` file introduces new functions. `get_offline_feature_flag` retrieves flag values from the offline configuration, returning a default if the flag is absent. `get_feature_flag_with_context` checks the offline configuration before attempting a LaunchDarkly evaluation, enhancing offline reliability.

Two context functions have been improved. The `context_from_user` function now has an enhanced docstring, and a new function, `context_from_user_and_organization`, creates a multi-context using both user and organization information for more granular evaluations.

The backend tracking route now uses `get_feature_flag_with_context` instead of directly accessing the `ldclient`, decoupling feature flag evaluation from the LaunchDarkly client and enabling flexible offline support.

Comprehensive unit tests in `tests/unit/test_feature_flags.py` cover various scenarios, including context creation, offline and online flag evaluation, and handling cases where user or organization data may be missing.