---
title: "Ensure all model roles are considered when evaluating membership (#1445)"
categories: [backend, 25.05.04, hotfix]
sidebar: release-notes
toc-expand: true
date: "May 23, 2025"
# Content edited by AI - 2025-06-05 09:34
# Content validated by AI - 2025-06-05 09:34
# Content overwritten from an earlier version - 2025-06-05 09:34
# PR URL: https://github.com/validmind/backend/pull/1445
---

This update enhances the model membership and content type authorization logic in `src/backend/auth/auth.py` to consider all roles a user holds for a model, rather than just one. Previously, only the first matching role was used, potentially leading to access issues. Now, `get_all_model_roles_for_user` aggregates all roles, and `get_content_type_for_roles` manages multiple roles, ensuring comprehensive permissions for users with multiple roles. Review any dependencies on single-role logic, as assumptions may need adjustment.

The model membership and content type authorization logic has been updated to consider all roles a user holds for a model, rather than just one.

Before:
- Only the first matching role for a user on a model was considered.
- Functions like `get_model_role_for_user` and `get_content_type_for_role` operated on a single role.

After:
- `get_all_model_roles_for_user` returns all roles a user has for a model.
- Logic aggregates all content types a user is authorized for, based on all their roles.
- `get_content_type_for_role` is refactored to `get_content_type_for_roles` to handle multiple roles.
- Membership and authorization checks use the new multi-role logic, ensuring users with multiple roles are granted all appropriate permissions.

Previously, users with multiple roles on a model would only have permissions associated with the first role found, leading to potential access issues. This change ensures that all assigned roles are respected, improving the authorization system's correctness and flexibility.

- If any downstream code or policies assumed only a single role per user per model, those assumptions may need to be revisited.
- The function `get_content_type_for_role` is replaced by `get_content_type_for_roles` and now expects a list of roles.

Consider reviewing and updating any documentation or downstream services that reference the old single-role logic. This change lays the groundwork for more granular or complex role-based access control in the future.

This update enhances the authorization flow and role-based permissions in the backend, introducing multi-role support and improved content type resolution. Users can now have multiple roles, with the function `get_all_model_roles_for_user` returning all roles for a specific inventory model. The function `get_content_type_for_roles` filters content types based on permissions from each role. The authorization chain now validates content types against all user roles. A new `has_permission` method in `OrganizationRole` and a mapping in `RolePermission` improve permission checking.

- Multi-Role Support:
  - `get_model_role_for_user` is replaced by `get_all_model_roles_for_user`, returning all roles for a user in a specific inventory model.

- Content Type Resolution:
  - `get_content_type_for_roles` iterates over user roles, filtering by permissions using `RolePermission.PERMISSION_TO_CONTENT_TYPE`. It checks for conflicts, raising an `AuthError` if conflicting permissions are found.

- Authorization Chain Refinement:
  - Adjustments in the decorator and `ensure_model_membership` align with the multi-role structure, validating authorized content types against all user roles.

- Data Model Enhancements:
  - A `has_permission` method is added to `OrganizationRole` for permission checking.
  - `RolePermission` includes a mapping (`PERMISSION_TO_CONTENT_TYPE`) linking permission action IDs to content types, with plans for expansion.