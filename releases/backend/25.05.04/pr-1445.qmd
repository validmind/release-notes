---
title: "Ensure all model roles are considered when evaluating membership (#1445)"
categories: [backend, 25.05.04, hotfix]
sidebar: release-notes
toc-expand: true
date: "May 16, 2025"
# Content edited by AI - 2025-06-04 12:29
# Content validated by AI - 2025-06-04 12:29
# Content overwritten from an earlier version - 2025-06-04 12:29
# PR URL: https://github.com/validmind/backend/pull/1445
---

This update enhances the model membership and content type authorization logic in `src/backend/auth/auth.py` to consider all roles a user holds for a given model. Previously, only the first matching role was considered, potentially leading to insufficient access. Now, `get_all_model_roles_for_user` aggregates all roles, and `get_content_type_for_roles` handles multiple roles, ensuring users receive all appropriate permissions. This change may require revisiting assumptions about single-role logic in downstream code.

The model membership and content type authorization logic has been updated:

- Previously, only the first matching role for a user on a model was considered for membership and content type authorization.
- Functions like `get_model_role_for_user` and `get_content_type_for_role` operated on a single role.

Now:

- `get_all_model_roles_for_user` returns all roles a user has for a model.
- Logic aggregates all content types a user is authorized for, based on all their roles.
- `get_content_type_for_role` is refactored to `get_content_type_for_roles` to handle multiple roles.
- Membership and authorization checks use the new multi-role logic, ensuring users with multiple roles receive all appropriate permissions.

Breaking Changes:

- Downstream code or policies assuming a single role per user per model may need revision.
- `get_content_type_for_role` is replaced by `get_content_type_for_roles`, which expects a list of roles.

Additional Notes:

- Review and update any documentation or services referencing the old single-role logic.
- This change supports more granular or complex role-based access control in the future.

This update enhances the authorization flow and role-based permissions in the backend, focusing on multi-role support, content type resolution, authorization chain refinement, and data model enhancements.

1. Multi-Role Support:
   
   - The function `get_model_role_for_user` is replaced by `get_all_model_roles_for_user`, returning all roles associated with a user for a specific inventory model, allowing for multiple roles per user.

2. Content Type Resolution:
   
   - `get_content_type_for_roles` now evaluates all user roles, filtering by permissions using `RolePermission.PERMISSION_TO_CONTENT_TYPE`. This supports multiple documentation types based on granted permissions. An `AuthError` is raised if conflicting permissions (`update_doc` and `update_vr`) are found.

3. Authorization Chain Refinement:
   
   - The decorator and `ensure_model_membership` are updated to validate authorized content types against multiple user roles instead of a single role.

4. Data Model Enhancements:
   
   - A new `has_permission` method in `OrganizationRole` abstracts permission checking. The `RolePermission` model includes a `PERMISSION_TO_CONTENT_TYPE` mapping, linking permission action IDs to content types, with plans for expansion.

These changes enhance the flexibility and security of the role-based permission system, improving model access and modification operations.