---
title: "Ensure all model roles are considered when evaluating membership (#1445)"
categories: [backend, 25.05.04, hotfix]
sidebar: release-notes
toc-expand: true
date: "May 16, 2025"
# Content edited by AI - 2025-06-04 18:01
# Content validated by AI - 2025-06-04 18:01
# Content overwritten from an earlier version - 2025-06-04 18:01
# PR URL: https://github.com/validmind/backend/pull/1445
---

This update enhances the authorization logic in `src/backend/auth/auth.py` by considering all roles a user holds for a model, rather than just one. Previously, only the first matching role was used, potentially causing access issues for users with multiple roles. The new function `get_all_model_roles_for_user` aggregates all roles and updates membership checks to ensure comprehensive permissions. The function `get_content_type_for_role` is now `get_content_type_for_roles`, expecting a list of roles. This change improves access control flexibility and accuracy.

The model membership and content type authorization logic now considers all roles a user has for a model, rather than just one. Previously, functions like `get_model_role_for_user` and `get_content_type_for_role` operated on a single role, which could lead to access issues for users with multiple roles.

The update introduces `get_all_model_roles_for_user`, which returns all roles a user has for a model. The logic aggregates all content types a user is authorized for, based on all their roles. The function `get_content_type_for_role` is refactored to `get_content_type_for_roles` to handle multiple roles. Membership and authorization checks are updated to use the new multi-role logic, ensuring users with multiple roles (e.g., both "developer" and "validator") are granted all appropriate permissions.

This change enhances flexibility and correctness in model access control. Users with multiple roles will now have access to all content types and actions permitted by any of their roles. If any downstream code or policies assumed only a single role per user per model, those assumptions may need to be revisited. The function `get_content_type_for_role` is replaced by `get_content_type_for_roles` and now expects a list of roles.

Consider reviewing and updating any documentation or downstream services that reference the old single-role logic. This change lays the groundwork for more granular or complex role-based access control in the future.

This update enhances the authorization flow and role-based permissions in the backend, introducing a multi-role approach and refining content type resolution and authorization chains. Users can now have multiple roles, and permissions are checked against all roles. The `get_model_role_for_user` function is replaced with `get_all_model_roles_for_user`, and `get_content_type_for_roles` now considers all user roles. A new `has_permission` method is added, and `RolePermission` includes a mapping for permission actions to content types.

- Multi-Role Approach:
  
  - The function `get_model_role_for_user` is replaced by `get_all_model_roles_for_user`, which now returns a list of all roles associated with a user for a specific inventory model. This supports scenarios where a user might have multiple roles.

- Content Type Resolution:
  
  - The function `get_content_type_for_roles` now iterates over all roles assigned to the user, filtering by their permissions using a new mapping, `RolePermission.PERMISSION_TO_CONTENT_TYPE`. This allows multiple documentation types to be considered based on the specific permissions granted through each role.
  
  - The default setting of the content type in the decorated function leverages these permissions. Additional logic checks for conflicting states, such as when a user has properties of both developer and validator. An `AuthError` is raised if both permissions (`update_doc` and `update_vr`) are found simultaneously.

- Authorization Chain Refinement:
  
  - Adjustments are made in the decorator and in `ensure_model_membership` to work with the new multi-role structure. The membership check now validates authorized content types against the list of user roles rather than a singular role.

- Data Model Enhancements:
  
  - A new helper method, `has_permission`, is added in the `OrganizationRole` class to abstract permission checking.
  
  - The `RolePermission` model now includes a mapping, `PERMISSION_TO_CONTENT_TYPE`, that links permission action IDs to relevant content types, with plans to expand this mapping as support for multiple document types grows.

These changes aim to improve the expressiveness and flexibility of the role-based permission system, enhancing the security and integrity of model access and modification operations within the application.