---
title: "Improve template swap-merge experience for `inventory models` (#1383)"
categories: [backend, 25.05, release]
sidebar: release-notes
toc-expand: true
date: "April 28, 2025"
# CHECK: Title validation failed - The edited content provides a more specific context by mentioning "inventory models," which helps clarify the scope of the improvement. However, it removes the "feat(templates):" prefix, which is typically used in commit messages to indicate the type of change. If this is intended to be a commit message, it's important to retain the prefix for consistency and clarity in version control systems. 

Overall, the edit improves specificity but loses some structural information. If the context allows for omitting the prefix, the edit
# Content overwritten from an earlier version - 2025-06-06 08:50
# PR URL: https://github.com/validmind/backend/pull/1383
---

# PR Summary

This PR introduces new functionality to allow users to create and swap documentation templates for inventory models. The major changes include:

1. A new method, create_template_version_from_json, added to the inventory model code. This method accepts a document type and sections data to update the current template version, then saves a new template version via an internal helper method.

2. Three new HTTP POST endpoints added to the UI routing layer for the following document types:
   - model_documentation
   - validation_report
   - monitoring

   Each endpoint maps to a common helper function (_create_and_swap_template) that performs several key actions:
   - Validates the provided document type against allowed values.
   - Retrieves and verifies the inventory model based on the current user's organization and membership (with an authorization override for model admins).
   - Checks for the presence of required fields (to_template_cuid, to_template_version, and new_template_json) in the JSON payload.
   - Retrieves the target template and its version, performs the swap by calling the swap_template method on the inventory model, and finally, calls create_template_version_from_json to update the template.
   - Appropriately handles errors by logging and raising a BadRequestError with relevant messages.

The functional changes focus on enhancing the templatization process and ensuring that proper validations and error handling are in place for swapping templates based on a provided JSON structure.